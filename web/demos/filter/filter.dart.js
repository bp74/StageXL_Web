// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function() {
    var t1 = this.stack;
    return !(t1 == null) ? t1 : "";
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.Dynamic_ = {"": "Object;"};

$$.Null = {"": "Object;"};

$$.CastErrorImplementation = {"": "Object;actualType,expectedType",
  toString$0: function() {
    return "CastError: Casting value of type " + $.S(this.actualType) + " to" + " incompatible type " + this.expectedType;
  }
};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = $.regExpExec(this, $.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.length($.$$index(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString(str));
  },
  allMatches$1: function(str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function() {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start,end,_groups",
  $index: function(index) {
    var t1 = this._groups;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index(t1, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function() {
    return $._AllMatchesIterator$(this._re, this._str);
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib3$_current",
  get$current: function() {
    return this._liblib3$_current;
  },
  moveNext$0: function() {
    this._liblib3$_current = this._re.firstMatch$1(this._str);
    return !(this._liblib3$_current == null);
  }
};

$$.StringMatch = {"": "Object;start,str,pattern>",
  $index: function(g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if ($.$$eq(group_, 0) !== true)
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.JsStringBuffer = {"": "Object;_contents",
  get$length: function() {
    return this._contents.length;
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(obj) {
    var t1, t2;
    if (typeof obj !== "string")
      return this.add$1$bailout(1, obj);
    t1 = this._contents;
    t2 = obj;
    this._contents = t1 + t2;
  },
  add$1$bailout: function(state0, obj) {
    var t1, t2;
    t1 = this._contents;
    t2 = typeof obj === "string" ? obj : $.S(obj);
    this._contents = t1 + t2;
  },
  clear$0: function() {
    this._contents = "";
  },
  toString$0: function() {
    return this._contents;
  }
};

$$.Collection = {"": "Iterable;",
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  }
};

$$.DateTime = {"": "Object;millisecondsSinceEpoch>,isUtc",
  $eq: function(other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDateTime))
      return false;
    return $.$$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch) === true && $.$$eq(this.isUtc, other.isUtc) === true;
  },
  $lt: function(other) {
    var t1, t3;
    t1 = this.millisecondsSinceEpoch;
    t3 = other.get$millisecondsSinceEpoch();
    if (typeof t1 !== "number")
      return this.$$lt$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$lt$bailout(2, 0, t1, t3);
    return t1 < t3;
  },
  $$lt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t3 = other.get$millisecondsSinceEpoch();
      case 2:
        state0 = 0;
        return $.$$lt(t1, t3);
    }
  },
  $le: function(other) {
    var t1, t3;
    t1 = this.millisecondsSinceEpoch;
    t3 = other.get$millisecondsSinceEpoch();
    if (typeof t1 !== "number")
      return this.$$le$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$le$bailout(2, 0, t1, t3);
    return t1 <= t3;
  },
  $$le$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t3 = other.get$millisecondsSinceEpoch();
      case 2:
        state0 = 0;
        return $.$$le(t1, t3);
    }
  },
  $gt: function(other) {
    var t1, t3;
    t1 = this.millisecondsSinceEpoch;
    t3 = other.get$millisecondsSinceEpoch();
    if (typeof t1 !== "number")
      return this.$$gt$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$gt$bailout(2, 0, t1, t3);
    return t1 > t3;
  },
  $$gt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t3 = other.get$millisecondsSinceEpoch();
      case 2:
        state0 = 0;
        return $.$$gt(t1, t3);
    }
  },
  $ge: function(other) {
    var t1, t3;
    t1 = this.millisecondsSinceEpoch;
    t3 = other.get$millisecondsSinceEpoch();
    if (typeof t1 !== "number")
      return this.$$ge$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$ge$bailout(2, 0, t1, t3);
    return t1 >= t3;
  },
  $$ge$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t3 = other.get$millisecondsSinceEpoch();
      case 2:
        state0 = 0;
        return $.$$ge(t1, t3);
    }
  },
  get$hashCode: function() {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function() {
    var t1, t2, t3, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_fourDigits();
    t2 = new $.DateTime_toString_threeDigits();
    t3 = new $.DateTime_toString_twoDigits();
    y = t1.call$1(this.get$year());
    m = t3.call$1(this.get$month());
    d = t3.call$1(this.get$day());
    h = t3.call$1(this.get$hour());
    min = t3.call$1(this.get$minute());
    sec = t3.call$1(this.get$second());
    ms = t2.call$1(this.get$millisecond());
    if (this.isUtc === true)
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(duration) {
    var ms, t2;
    ms = this.millisecondsSinceEpoch;
    t2 = duration.get$inMilliseconds();
    if (typeof ms !== "number")
      return this.add$1$bailout(1, duration, ms);
    if (typeof t2 !== "number")
      return this.add$1$bailout(2, 0, ms, t2);
    return $.DateTime$fromMillisecondsSinceEpoch(ms + t2, this.isUtc);
  },
  add$1$bailout: function(state0, duration, ms, t2) {
    switch (state0) {
      case 0:
        ms = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t2 = duration.get$inMilliseconds();
      case 2:
        state0 = 0;
        return $.DateTime$fromMillisecondsSinceEpoch($.$$add(ms, t2), this.isUtc);
    }
  },
  get$year: function() {
    return $.Primitives_getYear(this);
  },
  get$month: function() {
    return $.Primitives_getMonth(this);
  },
  get$day: function() {
    return $.Primitives_getDay(this);
  },
  get$hour: function() {
    return $.Primitives_getHours(this);
  },
  get$minute: function() {
    return $.Primitives_getMinutes(this);
  },
  get$second: function() {
    return $.Primitives_getSeconds(this);
  },
  get$millisecond: function() {
    return $.Primitives_getMilliseconds(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if ($.abs(millisecondsSinceEpoch) > 8640000000000000)
      throw $.$$throw($.ArgumentError$(millisecondsSinceEpoch));
    if (isUtc == null)
      throw $.$$throw($.ArgumentError$(isUtc));
  },
  DateTime$_now$0: function() {
    $.Primitives_lazyAsJsDate(this);
  },
  $isDateTime: true
};

$$.Duration = {"": "Object;inMilliseconds>",
  $add: function(other) {
    var t1, t3;
    t1 = this.inMilliseconds;
    t3 = other.get$inMilliseconds();
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, 0, t1, t3);
    return $.Duration$(0, 0, t1 + t3, 0, 0);
  },
  $$add$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.inMilliseconds;
      case 1:
        state0 = 0;
        t3 = other.get$inMilliseconds();
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$$add(t1, t3), 0, 0);
    }
  },
  $sub: function(other) {
    var t1, t3;
    t1 = this.inMilliseconds;
    t3 = other.get$inMilliseconds();
    if (typeof t1 !== "number")
      return this.$$sub$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$sub$bailout(2, 0, t1, t3);
    return $.Duration$(0, 0, t1 - t3, 0, 0);
  },
  $$sub$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.inMilliseconds;
      case 1:
        state0 = 0;
        t3 = other.get$inMilliseconds();
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$$sub(t1, t3), 0, 0);
    }
  },
  $mul: function(factor) {
    var t2 = this.inMilliseconds;
    if (typeof t2 !== "number")
      return this.$$mul$bailout(2, factor, t2);
    if (typeof factor !== "number")
      return this.$$mul$bailout(1, factor);
    return $.Duration$(0, 0, t2 * factor, 0, 0);
  },
  $$mul$bailout: function(state0, factor, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t2 = this.inMilliseconds;
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$$mul(t2, factor), 0, 0);
    }
  },
  $tdiv: function(quotient) {
    var t1;
    if (typeof quotient !== "number")
      return this.$$tdiv$bailout(1, quotient);
    if (quotient === 0)
      throw $.$$throw($.IntegerDivisionByZeroException$());
    t1 = this.inMilliseconds;
    if (typeof t1 !== "number")
      return this.$$tdiv$bailout(2, quotient, t1);
    return $.Duration$(0, 0, $.CONSTANT6.$tdiv(t1, quotient), 0, 0);
  },
  $$tdiv$bailout: function(state0, quotient, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if ($.$$eq(quotient, 0) === true)
          throw $.$$throw($.IntegerDivisionByZeroException$());
        t1 = this.inMilliseconds;
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$$tdiv(t1, quotient), 0, 0);
    }
  },
  $lt: function(other) {
    var t1, t3;
    t1 = this.inMilliseconds;
    t3 = other.get$inMilliseconds();
    if (typeof t1 !== "number")
      return this.$$lt$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$lt$bailout(2, 0, t1, t3);
    return t1 < t3;
  },
  $$lt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.inMilliseconds;
      case 1:
        state0 = 0;
        t3 = other.get$inMilliseconds();
      case 2:
        state0 = 0;
        return $.$$lt(t1, t3);
    }
  },
  $gt: function(other) {
    var t1, t3;
    t1 = this.inMilliseconds;
    t3 = other.get$inMilliseconds();
    if (typeof t1 !== "number")
      return this.$$gt$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$gt$bailout(2, 0, t1, t3);
    return t1 > t3;
  },
  $$gt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.inMilliseconds;
      case 1:
        state0 = 0;
        t3 = other.get$inMilliseconds();
      case 2:
        state0 = 0;
        return $.$$gt(t1, t3);
    }
  },
  $le: function(other) {
    var t1, t3;
    t1 = this.inMilliseconds;
    t3 = other.get$inMilliseconds();
    if (typeof t1 !== "number")
      return this.$$le$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$le$bailout(2, 0, t1, t3);
    return t1 <= t3;
  },
  $$le$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.inMilliseconds;
      case 1:
        state0 = 0;
        t3 = other.get$inMilliseconds();
      case 2:
        state0 = 0;
        return $.$$le(t1, t3);
    }
  },
  $ge: function(other) {
    var t1, t3;
    t1 = this.inMilliseconds;
    t3 = other.get$inMilliseconds();
    if (typeof t1 !== "number")
      return this.$$ge$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$ge$bailout(2, 0, t1, t3);
    return t1 >= t3;
  },
  $$ge$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.inMilliseconds;
      case 1:
        state0 = 0;
        t3 = other.get$inMilliseconds();
      case 2:
        state0 = 0;
        return $.$$ge(t1, t3);
    }
  },
  get$inHours: function() {
    return $.$$tdiv(this.inMilliseconds, 3600000);
  },
  get$inMinutes: function() {
    return $.$$tdiv(this.inMilliseconds, 60000);
  },
  get$inSeconds: function() {
    return $.$$tdiv(this.inMilliseconds, 1000);
  },
  $eq: function(other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDuration))
      return false;
    return $.$$eq(this.inMilliseconds, other.inMilliseconds);
  },
  get$hashCode: function() {
    return $.hashCode(this.inMilliseconds);
  },
  toString$0: function() {
    var t1, t2, t3, t4, twoDigitMinutes, twoDigitSeconds, threeDigitMs;
    t1 = new $.Duration_toString_threeDigits();
    t2 = new $.Duration_toString_twoDigits();
    t3 = this.inMilliseconds;
    t4 = $.getInterceptor$JSNumber(t3);
    if (t4.$lt(t3, 0) === true)
      return "-" + $.S($.Duration$(0, 0, t4.$negate(t3), 0, 0));
    twoDigitMinutes = t2.call$1($.remainder(this.get$inMinutes(), 60));
    twoDigitSeconds = t2.call$1($.remainder(this.get$inSeconds(), 60));
    threeDigitMs = t1.call$1(t4.remainder$1(t3, 1000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(threeDigitMs);
  },
  $isDuration: true
};

$$.NullThrownError = {"": "Object;",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (!(t1 == null))
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function() {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.JsStringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout1(1, t1, t2);
    for (; $.$$lt(t1.i_1, t2.length) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
      if ($.$$gt(t1.i_1, 0) === true)
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      $.add(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (!(t2 == null))
      $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout1(2, t1, t2);
    actualParameters = $.toString(t1.sb_0);
    t1.sb_0 = $.JsStringBuffer$("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0)
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      $.add(t3, t2[i]);
    }
    formalParameters = $.toString(t1.sb_0);
    t2 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout1: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.JsStringBuffer$("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSArrayJSString(t2); $.$$lt(t1.i_1, t3.get$length(t2)) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
            if ($.$$gt(t1.i_1, 0) === true)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, $.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (!(t2 == null))
          $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          actualParameters = $.toString(t1.sb_0);
          t1.sb_0 = $.JsStringBuffer$("");
          for (t3 = $.getInterceptor$JSArrayJSString(t2), i = 0; $.CONSTANT.$lt(i, t3.get$length(t2)); ++i) {
            if (i > 0)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, t3.$index(t2, i));
          }
          formalParameters = $.toString(t1.sb_0);
          t2 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message>",
  toString$0: function() {
    return "Unsupported operation: " + $.S(this.get$message());
  }
};

$$.UnimplementedError = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function() {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;",
  toString$0: function() {
    return "FormatException: " + this.message;
  },
  $isException: true
};

$$.IllegalJSRegExpException = {"": "FormatException;message"};

$$.IntegerDivisionByZeroException = {"": "Object;",
  toString$0: function() {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
};

$$.Iterable = {"": "Object;",
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$length: function() {
    var it, count;
    it = $.iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function() {
    return $.iterator(this).moveNext$0() !== true;
  }
};

$$.Object = {"": ";",
  $eq: function(other) {
    if (other == null)
      return false;
    return this === other;
  },
  get$hashCode: function() {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$.ObjectInterceptor = {"": "Object;",
  $mod: function(receiver, a0) {
    return receiver.$mod(a0);
  },
  $and: function(receiver, a0) {
    return receiver.$and(a0);
  },
  $mul: function(receiver, a0) {
    return receiver.$mul(a0);
  },
  $add: function(receiver, a0) {
    return receiver.$add(a0);
  },
  $sub: function(receiver, a0) {
    return receiver.$sub(a0);
  },
  $div: function(receiver, a0) {
    return receiver.$div(a0);
  },
  $lt: function(receiver, a0) {
    return receiver.$lt(a0);
  },
  $shl: function(receiver, a0) {
    return receiver.$shl(a0);
  },
  $le: function(receiver, a0) {
    return receiver.$le(a0);
  },
  $eq: function(receiver, a0) {
    return receiver.$eq(a0);
  },
  $gt: function(receiver, a0) {
    return receiver.$gt(a0);
  },
  $ge: function(receiver, a0) {
    return receiver.$ge(a0);
  },
  $shr: function(receiver, a0) {
    return receiver.$shr(a0);
  },
  abs$0: function(receiver) {
    return receiver.abs$0();
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  },
  allMatches$1: function(receiver, a0) {
    return receiver.allMatches$1(a0);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  clear$0: function(receiver) {
    return receiver.clear$0();
  },
  codeUnitAt$1: function(receiver, a0) {
    return receiver.codeUnitAt$1(a0);
  },
  contains$1: function(receiver, a0) {
    return receiver.contains$1(a0);
  },
  contains$2: function(receiver, a0, a1) {
    return receiver.contains$2(a0, a1);
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  indexOf$1: function(receiver, a0) {
    return receiver.indexOf$1(a0);
  },
  indexOf$2: function(receiver, a0, a1) {
    return receiver.indexOf$2(a0, a1);
  },
  insertRange$3: function(receiver, a0, a1, a2) {
    return receiver.insertRange$3(a0, a1, a2);
  },
  get$isEmpty: function(receiver) {
    return receiver.get$isEmpty();
  },
  get$isEven: function(receiver) {
    return receiver.get$isEven();
  },
  get$isInfinite: function(receiver) {
    return receiver.get$isInfinite();
  },
  get$isNaN: function(receiver) {
    return receiver.get$isNaN();
  },
  get$isNegative: function(receiver) {
    return receiver.get$isNegative();
  },
  get$length: function(receiver) {
    return receiver.get$length();
  },
  set$length: function(receiver, value) {
    return receiver.set$length(value);
  },
  remainder$1: function(receiver, a0) {
    return receiver.remainder$1(a0);
  },
  remove$1: function(receiver, a0) {
    return receiver.remove$1(a0);
  },
  removeAt$1: function(receiver, a0) {
    return receiver.removeAt$1(a0);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  round$0: function(receiver) {
    return receiver.round$0();
  },
  setRange$4: function(receiver, a0, a1, a2, a3) {
    return receiver.setRange$4(a0, a1, a2, a3);
  },
  split$1: function(receiver, a0) {
    return receiver.split$1(a0);
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  substring$2: function(receiver, a0, a1) {
    return receiver.substring$2(a0, a1);
  },
  toInt$0: function(receiver) {
    return receiver.toInt$0();
  },
  toList$0: function(receiver) {
    return receiver.toList$0();
  },
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  $index: function(receiver, a0) {
    return receiver.$index(a0);
  },
  $indexSet: function(receiver, a0, a1) {
    return receiver.$indexSet(a0, a1);
  },
  $xor: function(receiver, a0) {
    return receiver.$xor(a0);
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  $negate: function(receiver) {
    return receiver.$negate();
  },
  $or: function(receiver, a0) {
    return receiver.$or(a0);
  },
  $tdiv: function(receiver, a0) {
    return receiver.$tdiv(a0);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $eq: function(receiver, a) {
    return receiver == a;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    $.checkGrowable(receiver, "removeAt");
    return receiver.splice(index, 1)[0];
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.$$eq(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return;
      }
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  insertRange$3: function(receiver, start, $length, initialValue) {
    return $.listInsertRange(receiver, start, $length, initialValue);
  },
  setRange$4: function(receiver, start, $length, from, startFrom) {
    var t1;
    $.checkMutable(receiver, "set range");
    if ($.$$eq($length, 0) === true)
      return;
    $.checkNull(start);
    $.checkNull($length);
    $.checkNull(from);
    $.checkNull(startFrom);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof $length === "number" && Math.floor($length) === $length))
      throw $.$$throw($.ArgumentError$($length));
    if (!(typeof startFrom === "number" && Math.floor(startFrom) === startFrom))
      throw $.$$throw($.ArgumentError$(startFrom));
    if ($length < 0)
      throw $.$$throw($.ArgumentError$($length));
    if (start < 0)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + $length;
    if (t1 > receiver.length)
      throw $.$$throw($.RangeError$value(t1));
    $.Arrays_copy(from, startFrom, receiver, start, $length);
  },
  indexOf$2: function(receiver, element, start) {
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  toList$0: function(receiver) {
    return $.List_List$from(receiver);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNumber = {"": "Object;",
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver) === true)
      throw $.$$throw($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver) === true)
      throw $.$$throw($.UnsupportedError$("Infinity"));
    truncated = this.truncate$0(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  round$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return (receiver >> other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $xor: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $isJSNumber: true,
  $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSInt = {"": "JSNumber;",
  get$isEven: function(receiver) {
    return (receiver & 1) === 0;
  },
  $is$int: true,
  $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSDouble = {"": "JSNumber;", $is$double: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSString = {"": "Object;",
  charCodeAt$1: function(receiver, index) {
    return this.codeUnitAt$1(receiver, index);
  },
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$JSNumber(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$$gt(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.ListQueue = {"": "Collection;_table>,_head,_tail,_modificationCount>",
  get$iterator: function() {
    return $._ListQueueIterator$(this);
  },
  forEach$1: function(action) {
    var modificationCount, i, i0, t1;
    modificationCount = this._modificationCount;
    i = this._head;
    if (i !== (i | 0))
      return this.forEach$1$bailout1(1, action, modificationCount, i);
    for (; !(i === this._tail); i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout1: function(state0, action, modificationCount, i) {
    var i0, t1;
    for (; !(i === this._tail); i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  get$isEmpty: function() {
    return this._head === this._tail;
  },
  get$length: function() {
    var t1, t3;
    t1 = this._tail;
    t3 = this._head;
    if (t1 !== (t1 | 0))
      return this.get$length$bailout1(1, t1);
    if (t3 !== (t3 | 0))
      return this.get$length$bailout1(2, t1, t3);
    return (t1 - t3 & this._table.length - 1) >>> 0;
  },
  get$length$bailout1: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._tail;
      case 1:
        state0 = 0;
        t3 = this._head;
      case 2:
        state0 = 0;
        return $.$$and($.$$sub(t1, t3), this._table.length - 1);
    }
  },
  toList$0: function() {
    var list = $.List_List(this.get$length());
    this._writeToList$1(list);
    return list;
  },
  add$1: function(element) {
    this._liblib4$_add$1(element);
  },
  remove$1: function(object) {
    var i, i0, t1;
    i = this._head;
    if (i !== (i | 0))
      return this.remove$1$bailout1(1, object, i);
    for (; !(i === this._tail); i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$$eq(t1[i], object) === true) {
        this._remove$1(i);
        return;
      }
    }
    t1 = this._modificationCount;
    if (typeof t1 !== "number")
      return this.remove$1$bailout1(2, 0, 0, t1);
    this._modificationCount = t1 + 1;
  },
  remove$1$bailout1: function(state0, object, i, t1) {
    switch (state0) {
      case 0:
        i = this._head;
      case 1:
        state0 = 0;
        for (; !(i === this._tail); i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
          t1 = this._table;
          if (i !== (i | 0))
            throw $.iae(i);
          if (i < 0 || i >= t1.length)
            throw $.ioore(i);
          if ($.$$eq(t1[i], object) === true) {
            this._remove$1(i);
            return;
          }
        }
        t1 = this._modificationCount;
      case 2:
        var i0;
        state0 = 0;
        this._modificationCount = $.$$add(t1, 1);
    }
  },
  toString$0: function() {
    return $.ToString_collectionToString(this);
  },
  addLast$1: function(element) {
    this._liblib4$_add$1(element);
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = $.$$add(this._modificationCount, 1);
    t1 = this._table;
    t2 = this._head;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function() {
    var t1, t2;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = $.$$add(this._modificationCount, 1);
    this._tail = $.$$and($.$$sub(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _checkModification$1: function(expectedModificationCount) {
    if ($.$$eq(expectedModificationCount, this._modificationCount) !== true)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _liblib4$_add$1: function(element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$$and(t2 + 1, this._table.length - 1);
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = $.$$add(this._modificationCount, 1);
  },
  _remove$1: function(offset) {
    var mask, t1, t2, i, t3, prevOffset, nextOffset;
    if (offset !== (offset | 0))
      return this._remove$1$bailout(1, offset);
    mask = this._table.length - 1;
    if ((offset - this._head & mask) >>> 0 < $.$$and($.$$sub(this._tail, offset), mask)) {
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._head, !(i === t3); i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t3 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = $.$$and($.$$sub(this._tail, 1), mask);
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, !(i === t3); i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t2)
          throw $.ioore(nextOffset);
        t3 = t1[nextOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      return offset;
    }
  },
  _remove$1$bailout: function(state0, offset) {
    var mask, t1, i, t2, prevOffset, t3, t4, t5, nextOffset;
    mask = this._table.length - 1;
    t1 = $.getInterceptor$JSNumber(offset);
    if ($.$$and(t1.$sub(offset, this._head), mask) < $.$$and($.$$sub(this._tail, offset), mask)) {
      for (i = offset; t2 = $.getInterceptor(i), t2.$eq(i, this._head) !== true; i = prevOffset) {
        prevOffset = $.$$and(t2.$sub(i, 1), mask);
        t3 = this._table;
        if (prevOffset !== (prevOffset | 0))
          throw $.iae(prevOffset);
        t4 = t3.length;
        if (prevOffset < 0 || prevOffset >= t4)
          throw $.ioore(prevOffset);
        t5 = t3[prevOffset];
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= t4)
          throw $.ioore(i);
        t3[i] = t5;
      }
      t2 = this._table;
      t3 = this._head;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2.length)
        throw $.ioore(t3);
      t2[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return $.$$and(t1.$add(offset, 1), mask);
    } else {
      this._tail = $.$$and($.$$sub(this._tail, 1), mask);
      for (i = offset; t1 = $.getInterceptor(i), t1.$eq(i, this._tail) !== true; i = nextOffset) {
        nextOffset = $.$$and(t1.$add(i, 1), mask);
        t2 = this._table;
        if (nextOffset !== (nextOffset | 0))
          throw $.iae(nextOffset);
        t3 = t2.length;
        if (nextOffset < 0 || nextOffset >= t3)
          throw $.ioore(nextOffset);
        t4 = t2[nextOffset];
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= t3)
          throw $.ioore(i);
        t2[i] = t4;
      }
      t1 = this._table;
      t2 = this._tail;
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t1[t2] = null;
      return offset;
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, t3, split;
    newTable = $.List_List$fixedLength(this._table.length * 2, null);
    t1 = this._table;
    t2 = t1.length;
    t3 = this._head;
    split = t2 - t3;
    $.CONSTANT1.setRange$4(newTable, 0, split, t1, t3);
    $.CONSTANT1.setRange$4(newTable, split, this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.CONSTANT6.$le(this._head, this._tail);
    t2 = this._head;
    if (t1) {
      $length = $.$$sub(this._tail, t2);
      $.CONSTANT1.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.CONSTANT1.setRange$4(target, 0, firstPartSize, t1, t2);
      $.CONSTANT1.setRange$4(target, firstPartSize, this._tail, this._table, 0);
      return $.$$add(this._tail, firstPartSize);
    }
  },
  ListQueue$1: function(initialCapacity) {
    if (initialCapacity == null || $.$$lt(initialCapacity, 8) === true)
      initialCapacity = 8;
    else if ($.ListQueue__isPowerOf2(initialCapacity) !== true)
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    this._table = $.List_List$fixedLength(initialCapacity, null);
  },
  $asCollection: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  }
};

$$._ListQueueIterator = {"": "Object;_queue,_end,_modificationCount>,_liblib4$_position,_liblib4$_current",
  get$current: function() {
    return this._liblib4$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3, t4;
    t1 = this._queue;
    t1._checkModification$1(this._modificationCount);
    if ($.$$eq(this._liblib4$_position, this._end) === true) {
      this._liblib4$_current = null;
      return false;
    }
    t2 = t1._table;
    t3 = this._liblib4$_position;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    this._liblib4$_current = t2[t3];
    t4 = this._liblib4$_position;
    if (t4 !== (t4 | 0))
      return this.moveNext$0$bailout(1, t4, t1);
    this._liblib4$_position = (t4 + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  moveNext$0$bailout: function(state0, t4, t1) {
    this._liblib4$_position = $.$$and($.$$add(t4, 1), t1._table.length - 1);
    return true;
  }
};

$$._DeadEntry = {"": "Object;"};

$$._NullKey = {"": "Object;",
  get$hashCode: function() {
    return $.CONSTANT5.get$hashCode(null);
  }
};

$$._HashTable = {"": "Object;_table>,_modificationCount>",
  _key$1: function(offset) {
    var t1, key;
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._key$1$bailout(1, offset, t1);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    key = t1[offset];
    if (!(key === $.CONSTANT4))
      return key;
    return;
  },
  _key$1$bailout: function(state0, offset, t1) {
    var key = $.$$index(t1, offset);
    if (!(key === $.CONSTANT4))
      return key;
    return;
  },
  _setKey$2: function(offset, key) {
    if (key == null)
      key = $.CONSTANT4;
    $.$$indexSet(this._table, offset, key);
  },
  get$_elementCount: function() {
    return $.$$sub(this._entryCount, this._deletedCount);
  },
  get$_entrySize: function() {
    return 1;
  },
  _checkModification$1: function(expectedModificationCount) {
    if (!(this._modificationCount === expectedModificationCount))
      throw $.$$throw($.ConcurrentModificationError$(this._container));
  },
  _recordModification$0: function() {
    this._modificationCount = this._modificationCount + 1 & 1073741823;
  },
  _createTable$1: function(capacity) {
    return $.List_List$fixedLength($.$$mul(capacity, this.get$_entrySize()), null);
  },
  _firstProbe$2: function(hashCode, capacity) {
    return $.$$and(hashCode, $.$$sub(capacity, 1));
  },
  _nextProbe$3: function(previousIndex, probeCount, capacity) {
    if (typeof capacity !== "number")
      return this._nextProbe$3$bailout(1, previousIndex, probeCount, capacity);
    return (previousIndex + probeCount & capacity - 1) >>> 0;
  },
  _nextProbe$3$bailout: function(state0, previousIndex, probeCount, capacity) {
    var t2 = $.$$sub(capacity, 1);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    return (previousIndex + probeCount & t2) >>> 0;
  },
  _isFree$1: function(marker) {
    return marker == null || marker === $.CONSTANT3;
  },
  _probeForAdd$2: function(hashCode, object) {
    var entrySize, index, firstTombstone, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = this._firstProbe$2(hashCode, this._capacity);
    for (firstTombstone = -1, probeCount = 0; true;) {
      if (typeof entrySize !== "number")
        throw $.iae(entrySize);
      offset = index * entrySize;
      entry = $.$$index(this._table, offset);
      if (entry === $.CONSTANT3) {
        if (firstTombstone < 0)
          firstTombstone = offset;
      } else if (entry == null) {
        if (firstTombstone < 0)
          return offset;
        return firstTombstone;
      } else if (($.CONSTANT4 === entry ? this._equals$2(null, object) : this._equals$2(entry, object)) === true)
        return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _probeForLookup$2: function(hashCode, object) {
    var entrySize, index, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = this._firstProbe$2(hashCode, this._capacity);
    for (probeCount = 0; true;) {
      if (typeof entrySize !== "number")
        throw $.iae(entrySize);
      offset = index * entrySize;
      entry = $.$$index(this._table, offset);
      if (entry == null)
        return -1;
      else if (!($.CONSTANT3 === entry))
        if (($.CONSTANT4 === entry ? this._equals$2(null, object) : this._equals$2(entry, object)) === true)
          return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _equals$2: function(element, other) {
    return $.$$eq(element, other);
  },
  _hashCodeOf$1: function(object) {
    return $.hashCode(object);
  },
  _checkCapacity$0: function() {
    var freeCount, t1;
    freeCount = $.$$sub(this._capacity, this._entryCount);
    t1 = $.getInterceptor$JSNumber(freeCount);
    if ($.$$lt(t1.$mul(freeCount, 4), this._capacity) === true || t1.$lt(freeCount, this._deletedCount) === true)
      this._grow$1($.$$sub(this._entryCount, this._deletedCount));
  },
  _grow$1: function(contentCount) {
    var capacity, minCapacity, oldTable;
    capacity = this._capacity;
    if (typeof capacity !== "number")
      return this._grow$1$bailout(1, contentCount, capacity);
    minCapacity = $.$$mul(contentCount, 2);
    if (typeof minCapacity !== "number")
      return this._grow$1$bailout(2, 0, capacity, minCapacity);
    for (; capacity < minCapacity;)
      capacity *= 2;
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._recordModification$0();
  },
  _grow$1$bailout: function(state0, contentCount, capacity, minCapacity) {
    switch (state0) {
      case 0:
        capacity = this._capacity;
      case 1:
        state0 = 0;
        minCapacity = $.$$mul(contentCount, 2);
      case 2:
        var t1, oldTable;
        state0 = 0;
        for (; t1 = $.getInterceptor$JSNumber(capacity), t1.$lt(capacity, minCapacity) === true;)
          capacity = t1.$mul(capacity, 2);
        oldTable = this._table;
        this._table = this._createTable$1(capacity);
        this._capacity = capacity;
        this._entryCount = 0;
        this._deletedCount = 0;
        this._addAllEntries$1(oldTable);
        this._recordModification$0();
    }
  },
  _addAllEntries$1: function(oldTable) {
    var i, t1, object;
    if (typeof oldTable !== "string" && (typeof oldTable !== "object" || oldTable === null || oldTable.constructor !== Array && !oldTable.$isJavaScriptIndexingBehavior()))
      return this._addAllEntries$1$bailout(1, oldTable);
    i = 0;
    while (t1 = oldTable.length, i < t1) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      object = oldTable[i];
      if (!this._isFree$1(object))
        this._copyEntry$3(oldTable, i, this._put$1(object));
      t1 = this.get$_entrySize();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      i += t1;
    }
  },
  _addAllEntries$1$bailout: function(state0, oldTable) {
    var t1, i, object, t2;
    t1 = $.getInterceptor$JSArrayJSString(oldTable);
    i = 0;
    while ($.CONSTANT6.$lt(i, t1.get$length(oldTable))) {
      object = t1.$index(oldTable, i);
      if (!this._isFree$1(object))
        this._copyEntry$3(oldTable, i, this._put$1(object));
      t2 = this.get$_entrySize();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      i += t2;
    }
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
  },
  _get$1: function(key) {
    return this._probeForLookup$2(this._hashCodeOf$1(key), key);
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2(this._hashCodeOf$1(key), key);
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._put$1$bailout(1, key, offset, t1);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry == null) {
      t1 = this._entryCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout(2, key, offset, t1);
      this._entryCount = t1 + 1;
    } else if (oldEntry === $.CONSTANT3) {
      t1 = this._deletedCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout(3, key, offset, t1);
      this._deletedCount = t1 - 1;
    } else
      return offset;
    this._setKey$2(offset, key);
    this._recordModification$0();
    return offset;
  },
  _put$1$bailout: function(state0, key, offset, t1) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2(this._hashCodeOf$1(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$$index(t1, offset);
      default:
        var oldEntry;
        if (state0 === 2 || state0 === 0 && oldEntry == null)
          switch (state0) {
            case 0:
              t1 = this._entryCount;
            case 2:
              state0 = 0;
              this._entryCount = $.$$add(t1, 1);
          }
        else
          switch (state0) {
            case 0:
            case 3:
              if (state0 === 3 || state0 === 0 && oldEntry === $.CONSTANT3)
                switch (state0) {
                  case 0:
                    t1 = this._deletedCount;
                  case 3:
                    state0 = 0;
                    this._deletedCount = $.$$sub(t1, 1);
                }
              else
                return offset;
          }
        this._setKey$2(offset, key);
        this._recordModification$0();
        return offset;
    }
  },
  _remove$1: function(key) {
    var offset = this._probeForLookup$2(this._hashCodeOf$1(key), key);
    if ($.$$ge(offset, 0) === true)
      this._deleteEntry$1(offset);
    return offset;
  },
  _deleteEntry$1: function(offset) {
    this._setKey$2(offset, $.CONSTANT3);
    this._deletedCount = $.$$add(this._deletedCount, 1);
    this._recordModification$0();
  },
  _HashTable$1: function(initialCapacity) {
    this._table = this._createTable$1(initialCapacity);
  }
};

$$._HashTableIterable = {"": "Iterable;",
  get$length: function() {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function() {
    var t1 = this._hashTable.get$_elementCount();
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout1(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout1: function(state0, t1) {
    return $.$$eq(t1, 0);
  },
  forEach$1: function(action) {
    var t1, entrySize, table, modificationCount, offset, t2, entry;
    t1 = this._hashTable;
    entrySize = t1.get$_entrySize();
    table = t1._table;
    if (typeof table !== "string" && (typeof table !== "object" || table === null || table.constructor !== Array && !table.$isJavaScriptIndexingBehavior()))
      return this.forEach$1$bailout1(1, action, entrySize, t1, table);
    modificationCount = t1._modificationCount;
    offset = 0;
    while (t2 = table.length, offset < t2) {
      if (offset !== (offset | 0))
        throw $.iae(offset);
      if (offset < 0 || offset >= t2)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
      if (typeof entrySize !== "number")
        throw $.iae(entrySize);
      offset += entrySize;
    }
  },
  forEach$1$bailout1: function(state0, action, entrySize, t1, table) {
    var modificationCount, t2, offset, entry;
    modificationCount = t1._modificationCount;
    t2 = $.getInterceptor$JSArrayJSString(table);
    offset = 0;
    while ($.CONSTANT6.$lt(offset, t2.get$length(table))) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
      if (typeof entrySize !== "number")
        throw $.iae(entrySize);
      offset += entrySize;
    }
  }
};

$$._HashTableIterator = {"": "Object;_modificationCount>",
  moveNext$0: function() {
    var t1, table, entrySize, t2, t3, t5, entry;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    table = t1.get$_table();
    if (typeof table !== "string" && (typeof table !== "object" || table === null || table.constructor !== Array && !table.$isJavaScriptIndexingBehavior()))
      return this.moveNext$0$bailout(1, t1, table);
    entrySize = t1.get$_entrySize();
    if (typeof entrySize !== "number")
      return this.moveNext$0$bailout(2, t1, table, entrySize);
    t2 = $.getInterceptor$JSArrayJSString(table);
    while (true) {
      t3 = this._offset;
      t5 = table.length;
      if (typeof t3 !== "number")
        return this.moveNext$0$bailout(3, t1, table, entrySize, t3, t2);
      if (!(t3 < t5))
        break;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t5)
        throw $.ioore(t3);
      entry = table[t3];
      this._offset = t3 + entrySize;
      if (!t1._isFree$1(entry)) {
        this._liblib4$_current = this._valueAt$2(t3, entry);
        return true;
      }
    }
    this._liblib4$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, table, entrySize, t3, t2, t5, currentOffset) {
    switch (state0) {
      case 0:
        t1 = this._hashTable;
        t1._checkModification$1(this._modificationCount);
        table = t1.get$_table();
      case 1:
        state0 = 0;
        entrySize = t1.get$_entrySize();
      case 2:
        state0 = 0;
        t2 = $.getInterceptor$JSArrayJSString(table);
      default:
        var entry;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = this._offset;
              case 3:
                state0 = 0;
                t5 = t2.get$length(table);
              case 4:
                state0 = 0;
                if (!($.$$lt(t3, t5) === true))
                  break L0;
                currentOffset = this._offset;
              case 5:
                state0 = 0;
                entry = t2.$index(table, currentOffset);
                this._offset = $.$$add(currentOffset, entrySize);
                if (!t1._isFree$1(entry)) {
                  this._liblib4$_current = this._valueAt$2(currentOffset, entry);
                  return true;
                }
            }
        this._liblib4$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib4$_current;
  }
};

$$._HashTableKeyIterable = {"": "_HashTableIterable;_hashTable",
  get$iterator: function() {
    return $._HashTableKeyIterator$(this._hashTable);
  },
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT4)
      return;
    return key;
  }
};

$$._HashTableKeyIterator = {"": "_HashTableIterator;_hashTable,_modificationCount,_offset,_liblib4$_current",
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT4)
      return;
    return key;
  }
};

$$._HashTableValueIterable = {"": "_HashTableIterable;_entryIndex,_hashTable",
  get$iterator: function() {
    return $._HashTableValueIterator$(this._hashTable, this._entryIndex);
  },
  _valueAt$2: function(offset, key) {
    var t1, t3;
    t1 = this._hashTable._table;
    t3 = this._entryIndex;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._valueAt$2$bailout1(1, offset, t1);
    t3 = offset + t3;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _valueAt$2$bailout1: function(state0, offset, t1) {
    return $.$$index(t1, offset + this._entryIndex);
  }
};

$$._HashTableValueIterator = {"": "_HashTableIterator;_entryIndex,_hashTable,_modificationCount,_offset,_liblib4$_current",
  _valueAt$2: function(offset, key) {
    var t2, t4;
    t2 = this._hashTable.get$_table();
    t4 = this._entryIndex;
    if (typeof offset !== "number")
      return this._valueAt$2$bailout1(1, offset);
    if (typeof t4 !== "number")
      return this._valueAt$2$bailout1(3, offset, t2, t4);
    t4 = offset + t4;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this._valueAt$2$bailout1(2, offset, t2);
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= t2.length)
      throw $.ioore(t4);
    return t2[t4];
  },
  _valueAt$2$bailout1: function(state0, offset, t2, t4) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t2 = this._hashTable.get$_table();
      case 2:
        state0 = 0;
        t4 = this._entryIndex;
      case 3:
        state0 = 0;
        return $.$$index(t2, $.$$add(offset, t4));
    }
  }
};

$$._HashMapTable = {"": "_HashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 2;
  },
  _value$1: function(offset) {
    var t2, t4;
    t2 = this._table;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t4 = offset + 1;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this._value$1$bailout(2, offset, t2);
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= t2.length)
      throw $.ioore(t4);
    return t2[t4];
  },
  _value$1$bailout: function(state0, offset, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t2 = this._table;
      case 2:
        state0 = 0;
        return $.$$index(t2, $.$$add(offset, 1));
    }
  },
  _setValue$2: function(offset, value) {
    $.$$indexSet(this._table, $.$$add(offset, 1), value);
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
    var t2, t4, t5;
    t2 = this._table;
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    t4 = toOffset + 1;
    if (typeof fromTable !== "string" && (typeof fromTable !== "object" || fromTable === null || fromTable.constructor !== Array && !fromTable.$isJavaScriptIndexingBehavior()))
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    t5 = fromOffset + 1;
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= fromTable.length)
      throw $.ioore(t5);
    t5 = fromTable[t5];
    if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !t2.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, fromTable, fromOffset, toOffset, t2);
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= t2.length)
      throw $.ioore(t4);
    t2[t4] = t5;
  },
  _copyEntry$3$bailout1: function(state0, fromTable, fromOffset, toOffset, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t2 = this._table;
      case 2:
        state0 = 0;
        $.$$indexSet(t2, $.$$add(toOffset, 1), $.$$index(fromTable, fromOffset + 1));
    }
  }
};

$$.HashMap = {"": "Object;_hashTable",
  containsKey$1: function(key) {
    return $.$$ge(this._hashTable._get$1(key), 0);
  },
  $index: function(key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if (typeof offset !== "number")
      return this.$$index$bailout(1, t1, offset);
    if (offset >= 0)
      return t1._value$1(offset);
    return;
  },
  $$index$bailout: function(state0, t1, offset) {
    if ($.$$ge(offset, 0) === true)
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  remove$1: function(key) {
    var t1, offset, oldValue;
    t1 = this._hashTable;
    offset = t1._remove$1(key);
    if (typeof offset !== "number")
      return this.remove$1$bailout(1, offset, t1);
    if (offset < 0)
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  remove$1$bailout: function(state0, offset, t1) {
    var oldValue;
    if ($.$$lt(offset, 0) === true)
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  forEach$1: function(action) {
    var t1, modificationCount, table, entrySize, offset, t2, entry;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    table = t1._table;
    if (typeof table !== "string" && (typeof table !== "object" || table === null || table.constructor !== Array && !table.$isJavaScriptIndexingBehavior()))
      return this.forEach$1$bailout(1, action, table, t1, modificationCount);
    entrySize = t1.get$_entrySize();
    offset = 0;
    while (t2 = table.length, offset < t2) {
      if (offset !== (offset | 0))
        throw $.iae(offset);
      if (offset < 0 || offset >= t2)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
      if (typeof entrySize !== "number")
        throw $.iae(entrySize);
      offset += entrySize;
    }
  },
  forEach$1$bailout: function(state0, action, table, t1, modificationCount) {
    var entrySize, t2, offset, entry;
    entrySize = t1.get$_entrySize();
    t2 = $.getInterceptor$JSArrayJSString(table);
    offset = 0;
    while ($.CONSTANT6.$lt(offset, t2.get$length(table))) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
      if (typeof entrySize !== "number")
        throw $.iae(entrySize);
      offset += entrySize;
    }
  },
  get$keys: function() {
    return $._HashTableKeyIterable$(this._hashTable);
  },
  get$values: function() {
    return $._HashTableValueIterable$(this._hashTable, 1);
  },
  get$length: function() {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function() {
    return $.$$eq(this._hashTable.get$_elementCount(), 0);
  },
  toString$0: function() {
    return $.ToString_mapToString(this);
  },
  HashMap$0: function() {
    this._hashTable._container = this;
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return null;
  }
};

$$._LinkedHashTableHeadMarker = {"": "Object;"};

$$._LinkedHashTable = {"": "_HashTable;",
  get$_entrySize: function() {
    return 3;
  },
  _createTable$1: function(capacity) {
    var result, t1;
    result = $.List_List$fixedLength($.$$mul(capacity, this.get$_entrySize()), null);
    t1 = result.length;
    if (0 >= t1)
      throw $.ioore(0);
    result[0] = $.CONSTANT7;
    if (1 >= t1)
      throw $.ioore(1);
    result[1] = 0;
    if (2 >= t1)
      throw $.ioore(2);
    result[2] = 0;
    return result;
  },
  _next$1: function(offset) {
    var t2, t4;
    t2 = this._table;
    if (typeof offset !== "number")
      return this._next$1$bailout(1, offset);
    t4 = offset + 1;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this._next$1$bailout(2, offset, t2);
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= t2.length)
      throw $.ioore(t4);
    return t2[t4];
  },
  _next$1$bailout: function(state0, offset, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t2 = this._table;
      case 2:
        state0 = 0;
        return $.$$index(t2, $.$$add(offset, 1));
    }
  },
  _setNext$2: function(offset, to) {
    $.$$indexSet(this._table, $.$$add(offset, 1), to);
  },
  _prev$1: function(offset) {
    return $.$$index(this._table, $.$$add(offset, 2));
  },
  _setPrev$2: function(offset, to) {
    $.$$indexSet(this._table, $.$$add(offset, 2), to);
  },
  _linkLast$1: function(offset) {
    var last = this._prev$1(0);
    this._setNext$2(offset, 0);
    this._setPrev$2(offset, last);
    this._setNext$2(last, offset);
    this._setPrev$2(0, offset);
  },
  _unlink$1: function(offset) {
    var next, prev;
    next = this._next$1(offset);
    prev = this._prev$1(offset);
    this._setNext$2(offset, null);
    this._setPrev$2(offset, null);
    this._setNext$2(prev, next);
    this._setPrev$2(next, prev);
  },
  _addAllEntries$1: function(oldTable) {
    var t1, offset, object, t2, nextOffset;
    if (typeof oldTable !== "string" && (typeof oldTable !== "object" || oldTable === null || oldTable.constructor !== Array && !oldTable.$isJavaScriptIndexingBehavior()))
      return this._addAllEntries$1$bailout1(1, oldTable);
    t1 = $.getInterceptor$JSArrayJSString(oldTable);
    if (1 >= oldTable.length)
      throw $.ioore(1);
    offset = oldTable[1];
    if (typeof offset !== "number")
      return this._addAllEntries$1$bailout1(2, oldTable, offset, t1);
    for (; $.$$eq(offset, 0) !== true; offset = nextOffset) {
      if (offset !== (offset | 0))
        throw $.iae(offset);
      t1 = oldTable.length;
      if (offset < 0 || offset >= t1)
        throw $.ioore(offset);
      object = oldTable[offset];
      t2 = offset + 1;
      if (t2 >= t1)
        throw $.ioore(t2);
      nextOffset = oldTable[t2];
      this._copyEntry$3(oldTable, offset, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout1: function(state0, oldTable, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSArrayJSString(oldTable);
        offset = t1.$index(oldTable, 1);
      case 2:
        var t2, object, nextOffset;
        state0 = 0;
        for (; t2 = $.getInterceptor(offset), t2.$eq(offset, 0) !== true; offset = nextOffset) {
          object = t1.$index(oldTable, offset);
          nextOffset = t1.$index(oldTable, t2.$add(offset, 1));
          this._copyEntry$3(oldTable, offset, this._put$1(object));
        }
    }
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2(this._hashCodeOf$1(key), key);
    t1 = this._table;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this._put$1$bailout1(1, key, offset, t1);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry === $.CONSTANT3) {
      t1 = this._deletedCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout1(2, key, offset, t1);
      this._deletedCount = t1 - 1;
    } else if (oldEntry == null) {
      t1 = this._entryCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout1(3, key, offset, t1);
      this._entryCount = t1 + 1;
    } else
      return offset;
    this._recordModification$0();
    this._setKey$2(offset, key);
    this._linkLast$1(offset);
    return offset;
  },
  _put$1$bailout1: function(state0, key, offset, t1) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2(this._hashCodeOf$1(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$$index(t1, offset);
      default:
        var oldEntry;
        if (state0 === 2 || state0 === 0 && oldEntry === $.CONSTANT3)
          switch (state0) {
            case 0:
              t1 = this._deletedCount;
            case 2:
              state0 = 0;
              this._deletedCount = $.$$sub(t1, 1);
          }
        else
          switch (state0) {
            case 0:
            case 3:
              if (state0 === 3 || state0 === 0 && oldEntry == null)
                switch (state0) {
                  case 0:
                    t1 = this._entryCount;
                  case 3:
                    state0 = 0;
                    this._entryCount = $.$$add(t1, 1);
                }
              else
                return offset;
          }
        this._recordModification$0();
        this._setKey$2(offset, key);
        this._linkLast$1(offset);
        return offset;
    }
  },
  _deleteEntry$1: function(offset) {
    this._unlink$1(offset);
    this._setKey$2(offset, $.CONSTANT3);
    this._deletedCount = $.$$add(this._deletedCount, 1);
    this._recordModification$0();
  }
};

$$._LinkedHashTableKeyIterable = {"": "Iterable;_table>",
  get$iterator: function() {
    return $._LinkedHashTableKeyIterator$(this._table);
  },
  get$length: function() {
    return this._table.get$_elementCount();
  }
};

$$._LinkedHashTableKeyIterator = {"": "_LinkedHashTableIterator;_hashTable,_modificationCount,_offset,_liblib4$_current",
  _getCurrent$1: function(offset) {
    return this._hashTable._key$1(offset);
  }
};

$$._LinkedHashTableValueIterable = {"": "Iterable;_hashTable,_valueIndex",
  get$iterator: function() {
    return $._LinkedHashTableValueIterator$(this._hashTable, this._valueIndex);
  },
  get$length: function() {
    return this._hashTable.get$_elementCount();
  }
};

$$._LinkedHashTableValueIterator = {"": "_LinkedHashTableIterator;_valueIndex,_hashTable,_modificationCount,_offset,_liblib4$_current",
  _getCurrent$1: function(offset) {
    return $.$$index(this._hashTable.get$_table(), $.$$add(offset, this._valueIndex));
  }
};

$$._LinkedHashTableIterator = {"": "Object;_modificationCount>",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    t2 = this._offset;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(1, t1, t2);
    if (t2 === 0) {
      this._liblib4$_current = null;
      return false;
    }
    this._liblib4$_current = this._getCurrent$1(t2);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  moveNext$0$bailout: function(state0, t1, t2) {
    if ($.$$eq(t2, 0) === true) {
      this._liblib4$_current = null;
      return false;
    }
    this._liblib4$_current = this._getCurrent$1(this._offset);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  get$current: function() {
    return this._liblib4$_current;
  }
};

$$._LinkedHashMapTable = {"": "_LinkedHashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 4;
  },
  _value$1: function(offset) {
    var t2, t4;
    t2 = this._table;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t4 = offset + 3;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this._value$1$bailout(2, offset, t2);
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= t2.length)
      throw $.ioore(t4);
    return t2[t4];
  },
  _value$1$bailout: function(state0, offset, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t2 = this._table;
      case 2:
        state0 = 0;
        return $.$$index(t2, $.$$add(offset, 3));
    }
  },
  _setValue$2: function(offset, value) {
    $.$$indexSet(this._table, $.$$add(offset, 3), value);
  },
  _copyEntry$3: function(oldTable, fromOffset, toOffset) {
    var t2, t4, t5;
    t2 = this._table;
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    t4 = toOffset + 3;
    if (typeof fromOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    t5 = fromOffset + 3;
    if (typeof oldTable !== "string" && (typeof oldTable !== "object" || oldTable === null || oldTable.constructor !== Array && !oldTable.$isJavaScriptIndexingBehavior()))
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= oldTable.length)
      throw $.ioore(t5);
    t5 = oldTable[t5];
    if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !t2.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, oldTable, fromOffset, toOffset, t2);
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= t2.length)
      throw $.ioore(t4);
    t2[t4] = t5;
  },
  _copyEntry$3$bailout1: function(state0, oldTable, fromOffset, toOffset, t2) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t2 = this._table;
      case 2:
        state0 = 0;
        $.$$indexSet(t2, $.$$add(toOffset, 3), $.$$index(oldTable, $.$$add(fromOffset, 3)));
    }
  }
};

$$.LinkedHashMap = {"": "Object;_hashTable",
  containsKey$1: function(key) {
    return $.$$ge(this._hashTable._get$1(key), 0);
  },
  $index: function(key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if (typeof offset !== "number")
      return this.$$index$bailout(1, t1, offset);
    if (offset >= 0)
      return t1._value$1(offset);
    return;
  },
  $$index$bailout: function(state0, t1, offset) {
    if ($.$$ge(offset, 0) === true)
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  remove$1: function(key) {
    var t1, offset, oldValue;
    t1 = this._hashTable;
    offset = t1._remove$1(key);
    if (typeof offset !== "number")
      return this.remove$1$bailout(1, offset, t1);
    if (offset < 0)
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  remove$1$bailout: function(state0, offset, t1) {
    var oldValue;
    if ($.$$lt(offset, 0) === true)
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  forEach$1: function(action) {
    var t1, modificationCount, offset;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    offset = t1._next$1(0);
    if (typeof offset !== "number")
      return this.forEach$1$bailout(1, t1, modificationCount, action, offset);
    for (; $.$$eq(offset, 0) !== true; offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout: function(state0, t1, modificationCount, action, offset) {
    for (; $.$$eq(offset, 0) !== true; offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  get$keys: function() {
    return $._LinkedHashTableKeyIterable$(this._hashTable);
  },
  get$values: function() {
    return $._LinkedHashTableValueIterable$(this._hashTable, 3);
  },
  get$length: function() {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function() {
    return $.$$eq(this._hashTable.get$_elementCount(), 0);
  },
  toString$0: function() {
    return $.ToString_mapToString(this);
  },
  LinkedHashMap$0: function() {
    this._hashTable._container = this;
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return null;
  }
};

$$.ListIterator = {"": "Object;_list,_liblib$_length,_liblib$_position,_liblib$_current",
  moveNext$0: function() {
    var t1, t2, t3, nextPosition;
    t1 = this._list;
    t2 = t1.length;
    t3 = this._liblib$_length;
    if (t2 !== t3)
      throw $.$$throw($.ConcurrentModificationError$(t1));
    t2 = this._liblib$_position;
    if (t2 !== (t2 | 0))
      return this.moveNext$0$bailout(1, t2, t1, t3);
    nextPosition = t2 + 1;
    if (nextPosition < t3) {
      this._liblib$_position = nextPosition;
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t2, t1, t3) {
    var nextPosition = $.$$add(t2, 1);
    if ($.$$lt(nextPosition, t3) === true) {
      this._liblib$_position = nextPosition;
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$._Manager = {"": "Object;nextIsolateId=,currentManagerId,nextManagerId,currentContext>,rootContext,topEventLoop>,fromCommandLine,isWorker>,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = !($.get$globalWorker() == null) && !($.get$IsolateNatives_thisScript() == null);
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true && $.isEmpty(this.isolates) === true && $.$$eq(this.topEventLoop.get$activeTimerCount(), 0) === true)
      this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map();
    this.managers = $.Map_Map();
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports>,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    this._setGlobals$0();
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (!(old == null))
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    return $.$$index(this.ports, portId);
  },
  register$2: function(portId, port) {
    if (this.ports.containsKey$1(portId) === true)
      throw $.$$throw($._ExceptionImplementation$("Registry: ports must be registered only once."));
    $.$$indexSet(this.ports, portId, port);
    $.$$indexSet($globalState.isolates, this.id, this);
  },
  unregister$1: function(portId) {
    $.remove(this.ports, portId);
    if ($.isEmpty(this.ports) === true)
      $.remove($globalState.isolates, this.id);
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.$$add(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map();
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount=",
  enqueue$3: function(isolate, fn, msg) {
    $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if ($.isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if (!($globalState.rootContext == null) && $globalState.isolates.containsKey$1($globalState.rootContext.get$id()) === true && $globalState.fromCommandLine === true && $.isEmpty($globalState.rootContext.get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if (!($.get$globalWindow() == null))
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function() {
    return 0;
  },
  postMessage$1: function(msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function() {
  }
};

$$._BaseSendPort = {"": "Object;_isolateId>",
  _checkReplyTo$1: function(replyTo) {
    if (!(replyTo == null) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_BufferingSendPort))
      throw $.$$throw($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$();
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isSendPort: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort>,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_NativeJsSendPort && $.$$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function() {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId>,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_WorkerSendPort)
      t1 = $.$$eq(this._workerId, other._workerId) === true && $.$$eq(this._isolateId, other._isolateId) === true && $.$$eq(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function() {
    var t1, t2;
    t1 = $.$$xor($.$$shl(this._workerId, 16), $.$$shl(this._isolateId, 8));
    t2 = this._receivePortId;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    return (t1 ^ t2) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$.ReceivePortImpl = {"": "Object;_id>,_callback>",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function() {
    this._callback = null;
    $globalState.currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $globalState.currentContext.get$id());
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports>,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    if (!($.$$index(this._visited, list) == null))
      return;
    $.$$indexSet(this._visited, list, true);
    $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    if (!($.$$index(this._visited, map) == null))
      return;
    $.$$indexSet(this._visited, map, true);
    $.forEach(map.get$values(), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (!!port.$is_BufferingSendPort && port._port == null)
      this.ports.push(port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.currentManagerId, port._isolateId, port._receivePort.get$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$JSArrayJSString(x);
    managerId = t1.$index(x, 1);
    isolateId = t1.$index(x, 2);
    receivePortId = t1.$index(x, 3);
    if ($.$$eq(managerId, $globalState.currentManagerId) === true) {
      isolate = $.$$index($globalState.isolates, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(object, info) {
    $.add(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function() {
    this.tagged = $.List_List(0);
  },
  cleanup$0: function() {
    var $length, i;
    $length = $.length(this.tagged);
    if (typeof $length !== "number")
      return this.cleanup$0$bailout(1, $length);
    i = 0;
    for (; i < $length; ++i)
      $.$$index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  },
  cleanup$0$bailout: function(state0, $length) {
    var i = 0;
    for (; $.CONSTANT.$lt(i, $length); ++i)
      $.$$index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(object) {
    return;
  },
  $indexSet: function(object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    this._visited.reset$0();
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.$isMap())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copy, len, i, t1;
    if (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior())
      return this.visitList$1$bailout1(1, list);
    copy = $.$$index(this._visited, list);
    if (!(copy == null))
      return copy;
    len = list.length;
    copy = $.List_List(len);
    $.$$indexSet(this._visited, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        copy = $.$$index(this._visited, list);
        if (!(copy == null))
          return copy;
        t1 = $.getInterceptor$JSArrayJSString(list);
        len = t1.get$length(list);
      case 2:
        var copy, i, t2;
        state0 = 0;
        copy = $.List_List(len);
        $.$$indexSet(this._visited, list, copy);
        for (i = 0; $.CONSTANT.$lt(i, len); ++i) {
          t2 = this._dispatch$1(t1.$index(list, i));
          if (i >= copy.length)
            throw $.ioore(i);
          copy[i] = t2;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t1.copy_0 = $.$$index(this._visited, map);
    t2 = t1.copy_0;
    if (!(t2 == null))
      return t2;
    t1.copy_0 = $.HashMap$();
    $.$$indexSet(this._visited, map, t1.copy_0);
    map.forEach$1(new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copyId, id;
    copyId = $.$$index(this._visited, list);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    $.$$indexSet(this._visited, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var copyId, id;
    copyId = $.$$index(this._visited, map);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    $.$$indexSet(this._visited, map, id);
    return ["map", id, this._serializeList$1($.toList(map.get$keys())), this._serializeList$1($.toList(map.get$values()))];
  },
  _serializeList$1: function(list) {
    var len, result, i, t1;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSArrayJSString(list);
        len = t1.get$length(list);
      case 2:
        var result, i, t2;
        state0 = 0;
        result = $.List_List(len);
        for (i = 0; $.CONSTANT.$lt(i, len); ++i) {
          t2 = this._dispatch$1(t1.$index(list, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.$$index(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id = $.$$index(x, 1);
    return $.$$index(this._deserialized, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$JSArrayJSString(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.$isJavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    $.$$indexSet(this._deserialized, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id, t2, len) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSArrayJSString(x);
        id = t1.$index(x, 1);
        dartList = t1.$index(x, 2);
      case 1:
        state0 = 0;
        $.$$indexSet(this._deserialized, id, dartList);
        t2 = $.getInterceptor$JSArrayJSString(dartList);
        len = t2.get$length(dartList);
      case 2:
        var t1, i;
        state0 = 0;
        for (i = 0; $.CONSTANT.$lt(i, len); ++i)
          t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
        return dartList;
    }
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, keys, values, len, i, key;
    result = $.HashMap$();
    t1 = $.getInterceptor$JSArrayJSString(x);
    id = t1.$index(x, 1);
    $.$$indexSet(this._deserialized, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values, t3, len) {
    switch (state0) {
      case 0:
        result = $.HashMap$();
        t1 = $.getInterceptor$JSArrayJSString(x);
        id = t1.$index(x, 1);
        $.$$indexSet(this._deserialized, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSArrayJSString(keys);
        len = t3.get$length(keys);
      case 3:
        var id, i;
        state0 = 0;
        for (t1 = $.getInterceptor$JSArrayJSString(values), i = 0; $.CONSTANT.$lt(i, len); ++i)
          result.$indexSet(this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle<",
  cancel$0: function() {
    if (!($.get$globalThis().setTimeout == null)) {
      if (this._inEventLoop === true)
        throw $.$$throw($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.set$activeTimerCount($.$$sub(t1.get$activeTimerCount(), 1));
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.$$throw($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if ($.$$eq(milliseconds, 0) === true)
      t1 = $.hasTimer() !== true || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer() === true) {
      t1 = $._globalState().get$topEventLoop();
      t1.set$activeTimerCount($.$$add(t1.get$activeTimerCount(), 1));
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace>,cause>",
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.add$1("'");
    message = null;
    try {
      message = $.toString(this.error);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.add$1(message);
    buffer.add$1("'\n");
    t1 = this.stackTrace;
    if (!(t1 == null)) {
      buffer.add$1("Stack trace:\n");
      buffer.add$1($.toString(t1));
      buffer.add$1("\n");
    }
  },
  toString$0: function() {
    var buffer, cause;
    buffer = $.JsStringBuffer$("");
    buffer.add$1("AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; !(cause == null);) {
      buffer.add$1("Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return buffer.toString$0();
  },
  throwDelayed$0: function() {
    var reportError, exception;
    reportError = new $.AsyncError_throwDelayed_reportError(this);
    try {
      $.Timer_Timer($.CONSTANT10, new $.AsyncError_throwDelayed_anon(this, reportError));
    } catch (exception) {
      $.unwrapException(exception);
      reportError.call$0();
    }

  },
  $isAsyncError: true
};

$$._CompleterImpl = {"": "Object;future,_isComplete",
  complete$1: function(value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._liblib0$_setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener=",
  _sendValue$1: function(value) {
    this.future._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state,_resultOrListeners>",
  get$_isComplete: function() {
    return $.$$eq(this._state, 0) !== true;
  },
  get$_hasValue: function() {
    return $.$$eq(this._state, 1);
  },
  get$_hasError: function() {
    return !($.$$and(this._state, 2) === 0);
  },
  get$_hasUnhandledError: function() {
    return !($.$$and(this._state, 4) === 0);
  },
  _clearUnhandledError$0: function() {
    this._state = $.$$and(this._state, 4294967291);
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (this.get$_isComplete() !== true) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError() === true) {
      if (!(onError == null))
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue() === true)
      return $._FutureWrapper$(this);
    if (this.get$_isComplete() !== true) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  whenComplete$1: function(action) {
    var whenFuture = $._WhenFuture$(action);
    if (this.get$_isComplete() !== true)
      this._addListener$1(whenFuture);
    else if (this.get$_hasValue() === true)
      $.Timer_Timer($.CONSTANT10, new $._FutureImpl_whenComplete_anon(whenFuture, this._resultOrListeners));
    else {
      this._clearUnhandledError$0();
      $.Timer_Timer($.CONSTANT10, new $._FutureImpl_whenComplete_anon0(whenFuture, this._resultOrListeners));
    }
    return whenFuture;
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.Timer_Timer($.CONSTANT10, new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._clearUnhandledError$0();
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.Timer_Timer($.CONSTANT10, new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _liblib0$_setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; !(listeners == null); listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_liblib0$_setValue: function() {
    return new $.BoundClosure$1(this, "_liblib0$_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (!(listeners0 == null)) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = $.$$or(this._state, 4);
    $.Timer_Timer($.CONSTANT10, new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; !(current == null); prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (this.get$_isComplete() !== true)
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue() === true)
      future._liblib0$_setValue$1(this._resultOrListeners);
    else {
      this._clearUnhandledError$0();
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.$isFuture)
      if (!!result.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_liblib0$_setValue(), this.get$_setError());
        return;
      }
    else
      this._liblib0$_setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener=",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (!(this._test == null)) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error.get$error());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._WhenFuture = {"": "_TransformFuture;_action,_nextListener,_state,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _sendValue$1: function(value) {
    var result, resultFuture, e, e0, s, t1, exception;
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!t1.$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendValue_anon(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var t1, result, resultFuture, e, e0, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!t2.$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendError_anon(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      if (typeof t2 === "object" && t2 !== null && !!t2.$isAsyncError) {
        e = t2;
        t1.error_0 = e;
      } else {
        e0 = t2;
        s = $.getTraceFromException(exception);
        t1.error_0 = $.AsyncError$withCause(e0, s, t1.error_0);
      }
    }

    this._setError$1(t1.error_0);
  },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  whenComplete$1: function(action) {
    return this._future.whenComplete$1(action);
  },
  $isFuture: true
};

$$.Stream = {"": "Object;",
  get$isBroadcast: function() {
    return false;
  },
  asBroadcastStream$0: function() {
    if (this.get$isBroadcast() === true)
      return this;
    return $._SingleStreamMultiplexer$(this);
  },
  get$length: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_length_anon0(t1, future), t3, true);
    return future;
  },
  get$isEmpty: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_isEmpty_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_isEmpty_anon0(future), t3, true);
    return future;
  },
  toList$0: function() {
    var result, future, t1, t2;
    result = [];
    future = $._FutureImpl$();
    t1 = new $.Stream_toList_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toList_anon0(result, future), t2, true);
    return future;
  }
};

$$.StreamSubscription = {"": "Object;"};

$$.StreamController = {"": "Object;stream>",
  get$isPaused: function() {
    return this.stream.get$_isPaused();
  },
  add$1: function(value) {
    return this.stream._add$1(value);
  },
  close$0: function() {
    this.stream._close$0();
  }
};

$$._SingleControllerStream = {"": "_SingleStreamImpl;_subscriptionHandler,_pauseHandler,_subscriber,_state,_pendingEvents",
  _subscriptionHandler$0: function() {
    return this._subscriptionHandler.call$0();
  },
  _pauseHandler$0: function() {
    return this._pauseHandler.call$0();
  },
  _onSubscriptionStateChange$0: function() {
    if (!(this._subscriptionHandler == null))
      this._subscriptionHandler$0();
  },
  _onPauseStateChange$0: function() {
    if (!(this._pauseHandler == null))
      this._pauseHandler$0();
  }
};

$$._StreamImpl = {"": "Stream;",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    var subscription;
    if (this.get$_isComplete() === true)
      return $._DoneSubscription$(onDone);
    if (onData == null)
      onData = $._nullDataHandler;
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    subscription = this._createSubscription$4(onData, onError, onDone, true === unsubscribeOnError);
    this._addListener$1(subscription);
    return subscription;
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  _add$1: function(value) {
    if (this.get$_isClosed() === true)
      throw $.$$throw($.StateError$("Sending on closed stream"));
    if (this.get$_canFireEvent() !== true) {
      this._addPendingEvent$1($._DelayedData$(value));
      return;
    }
    this._sendData$1(value);
    this._handlePendingEvents$0();
  },
  get$_add: function() {
    return new $.BoundClosure$1(this, "_add$1");
  },
  _signalError$1: function(error) {
    if (this.get$_isClosed() === true)
      throw $.$$throw($.StateError$("Sending on closed stream"));
    if (this.get$_canFireEvent() !== true) {
      this._addPendingEvent$1($._DelayedError$(error));
      return;
    }
    this._sendError$1(error);
    this._handlePendingEvents$0();
  },
  get$_signalError: function() {
    return new $.BoundClosure$1(this, "_signalError$1");
  },
  _close$0: function() {
    if (this.get$_isClosed() === true)
      throw $.$$throw($.StateError$("Sending on closed stream"));
    this._state = $.$$or(this._state, 1);
    if (this.get$_canFireEvent() !== true) {
      this._addPendingEvent$1($.CONSTANT26);
      return;
    }
    this._sendDone$0();
  },
  get$_close: function() {
    return new $.Bound__close__StreamImpl(this, "_close$0");
  },
  get$_isClosed: function() {
    return !($.$$and(this._state, 1) === 0);
  },
  get$_isComplete: function() {
    return !($.$$and(this._state, 2) === 0);
  },
  get$_isPaused: function() {
    var t1 = this._state;
    if (typeof t1 !== "number")
      return this.get$_isPaused$bailout(1, t1);
    return t1 >= 16;
  },
  get$_isPaused$bailout: function(state0, t1) {
    return $.$$ge(t1, 16);
  },
  get$_hasPendingEvent: function() {
    var t1 = this._pendingEvents;
    return !(t1 == null) && $.isEmpty(t1) !== true;
  },
  get$_isFiring: function() {
    return !($.$$and(this._state, 8) === 0);
  },
  get$_currentEventIdBit: function() {
    var t1 = this._state;
    if (t1 !== (t1 | 0))
      return this.get$_currentEventIdBit$bailout(1, t1);
    return $.CONSTANT6.$shr(t1 & 4, 2);
  },
  get$_currentEventIdBit$bailout: function(state0, t1) {
    return $.CONSTANT6.$shr($.$$and(t1, 4), 2);
  },
  get$_canFireEvent: function() {
    return this.get$_isFiring() !== true && this.get$_isPaused() !== true && this.get$_hasPendingEvent() !== true;
  },
  _incrementPauseCount$1: function(listener) {
    listener._incrementPauseCount$0();
    this._updatePauseCount$1(1);
  },
  _decrementPauseCount$1: function(listener) {
    listener._decrementPauseCount$0();
    this._updatePauseCount$1(-1);
  },
  _updatePauseCount$1: function(by) {
    var oldState, t1;
    oldState = this._state;
    t1 = $.getInterceptor$JSNumber(oldState);
    if (by >= 0)
      this._state = t1.$add(oldState, by << 4 >>> 0);
    else
      this._state = t1.$sub(oldState, -by << 4 >>> 0);
  },
  _setComplete$0: function() {
    this._state = $.$$or(this._state, 2);
  },
  _startFiring$0: function() {
    this._state = $.$$xor(this._state, 12);
  },
  _endFiring$0: function() {
    this._state = $.$$xor(this._state, 8);
    if (this.get$_isPaused() === true)
      this._onPauseStateChange$0();
    if (this.get$_hasSubscribers() !== true)
      this._onSubscriptionStateChange$0();
  },
  _pause$2: function(listener, resumeSignal) {
    var wasPaused;
    if (listener.get$_isSubscribed() !== true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    wasPaused = this.get$_isPaused();
    this._incrementPauseCount$1(listener);
    if (!(resumeSignal == null))
      resumeSignal.whenComplete$1(new $._StreamImpl__pause_anon(this, listener));
    if (wasPaused !== true && this.get$_isFiring() !== true)
      this._onPauseStateChange$0();
  },
  _resume$2: function(listener, fromEvent) {
    if (listener.get$isPaused() !== true)
      return;
    this._decrementPauseCount$1(listener);
    if (this.get$_isPaused() !== true) {
      if (this.get$_isFiring() !== true)
        this._onPauseStateChange$0();
      if (this.get$_hasPendingEvent() === true)
        if (fromEvent && this.get$_isFiring() !== true)
          this._handlePendingEvents$0();
        else
          this._schedulePendingEvents$0();
    }
  },
  _schedulePendingEvents$0: function() {
    this._pendingEvents.schedule$1(this);
  },
  _onPauseStateChange$0: function() {
  },
  _onSubscriptionStateChange$0: function() {
  },
  _addPendingEvent$1: function($event) {
    if (this._pendingEvents == null)
      this._pendingEvents = $._StreamImplEvents$();
    $.add(this._pendingEvents, $event);
  },
  _handlePendingEvents$0: function() {
    var events, t1;
    events = this._pendingEvents;
    t1 = $.getInterceptor(events);
    if (events == null)
      return;
    while (true) {
      if (!(t1.get$isEmpty(events) !== true && this.get$_isPaused() !== true))
        break;
      events.handleNext$1(this);
    }
  },
  _sendData$1: function(value) {
    this._forEachSubscriber$1(new $._StreamImpl__sendData_anon(value));
  },
  _sendError$1: function(error) {
    this._forEachSubscriber$1(new $._StreamImpl__sendError_anon(error));
  },
  _sendDone$0: function() {
    this._setComplete$0();
    if (this.get$_hasSubscribers() !== true)
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendDone_anon(this));
  }
};

$$._SingleStreamImpl = {"": "_StreamImpl;",
  get$_isPaused: function() {
    return this.get$_hasSubscribers() !== true && this.get$_isComplete() !== true || $._StreamImpl.prototype.get$_isPaused.call(this) === true;
  },
  get$_hasSubscribers: function() {
    return !(this._subscriber == null);
  },
  _createSubscription$4: function(onData, onError, onDone, unsubscribeOnError) {
    return $._StreamSubscriptionImpl$(this, onData, onError, onDone, unsubscribeOnError);
  },
  _addListener$1: function(subscription) {
    if (this.get$_hasSubscribers() === true)
      throw $.$$throw($.StateError$("Stream already has subscriber."));
    this._subscriber = subscription;
    subscription._setSubscribed$1(0);
    this._onSubscriptionStateChange$0();
    if (this.get$_hasPendingEvent() === true)
      this._schedulePendingEvents$0();
  },
  _cancel$1: function(subscriber) {
    var t1, subscriptionPauseCount;
    t1 = this._subscriber;
    if (!(t1 == null ? subscriber == null : t1 === subscriber))
      return;
    this._subscriber = null;
    subscriptionPauseCount = subscriber._setUnsubscribed$0();
    t1 = $.getInterceptor$JSNumber(subscriptionPauseCount);
    this._updatePauseCount$1(t1.$negate(subscriptionPauseCount));
    if (this.get$_isFiring() !== true) {
      if (t1.$gt(subscriptionPauseCount, 0) === true)
        this._onPauseStateChange$0();
      this._onSubscriptionStateChange$0();
    }
  },
  _forEachSubscriber$1: function(action) {
    var subscription = this._subscriber;
    this._startFiring$0();
    action.call$1(subscription);
    this._endFiring$0();
  }
};

$$._MultiStreamImpl = {"": "_StreamImpl;_nextLink=,_previousLink=",
  get$isBroadcast: function() {
    return true;
  },
  asBroadcastStream$0: function() {
    return this;
  },
  get$_hasSubscribers: function() {
    return !$._InternalLinkList_isEmpty(this);
  },
  _createSubscription$4: function(onData, onError, onDone, unsubscribeOnError) {
    return $._StreamSubscriptionImpl$(this, onData, onError, onDone, unsubscribeOnError);
  },
  _forEachSubscriber$1: function(action) {
    var cursor, cursor0;
    if (this.get$_hasSubscribers() !== true)
      return;
    this._startFiring$0();
    cursor = this._nextLink;
    for (; !(cursor === this); cursor = cursor0) {
      if (cursor._needsEvent$1(this.get$_currentEventIdBit()) === true) {
        action.call$1(cursor);
        cursor._toggleEventReceived$0();
      }
      cursor0 = cursor.get$_nextLink();
      if (cursor.get$_isPendingUnsubscribe() === true)
        this._removeListener$1(cursor);
    }
    this._endFiring$0();
  },
  _addListener$1: function(listener) {
    var t1;
    listener._setSubscribed$1(this.get$_currentEventIdBit());
    t1 = this.get$_hasSubscribers();
    $._InternalLinkList_add(this, listener);
    if (t1 !== true)
      this._onSubscriptionStateChange$0();
  },
  _cancel$1: function(listener) {
    var t1, wasPaused;
    t1 = listener.get$_nextLink();
    if (listener == null ? t1 == null : listener === t1)
      return;
    if (this.get$_isFiring() === true)
      if (listener._needsEvent$1(this.get$_currentEventIdBit()) === true)
        listener._setPendingUnsubscribe$0();
      else
        this._removeListener$1(listener);
    else {
      wasPaused = this.get$_isPaused();
      this._removeListener$1(listener);
      if ($.$$eq(wasPaused, this.get$_isPaused()) !== true)
        this._onPauseStateChange$0();
      if (this.get$_hasSubscribers() !== true)
        this._onSubscriptionStateChange$0();
    }
  },
  _removeListener$1: function(listener) {
    var pauseCount = listener._setUnsubscribed$0();
    if (typeof pauseCount !== "number")
      return this._removeListener$1$bailout(1, listener, pauseCount);
    this._updatePauseCount$1(-pauseCount);
    $._InternalLink_unlink(listener);
  },
  _removeListener$1$bailout: function(state0, listener, pauseCount) {
    this._updatePauseCount$1($.$$negate(pauseCount));
    $._InternalLink_unlink(listener);
  },
  _MultiStreamImpl$0: function() {
    this._previousLink = this;
    this._nextLink = this;
  }
};

$$._StreamSubscriptionImpl = {"": "_StreamListener;_unsubscribeOnError,_liblib0$_onData,_onError,_onDone,_source,_state,_nextLink,_previousLink",
  _liblib0$_onData$1: function(arg0) {
    return this._liblib0$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  onError$1: function(handleError) {
    this._onError = handleError == null ? $._nullErrorHandler : handleError;
  },
  get$onError: function() {
    return new $.BoundClosure$1(this, "onError$1");
  },
  _sendData$1: function(data) {
    this._liblib0$_onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._unsubscribeOnError)
      this._source._cancel$1(this);
  },
  _sendDone$0: function() {
    this._onDone$0();
  },
  cancel$0: function() {
    this._source._cancel$1(this);
  },
  pause$1: function(resumeSignal) {
    this._source._pause$2(this, resumeSignal);
  },
  pause$0: function() {
    return this.pause$1(null);
  },
  resume$0: function() {
    if (this.get$isPaused() !== true)
      throw $.$$throw($.StateError$("Resuming unpaused subscription"));
    this._source._resume$2(this, false);
  }
};

$$._DelayedEvent = {"": "Object;next="};

$$._DelayedData = {"": "_DelayedEvent;value,next",
  perform$1: function(stream) {
    stream._sendData$1(this.value);
  }
};

$$._DelayedError = {"": "_DelayedEvent;error>,next",
  perform$1: function(stream) {
    stream._sendError$1(this.error);
  }
};

$$._DelayedDone = {"": "Object;",
  perform$1: function(stream) {
    stream._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw $.$$throw($.StateError$("No events after a done."));
  }
};

$$._InternalLink = {"": "Object;_nextLink=,_previousLink=",
  _InternalLink$0: function() {
    this._nextLink = this;
    this._previousLink = this;
  }
};

$$._StreamListener = {"": "_InternalLink;",
  get$isPaused: function() {
    return $.$$ge(this._state, 8);
  },
  get$_isPendingUnsubscribe: function() {
    var t1 = this._state;
    if (t1 !== (t1 | 0))
      return this.get$_isPendingUnsubscribe$bailout(1, t1);
    return (t1 & 2) !== 0;
  },
  get$_isPendingUnsubscribe$bailout: function(state0, t1) {
    return !($.$$and(t1, 2) === 0);
  },
  get$_isSubscribed: function() {
    return !($.$$and(this._state, 1) === 0);
  },
  _needsEvent$1: function(currentEventIdBit) {
    var t1 = this._state;
    if (t1 !== (t1 | 0))
      return this._needsEvent$1$bailout(1, currentEventIdBit, t1);
    return !($.CONSTANT6.$shr(t1 & 4, 2) === currentEventIdBit);
  },
  _needsEvent$1$bailout: function(state0, currentEventIdBit, t1) {
    return !($.CONSTANT6.$shr($.$$and(t1, 4), 2) === currentEventIdBit);
  },
  _toggleEventReceived$0: function() {
    var t1 = this._state;
    if (t1 !== (t1 | 0))
      return this._toggleEventReceived$0$bailout(1, t1);
    this._state = (t1 ^ 4) >>> 0;
  },
  _toggleEventReceived$0$bailout: function(state0, t1) {
    this._state = $.$$xor(t1, 4);
  },
  _setSubscribed$1: function(eventIdBit) {
    var t1 = $.$$shl(eventIdBit, 2);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this._state = (1 | t1) >>> 0;
  },
  _setPendingUnsubscribe$0: function() {
    this._state = $.$$or(this._state, 2);
  },
  _setUnsubscribed$0: function() {
    var timesPaused = $.$$shr(this._state, 3);
    this._state = 0;
    return timesPaused;
  },
  _incrementPauseCount$0: function() {
    this._state = $.$$add(this._state, 8);
  },
  _decrementPauseCount$0: function() {
    this._state = $.$$sub(this._state, 8);
  }
};

$$._PendingEvents = {"": "Object;scheduleTimer<",
  get$isScheduled: function() {
    return !(this.scheduleTimer == null);
  },
  schedule$1: function(stream) {
    if (this.get$isScheduled() === true)
      return;
    this.scheduleTimer = $.Timer_Timer($.CONSTANT10, new $._PendingEvents_schedule_anon(this, stream));
  },
  cancelSchedule$0: function() {
    this.scheduleTimer.cancel$0();
    this.scheduleTimer = null;
  }
};

$$._StreamImplEvents = {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,scheduleTimer",
  get$isEmpty: function() {
    return this.lastPendingEvent == null;
  },
  get$isScheduled: function() {
    return !(this.scheduleTimer == null);
  },
  add$1: function($event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(stream) {
    var $event;
    if (this.get$isScheduled() === true)
      this.cancelSchedule$0();
    $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(stream);
  }
};

$$._DoneSubscription = {"": "Object;_handler>,_timer,_liblib0$_pauseCount",
  _handler$0: function() {
    return this._handler.call$0();
  },
  _delayDone$0: function() {
    this._timer = $.Timer_Timer($.CONSTANT10, new $._DoneSubscription__delayDone_anon(this));
  },
  get$_isComplete: function() {
    return this._timer == null && $.$$eq(this._liblib0$_pauseCount, 0) === true;
  },
  onError$1: function(handleError) {
  },
  get$onError: function() {
    return new $.BoundClosure$1(this, "onError$1");
  },
  pause$1: function(signal) {
    var t1;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    t1 = this._timer;
    if (!(t1 == null))
      t1.cancel$0();
    this._liblib0$_pauseCount = $.$$add(this._liblib0$_pauseCount, 1);
  },
  pause$0: function() {
    return this.pause$1(null);
  },
  resume$0: function() {
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    if ($.$$eq(this._liblib0$_pauseCount, 0) === true)
      return;
    this._liblib0$_pauseCount = $.$$sub(this._liblib0$_pauseCount, 1);
    if ($.$$eq(this._liblib0$_pauseCount, 0) === true)
      this._delayDone$0();
  },
  get$isPaused: function() {
    return $.$$gt(this._liblib0$_pauseCount, 0);
  },
  cancel$0: function() {
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    var t1 = this._timer;
    if (!(t1 == null)) {
      t1.cancel$0();
      this._timer = null;
    }
    this._liblib0$_pauseCount = 0;
  },
  _DoneSubscription$1: function(_handler) {
    this._delayDone$0();
  }
};

$$._SingleStreamMultiplexer = {"": "_MultiStreamImpl;_source,_subscription,_nextLink,_previousLink,_state,_pendingEvents",
  _onPauseStateChange$0: function() {
    if (this.get$_isPaused() === true) {
      var t1 = this._subscription;
      if (!(t1 == null))
        t1.pause$0();
    } else {
      t1 = this._subscription;
      if (!(t1 == null))
        t1.resume$0();
    }
  },
  _onSubscriptionStateChange$0: function() {
    var t1, t2, t3;
    if (this.get$_hasSubscribers() === true) {
      t1 = this._source;
      t2 = this.get$_add();
      t3 = this.get$_signalError();
      this._subscription = t1.listen$3$onDone$onError(t2, this.get$_close(), t3);
    } else {
      t1 = this._subscription;
      if (t1 == null)
        return;
      t1.cancel$0();
      this._subscription = null;
    }
  }
};

$$._EventStream = {"": "Stream;_liblib1$_target,_eventType,_useCapture",
  asBroadcastStream$0: function() {
    return this;
  },
  get$isBroadcast: function() {
    return true;
  },
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    return $._EventStreamSubscription$(this._liblib1$_target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  }
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_liblib1$_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this.get$_liblib1$_canceled() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    var t1 = this._onData;
    if (!(t1 == null))
      this._liblib1$_target.$$dom_removeEventListener$3(this._eventType, t1, this._useCapture);
    this._liblib1$_target = null;
    this._onData = null;
  },
  get$_liblib1$_canceled: function() {
    return this._liblib1$_target == null;
  },
  onError$1: function(handleError) {
  },
  get$onError: function() {
    return new $.BoundClosure$1(this, "onError$1");
  },
  pause$1: function(resumeSignal) {
    var t1;
    if (this.get$_liblib1$_canceled() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    this._pauseCount = this._pauseCount + 1;
    t1 = this._onData;
    if (!(t1 == null))
      this._liblib1$_target.$$dom_removeEventListener$3(this._eventType, t1, this._useCapture);
    if (!(resumeSignal == null))
      resumeSignal.whenComplete$1(this.get$resume());
  },
  pause$0: function() {
    return this.pause$1(null);
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  resume$0: function() {
    if (this.get$_liblib1$_canceled() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    if (this.get$_paused() !== true)
      throw $.$$throw($.StateError$("Subscription is not paused."));
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  get$resume: function() {
    return new $.Bound_resume__EventStreamSubscription(this, "resume$0");
  },
  _tryResume$0: function() {
    if (!(this._onData == null) && this.get$_paused() !== true)
      this._liblib1$_target.$$dom_addEventListener$3(this._eventType, this._onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._CustomEventStreamProvider = {"": "Object;_eventTypeGetter",
  _eventTypeGetter$1: function(arg0) {
    return this._eventTypeGetter.call$1(arg0);
  },
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventTypeGetter$1(e), useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._TypedImageData = {"": "Object;data>,height>,width>", $is_TypedImageData: true,
  $isImageData: function() {
    return true;
  },
  $asImageData: function() {
    return null;
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$parent: function() {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  get$top: function() {
    return $._DOMWindowCrossFrame__createSafe(this._window.top);
  },
  close$0: function() {
    return this._window.close();
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(2, t1, nextPosition);
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout(3, t1, nextPosition);
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$$add(t1, 1);
        t1 = this._length;
      case 2:
        state0 = 0;
      case 3:
        if (state0 === 3 || state0 === 0 && $.$$lt(nextPosition, t1) === true)
          switch (state0) {
            case 0:
              t1 = this._array;
            case 3:
              state0 = 0;
              this._current = $.$$index(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.Juggler = {"": "Object;_animatables,_animatablesCount,_elapsedTime",
  add$1: function(animatable) {
    var t1, t3, t4;
    if (animatable == null)
      return;
    t1 = this._animatablesCount;
    t3 = this._animatables;
    t4 = t3.length;
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, animatable, t1);
    if (t1 === t4)
      t3.push(animatable);
    else {
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t4)
        throw $.ioore(t1);
      t3[t1] = animatable;
    }
    t1 = this._animatablesCount;
    if (typeof t1 !== "number")
      return this.add$1$bailout(2, 0, t1);
    this._animatablesCount = t1 + 1;
  },
  add$1$bailout: function(state0, animatable, t1) {
    switch (state0) {
      case 0:
        if (animatable == null)
          return;
        t1 = this._animatablesCount;
      case 1:
        state0 = 0;
        t3 = this._animatables;
        if ($.$$eq(t1, t3.length) === true)
          t3.push(animatable);
        else {
          t1 = this._animatablesCount;
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= t3.length)
            throw $.ioore(t1);
          t3[t1] = animatable;
        }
        t1 = this._animatablesCount;
      case 2:
        var t3;
        state0 = 0;
        this._animatablesCount = $.$$add(t1, 1);
    }
  },
  remove$1: function(animatable) {
    var t1, i, t2;
    if (animatable == null)
      return;
    t1 = this._animatables;
    i = 0;
    while (true) {
      t2 = this._animatablesCount;
      if (typeof t2 !== "number")
        return this.remove$1$bailout(1, animatable, t2, t1, i);
      if (!(i < t2))
        break;
      if (i >= t1.length)
        throw $.ioore(i);
      if ($.$$eq(t1[i], animatable) === true) {
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = null;
        break;
      }
      ++i;
    }
  },
  remove$1$bailout: function(state0, animatable, t2, t1, i) {
    switch (state0) {
      case 0:
        if (animatable == null)
          return;
        t1 = this._animatables;
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this._animatablesCount;
              case 1:
                state0 = 0;
                if (!$.CONSTANT.$lt(i, t2))
                  break L0;
                if (i >= t1.length)
                  throw $.ioore(i);
                if ($.$$eq(t1[i], animatable) === true) {
                  if (i >= t1.length)
                    throw $.ioore(i);
                  t1[i] = null;
                  break L0;
                }
                ++i;
            }
    }
  },
  advanceTime$1: function(time) {
    var t1, animatablesCount, tail, head, animatable, t2, t3, tail0;
    t1 = this._elapsedTime;
    if (typeof t1 !== "number")
      return this.advanceTime$1$bailout(1, time, t1);
    this._elapsedTime = t1 + time;
    animatablesCount = this._animatablesCount;
    if (animatablesCount !== (animatablesCount | 0))
      return this.advanceTime$1$bailout(2, time, 0, animatablesCount);
    for (t1 = this._animatables, tail = 0, head = 0; head < animatablesCount; ++head) {
      if (head >= t1.length)
        throw $.ioore(head);
      animatable = t1[head];
      if (animatable == null)
        continue;
      if (!animatable.advanceTime$1(time)) {
        if (head >= t1.length)
          throw $.ioore(head);
        t1[head] = null;
        continue;
      }
      if (tail !== head) {
        t2 = t1.length;
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = animatable;
        if (head >= t2)
          throw $.ioore(head);
        t1[head] = null;
      }
      ++tail;
    }
    if (tail !== animatablesCount) {
      t2 = t1.length;
      head = animatablesCount;
      while (true) {
        t3 = this._animatablesCount;
        if (typeof t3 !== "number")
          return this.advanceTime$1$bailout(3, 0, t1, 0, tail, t3, head);
        if (!(head < t3))
          break;
        tail0 = tail + 1;
        if (head < 0 || head >= t2)
          throw $.ioore(head);
        t3 = t1[head];
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = t3;
        t1[head] = null;
        ++head;
        tail = tail0;
      }
      this._animatablesCount = tail;
    }
    return true;
  },
  advanceTime$1$bailout: function(state0, time, t1, animatablesCount, tail, t2, head) {
    switch (state0) {
      case 0:
        t1 = this._elapsedTime;
      case 1:
        state0 = 0;
        this._elapsedTime = $.$$add(t1, time);
        animatablesCount = this._animatablesCount;
      case 2:
        state0 = 0;
        for (t1 = this._animatables, tail = 0, head = 0; $.CONSTANT.$lt(head, animatablesCount); ++head) {
          if (head >= t1.length)
            throw $.ioore(head);
          animatable = t1[head];
          if (animatable == null)
            continue;
          if (!animatable.advanceTime$1(time)) {
            if (head >= t1.length)
              throw $.ioore(head);
            t1[head] = null;
            continue;
          }
          if (tail !== head) {
            t2 = t1.length;
            if (tail >= t2)
              throw $.ioore(tail);
            t1[tail] = animatable;
            if (head >= t2)
              throw $.ioore(head);
            t1[head] = null;
          }
          ++tail;
        }
      case 3:
        var animatable, tail0, t3;
        if (state0 === 3 || state0 === 0 && !(tail === animatablesCount))
          switch (state0) {
            case 0:
              head = animatablesCount;
            case 3:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t2 = this._animatablesCount;
                    case 3:
                      state0 = 0;
                      if (!($.$$lt(head, t2) === true))
                        break L0;
                      tail0 = tail + 1;
                      if (head !== (head | 0))
                        throw $.iae(head);
                      t2 = t1.length;
                      if (head < 0 || head >= t2)
                        throw $.ioore(head);
                      t3 = t1[head];
                      if (tail >= t2)
                        throw $.ioore(tail);
                      t1[tail] = t3;
                      t1[head] = null;
                      ++head;
                      tail = tail0;
                  }
              this._animatablesCount = tail;
          }
        return true;
    }
  }
};

$$.Point = {"": "Object;x=,y=",
  get$length: function() {
    var t1, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.get$length$bailout(1, t1);
    t1 *= t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.get$length$bailout(2, t1, t3);
    return $.sqrt(t1 + t3 * t3);
  },
  get$length$bailout: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t1 = $.$$mul(t1, t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        return $.sqrt($.$$add(t1, $.$$mul(t3, t3)));
    }
  },
  add$1: function(p) {
    var t1, t3, t6;
    t1 = this.x;
    t3 = p.get$x();
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, p, t1);
    if (typeof t3 !== "number")
      return this.add$1$bailout(2, p, t1, t3);
    t3 = t1 + t3;
    t1 = this.y;
    t6 = p.get$y();
    if (typeof t1 !== "number")
      return this.add$1$bailout(3, p, t1, t3);
    if (typeof t6 !== "number")
      return this.add$1$bailout(4, 0, t1, t3, t6);
    return $.Point$(t3, t1 + t6);
  },
  add$1$bailout: function(state0, p, t1, t3, t6) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = p.get$x();
      case 2:
        state0 = 0;
        t3 = $.$$add(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t6 = p.get$y();
      case 4:
        state0 = 0;
        return $.Point$(t3, $.$$add(t1, t6));
    }
  },
  copyFrom$1: function(p) {
    this.x = p.get$x();
    this.y = p.get$y();
  },
  equals$1: function(p) {
    return $.$$eq(this.x, p.x) === true && $.$$eq(this.y, p.y) === true;
  }
};

$$.Rectangle = {"": "Object;x=,y=,width=,height=",
  get$left: function() {
    return this.x;
  },
  get$top: function() {
    return this.y;
  },
  get$right: function() {
    var t1, t3;
    t1 = this.x;
    t3 = this.width;
    if (typeof t1 !== "number")
      return this.get$right$bailout(1, t1);
    if (typeof t3 !== "number")
      return this.get$right$bailout(2, t1, t3);
    return t1 + t3;
  },
  get$right$bailout: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = this.width;
      case 2:
        state0 = 0;
        return $.$$add(t1, t3);
    }
  },
  get$bottom: function() {
    var t1, t3;
    t1 = this.y;
    t3 = this.height;
    if (typeof t1 !== "number")
      return this.get$bottom$bailout(1, t1);
    if (typeof t3 !== "number")
      return this.get$bottom$bailout(2, t1, t3);
    return t1 + t3;
  },
  get$bottom$bailout: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.y;
      case 1:
        state0 = 0;
        t3 = this.height;
      case 2:
        state0 = 0;
        return $.$$add(t1, t3);
    }
  },
  get$size: function() {
    return $.Point$(this.width, this.height);
  },
  contains$2: function(px, py) {
    return $.$$le(this.x, px) === true && $.$$le(this.y, py) === true && $.$$ge(this.get$right(), px) === true && $.$$ge(this.get$bottom(), py) === true;
  },
  equals$1: function(r) {
    return $.$$eq(this.x, r.x) === true && $.$$eq(this.y, r.y) === true && $.$$eq(this.width, r.get$width()) === true && $.$$eq(this.height, r.get$height()) === true;
  },
  get$isEmpty: function() {
    var t1 = this.width;
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    if (t1 === 0) {
      t1 = this.height;
      if (typeof t1 !== "number")
        return this.get$isEmpty$bailout(2, t1);
      t1 = t1 === 0;
    } else
      t1 = false;
    return t1;
  },
  get$isEmpty$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
        t1 = this.width;
      case 1:
        state0 = 0;
      case 2:
        var t3;
        if (state0 === 2 || state0 === 0 && $.$$eq(t1, 0) === true)
          switch (state0) {
            case 0:
              t1 = this.height;
            case 2:
              state0 = 0;
              t3 = $.$$eq(t1, 0) === true;
              t1 = t3;
          }
        else
          t1 = false;
        return t1;
    }
  },
  copyFrom$1: function(r) {
    this.x = r.get$x();
    this.y = r.get$y();
    this.width = r.get$width();
    this.height = r.get$height();
  },
  union$1: function(rect) {
    var rLeft, rTop, rRight, rBottom;
    rLeft = $.min(this.get$left(), rect.get$left());
    rTop = $.min(this.get$top(), rect.get$top());
    rRight = $.max(this.get$right(), rect.get$right());
    rBottom = $.max(this.get$bottom(), rect.get$bottom());
    return $.Rectangle$(rLeft, rRight, $.$$sub(rRight, rLeft), $.$$sub(rBottom, rTop));
  }
};

$$.Matrix = {"": "Object;_a,_b,_c,_d,_tx,_ty,_det",
  get$a: function() {
    return this._a;
  },
  get$b: function() {
    return this._b;
  },
  get$c: function() {
    return this._c;
  },
  get$d: function() {
    return this._d;
  },
  get$tx: function() {
    return this._tx;
  },
  get$ty: function() {
    return this._ty;
  },
  get$det: function() {
    return this._det;
  },
  transformPoint$1: function(p) {
    return $.Point$($.$$add($.$$add($.$$mul(p.x, this._a), $.$$mul(p.y, this._c)), this._tx), $.$$add($.$$add($.$$mul(p.x, this._b), $.$$mul(p.y, this._d)), this._ty));
  },
  concat$1: function(matrix) {
    var a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2;
    a1 = this._a;
    if (typeof a1 !== "number")
      return this.concat$1$bailout(1, matrix, a1);
    b1 = this._b;
    if (typeof b1 !== "number")
      return this.concat$1$bailout(2, matrix, a1, b1);
    c1 = this._c;
    if (typeof c1 !== "number")
      return this.concat$1$bailout(3, matrix, a1, b1, c1);
    d1 = this._d;
    if (typeof d1 !== "number")
      return this.concat$1$bailout(4, matrix, a1, b1, c1, d1);
    tx1 = this._tx;
    if (typeof tx1 !== "number")
      return this.concat$1$bailout(5, matrix, a1, b1, c1, d1, tx1);
    ty1 = this._ty;
    if (typeof ty1 !== "number")
      return this.concat$1$bailout(6, matrix, a1, b1, c1, d1, tx1, ty1);
    det1 = this._det;
    a2 = matrix.get$a();
    if (typeof a2 !== "number")
      return this.concat$1$bailout(8, matrix, a1, b1, c1, d1, tx1, ty1, det1, a2);
    b2 = matrix.get$b();
    if (typeof b2 !== "number")
      return this.concat$1$bailout(9, matrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2);
    c2 = matrix.get$c();
    if (typeof c2 !== "number")
      return this.concat$1$bailout(10, matrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2);
    d2 = matrix.get$d();
    if (typeof d2 !== "number")
      return this.concat$1$bailout(11, matrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2);
    tx2 = matrix.get$tx();
    ty2 = matrix.get$ty();
    det2 = matrix.get$det();
    this._a = a1 * a2 + b1 * c2;
    this._b = a1 * b2 + b1 * d2;
    this._c = c1 * a2 + d1 * c2;
    this._d = c1 * b2 + d1 * d2;
    if (typeof tx2 !== "number")
      return this.concat$1$bailout(12, matrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2);
    this._tx = tx1 * a2 + ty1 * c2 + tx2;
    if (typeof ty2 !== "number")
      return this.concat$1$bailout(13, matrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2);
    this._ty = tx1 * b2 + ty1 * d2 + ty2;
    if (typeof det1 !== "number")
      return this.concat$1$bailout(7, matrix, a1, b1, c1, d1, tx1, ty1, det1);
    if (typeof det2 !== "number")
      return this.concat$1$bailout(14, 0, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2);
    this._det = det1 * det2;
  },
  concat$1$bailout: function(state0, matrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2) {
    switch (state0) {
      case 0:
        a1 = this._a;
      case 1:
        state0 = 0;
        b1 = this._b;
      case 2:
        state0 = 0;
        c1 = this._c;
      case 3:
        state0 = 0;
        d1 = this._d;
      case 4:
        state0 = 0;
        tx1 = this._tx;
      case 5:
        state0 = 0;
        ty1 = this._ty;
      case 6:
        state0 = 0;
        det1 = this._det;
      case 7:
        state0 = 0;
        a2 = matrix.get$a();
      case 8:
        state0 = 0;
        b2 = matrix.get$b();
      case 9:
        state0 = 0;
        c2 = matrix.get$c();
      case 10:
        state0 = 0;
        d2 = matrix.get$d();
      case 11:
        state0 = 0;
        tx2 = matrix.get$tx();
      case 12:
        state0 = 0;
        ty2 = matrix.get$ty();
      case 13:
        state0 = 0;
        det2 = matrix.get$det();
      case 14:
        var t15, t16, t17, t18, t19, t20;
        state0 = 0;
        t15 = $.getInterceptor$JSNumber(a1);
        t16 = $.getInterceptor$JSNumber(b1);
        this._a = $.$$add(t15.$mul(a1, a2), t16.$mul(b1, c2));
        this._b = $.$$add(t15.$mul(a1, b2), t16.$mul(b1, d2));
        t17 = $.getInterceptor$JSNumber(c1);
        t18 = $.getInterceptor$JSNumber(d1);
        this._c = $.$$add(t17.$mul(c1, a2), t18.$mul(d1, c2));
        this._d = $.$$add(t17.$mul(c1, b2), t18.$mul(d1, d2));
        t19 = $.getInterceptor$JSNumber(tx1);
        t20 = $.getInterceptor$JSNumber(ty1);
        this._tx = $.$$add($.$$add(t19.$mul(tx1, a2), t20.$mul(ty1, c2)), tx2);
        this._ty = $.$$add($.$$add(t19.$mul(tx1, b2), t20.$mul(ty1, d2)), ty2);
        this._det = $.$$mul(det1, det2);
    }
  },
  identity$0: function() {
    this._a = 1;
    this._b = 0;
    this._c = 0;
    this._d = 1;
    this._tx = 0;
    this._ty = 0;
    this._det = 1;
  },
  invert$0: function() {
    var a, b, c, d, tx, ty, det;
    a = this._a;
    b = this._b;
    c = this._c;
    d = this._d;
    tx = this._tx;
    ty = this._ty;
    det = this._det;
    this._a = $.$$div(d, det);
    this._b = -$.$$div(b, det);
    this._c = -$.$$div(c, det);
    this._d = $.$$div(a, det);
    this._tx = $.$$negate($.$$add($.$$mul(this._a, tx), $.$$mul(this._c, ty)));
    this._ty = $.$$negate($.$$add($.$$mul(this._b, tx), $.$$mul(this._d, ty)));
    if (typeof det !== "number")
      throw $.iae(det);
    this._det = 1 / det;
  },
  setTo$6: function(a, b, c, d, tx, ty) {
    this._a = a;
    this._b = b;
    this._c = c;
    this._d = d;
    this._tx = tx;
    this._ty = ty;
    this._det = $.$$sub($.$$mul(a, d), b * c);
  },
  copyFrom$1: function(matrix) {
    this._a = matrix.get$a();
    this._b = matrix.get$b();
    this._c = matrix.get$c();
    this._d = matrix.get$d();
    this._tx = matrix.get$tx();
    this._ty = matrix.get$ty();
    this._det = matrix.get$det();
  },
  copyFromAndConcat$2: function(copyMatrix, concatMatrix) {
    var a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2;
    a1 = copyMatrix.get$a();
    if (typeof a1 !== "number")
      return this.copyFromAndConcat$2$bailout(1, copyMatrix, concatMatrix, a1);
    b1 = copyMatrix.get$b();
    if (typeof b1 !== "number")
      return this.copyFromAndConcat$2$bailout(2, copyMatrix, concatMatrix, a1, b1);
    c1 = copyMatrix.get$c();
    if (typeof c1 !== "number")
      return this.copyFromAndConcat$2$bailout(3, copyMatrix, concatMatrix, a1, b1, c1);
    d1 = copyMatrix.get$d();
    if (typeof d1 !== "number")
      return this.copyFromAndConcat$2$bailout(4, copyMatrix, concatMatrix, a1, b1, c1, d1);
    tx1 = copyMatrix.get$tx();
    if (typeof tx1 !== "number")
      return this.copyFromAndConcat$2$bailout(5, copyMatrix, concatMatrix, a1, b1, c1, d1, tx1);
    ty1 = copyMatrix.get$ty();
    if (typeof ty1 !== "number")
      return this.copyFromAndConcat$2$bailout(6, copyMatrix, concatMatrix, a1, b1, c1, d1, tx1, ty1);
    det1 = copyMatrix.get$det();
    a2 = concatMatrix.get$a();
    if (typeof a2 !== "number")
      return this.copyFromAndConcat$2$bailout(8, 0, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2);
    b2 = concatMatrix.get$b();
    if (typeof b2 !== "number")
      return this.copyFromAndConcat$2$bailout(9, 0, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2);
    c2 = concatMatrix.get$c();
    if (typeof c2 !== "number")
      return this.copyFromAndConcat$2$bailout(10, 0, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2);
    d2 = concatMatrix.get$d();
    if (typeof d2 !== "number")
      return this.copyFromAndConcat$2$bailout(11, 0, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2);
    tx2 = concatMatrix.get$tx();
    ty2 = concatMatrix.get$ty();
    det2 = concatMatrix.get$det();
    this._a = a1 * a2 + b1 * c2;
    this._b = a1 * b2 + b1 * d2;
    this._c = c1 * a2 + d1 * c2;
    this._d = c1 * b2 + d1 * d2;
    if (typeof tx2 !== "number")
      return this.copyFromAndConcat$2$bailout(12, 0, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2);
    this._tx = tx1 * a2 + ty1 * c2 + tx2;
    if (typeof ty2 !== "number")
      return this.copyFromAndConcat$2$bailout(13, 0, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2);
    this._ty = tx1 * b2 + ty1 * d2 + ty2;
    if (typeof det1 !== "number")
      return this.copyFromAndConcat$2$bailout(7, 0, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1);
    if (typeof det2 !== "number")
      return this.copyFromAndConcat$2$bailout(14, 0, 0, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2);
    this._det = det1 * det2;
  },
  copyFromAndConcat$2$bailout: function(state0, copyMatrix, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2) {
    switch (state0) {
      case 0:
        a1 = copyMatrix.get$a();
      case 1:
        state0 = 0;
        b1 = copyMatrix.get$b();
      case 2:
        state0 = 0;
        c1 = copyMatrix.get$c();
      case 3:
        state0 = 0;
        d1 = copyMatrix.get$d();
      case 4:
        state0 = 0;
        tx1 = copyMatrix.get$tx();
      case 5:
        state0 = 0;
        ty1 = copyMatrix.get$ty();
      case 6:
        state0 = 0;
        det1 = copyMatrix.get$det();
      case 7:
        state0 = 0;
        a2 = concatMatrix.get$a();
      case 8:
        state0 = 0;
        b2 = concatMatrix.get$b();
      case 9:
        state0 = 0;
        c2 = concatMatrix.get$c();
      case 10:
        state0 = 0;
        d2 = concatMatrix.get$d();
      case 11:
        state0 = 0;
        tx2 = concatMatrix.get$tx();
      case 12:
        state0 = 0;
        ty2 = concatMatrix.get$ty();
      case 13:
        state0 = 0;
        det2 = concatMatrix.get$det();
      case 14:
        var t15, t16, t17, t18, t19, t20;
        state0 = 0;
        t15 = $.getInterceptor$JSNumber(a1);
        t16 = $.getInterceptor$JSNumber(b1);
        this._a = $.$$add(t15.$mul(a1, a2), t16.$mul(b1, c2));
        this._b = $.$$add(t15.$mul(a1, b2), t16.$mul(b1, d2));
        t17 = $.getInterceptor$JSNumber(c1);
        t18 = $.getInterceptor$JSNumber(d1);
        this._c = $.$$add(t17.$mul(c1, a2), t18.$mul(d1, c2));
        this._d = $.$$add(t17.$mul(c1, b2), t18.$mul(d1, d2));
        t19 = $.getInterceptor$JSNumber(tx1);
        t20 = $.getInterceptor$JSNumber(ty1);
        this._tx = $.$$add($.$$add(t19.$mul(tx1, a2), t20.$mul(ty1, c2)), tx2);
        this._ty = $.$$add($.$$add(t19.$mul(tx1, b2), t20.$mul(ty1, d2)), ty2);
        this._det = $.$$mul(det1, det2);
    }
  }
};

$$.RenderLoop = {"": "Object;_juggler,_stages,_renderTime,_enterFrameIndex,_enterFrameEvent",
  _onAnimationFrame$1: function(currentTime) {
    var t1, deltaTime, deltaTimeSec, i;
    if (typeof currentTime !== "number")
      return this._onAnimationFrame$1$bailout(1, currentTime);
    window.requestAnimationFrame$1(this.get$_onAnimationFrame());
    if ($.isNaN(this._renderTime) === true)
      this._renderTime = currentTime;
    t1 = this._renderTime;
    if (typeof t1 !== "number")
      return this._onAnimationFrame$1$bailout(2, currentTime, t1);
    if (t1 > currentTime)
      this._renderTime = currentTime;
    t1 = this._renderTime;
    if (typeof t1 !== "number")
      return this._onAnimationFrame$1$bailout(3, currentTime, t1);
    deltaTime = currentTime - t1;
    deltaTimeSec = deltaTime / 1000;
    if (deltaTime >= 1) {
      this._renderTime = currentTime;
      this._enterFrameEvent.set$_passedTime(deltaTimeSec);
      this._enterFrameIndex._dispatchEvent$1(this._enterFrameEvent);
      this._juggler.advanceTime$1(deltaTimeSec);
      i = 0;
      while (true) {
        t1 = $.length(this._stages);
        if (typeof t1 !== "number")
          return this._onAnimationFrame$1$bailout(4, 0, t1, i);
        if (!(i < t1))
          break;
        t1 = this._stages;
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
          return this._onAnimationFrame$1$bailout(5, 0, t1, i);
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i].materialize$0();
        ++i;
      }
    }
  },
  _onAnimationFrame$1$bailout: function(state0, currentTime, t1, i) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        window.requestAnimationFrame$1(this.get$_onAnimationFrame());
        if ($.isNaN(this._renderTime) === true)
          this._renderTime = currentTime;
        t1 = this._renderTime;
      case 2:
        state0 = 0;
        if ($.$$gt(t1, currentTime) === true)
          this._renderTime = currentTime;
        t1 = this._renderTime;
      case 3:
        state0 = 0;
        deltaTime = $.$$sub(currentTime, t1);
        t1 = $.getInterceptor$JSNumber(deltaTime);
        deltaTimeSec = t1.$div(deltaTime, 1000);
      default:
        var deltaTime, deltaTimeSec;
        if (state0 === 5 || state0 === 4 || state0 === 0 && t1.$ge(deltaTime, 1) === true)
          switch (state0) {
            case 0:
              this._renderTime = currentTime;
              this._enterFrameEvent.set$_passedTime(deltaTimeSec);
              this._enterFrameIndex._dispatchEvent$1(this._enterFrameEvent);
              this._juggler.advanceTime$1(deltaTimeSec);
              i = 0;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = $.length(this._stages);
                    case 4:
                      state0 = 0;
                      if (!$.CONSTANT.$lt(i, t1))
                        break L0;
                      t1 = this._stages;
                    case 5:
                      state0 = 0;
                      $.$$index(t1, i).materialize$0();
                      ++i;
                  }
          }
    }
  },
  get$_onAnimationFrame: function() {
    return new $.BoundClosure$1(this, "_onAnimationFrame$1");
  },
  addStage$1: function(stage) {
    $.add(this._stages, stage);
  },
  RenderLoop$0: function() {
    this._juggler = $.Juggler$();
    this._stages = $.List_List(0);
    this._renderTime = (0/0);
    this._enterFrameIndex = $.get$_EventStreamIndex_enterFrame();
    this._enterFrameEvent = $.EnterFrameEvent$(0);
    $.window().requestAnimationFrame$1(this.get$_onAnimationFrame());
  }
};

$$.RenderState = {"": "Object;_context,_matrices,_alphas,_depth",
  get$context: function() {
    return this._context;
  },
  reset$0: function() {
    var t1, m, a;
    this._depth = 0;
    t1 = this._matrices;
    if (0 >= t1.length)
      throw $.ioore(0);
    m = t1[0];
    t1 = this._alphas;
    if (0 >= t1.length)
      throw $.ioore(0);
    a = t1[0];
    t1 = this._context;
    t1.setTransform$6(m.get$a(), m.get$b(), m.get$c(), m.get$d(), m.get$tx(), m.get$ty());
    t1.set$globalAlpha(a);
    t1.clearRect$4(0, 0, t1.get$canvas().get$width(), t1.get$canvas().get$height());
  },
  renderDisplayObject$1: function(displayObject) {
    var d1, d2, t1, t2, m1, m2, t3, a1, t5, a2;
    d1 = this._depth;
    d2 = d1 + 1;
    t1 = this._matrices;
    t2 = t1.length;
    if (d1 < 0 || d1 >= t2)
      throw $.ioore(d1);
    m1 = t1[d1];
    if (d2 < 0 || d2 >= t2)
      throw $.ioore(d2);
    m2 = t1[d2];
    t1 = this._alphas;
    t3 = t1.length;
    if (d1 >= t3)
      throw $.ioore(d1);
    a1 = t1[d1];
    t5 = displayObject.get$_alpha();
    if (typeof t5 !== "number")
      return this.renderDisplayObject$1$bailout(2, displayObject, m2, t1, t3, a1, d1, d2, m1, t5);
    if (typeof a1 !== "number")
      return this.renderDisplayObject$1$bailout(1, displayObject, m2, t1, t3, a1, d1, d2, m1);
    a2 = t5 * a1;
    if (d2 >= t3)
      throw $.ioore(d2);
    t1[d2] = a2;
    m2.copyFromAndConcat$2(displayObject.get$_transformationMatrix(), m1);
    t1 = this._context;
    t1.setTransform$6(m2.get$a(), m2.get$b(), m2.get$c(), m2.get$d(), m2.get$tx(), m2.get$ty());
    t1.set$globalAlpha(a2);
    this._depth = d2;
    if (displayObject.get$mask() == null)
      displayObject.render$1(this);
    else {
      t1.save$0();
      displayObject.get$mask().render$1(this);
      displayObject.render$1(this);
      t1.restore$0();
    }
    this._depth = d1;
  },
  renderDisplayObject$1$bailout: function(state0, displayObject, m2, t1, t3, a1, d1, d2, m1, t5) {
    switch (state0) {
      case 0:
        d1 = this._depth;
        d2 = d1 + 1;
        t1 = this._matrices;
        t2 = t1.length;
        if (d1 < 0 || d1 >= t2)
          throw $.ioore(d1);
        m1 = t1[d1];
        if (d2 < 0 || d2 >= t2)
          throw $.ioore(d2);
        m2 = t1[d2];
        t1 = this._alphas;
        t3 = t1.length;
        if (d1 >= t3)
          throw $.ioore(d1);
        a1 = t1[d1];
      case 1:
        state0 = 0;
        t5 = displayObject.get$_alpha();
      case 2:
        var t2, a2;
        state0 = 0;
        a2 = $.$$mul(t5, a1);
        if (d2 >= t3)
          throw $.ioore(d2);
        t1[d2] = a2;
        m2.copyFromAndConcat$2(displayObject.get$_transformationMatrix(), m1);
        t1 = this._context;
        t1.setTransform$6(m2.get$a(), m2.get$b(), m2.get$c(), m2.get$d(), m2.get$tx(), m2.get$ty());
        t1.set$globalAlpha(a2);
        this._depth = d2;
        if (displayObject.get$mask() == null)
          displayObject.render$1(this);
        else {
          t1.save$0();
          displayObject.get$mask().render$1(this);
          displayObject.render$1(this);
          t1.restore$0();
        }
        this._depth = d1;
    }
  },
  RenderState$fromCanvasRenderingContext2D$2: function(context, matrix) {
    var t1, t2, t3, t4, i, t5, m, a;
    for (t1 = this._matrices, t2 = t1.length, t3 = this._alphas, t4 = t3.length, i = 0; i < 100; ++i) {
      t5 = $.Matrix$fromIdentity();
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = t5;
      if (i >= t4)
        throw $.ioore(i);
      t3[i] = 1;
    }
    if (!(matrix == null)) {
      if (0 >= t2)
        throw $.ioore(0);
      t1[0].copyFrom$1(matrix);
    }
    if (0 >= t2)
      throw $.ioore(0);
    m = t1[0];
    if (0 >= t4)
      throw $.ioore(0);
    a = t3[0];
    t1 = this._context;
    t1.setTransform$6(m.get$a(), m.get$b(), m.get$c(), m.get$d(), m.get$tx(), m.get$ty());
    t1.set$globalAlpha(a);
  }
};

$$.Event = {"": "Object;_type,_bubbles,_eventPhase<,_target=,_currentTarget<,_stopsPropagation<,_stopsImmediatePropagation<",
  _reset$2: function(type, bubbles) {
    this._type = type;
    this._bubbles = bubbles;
    this._eventPhase = 2;
    this._target = null;
    this._currentTarget = null;
    this._stopsPropagation = false;
    this._stopsImmediatePropagation = false;
  },
  get$stopsPropagation: function() {
    return this._stopsPropagation;
  },
  get$type: function() {
    return this._type;
  },
  get$bubbles: function() {
    return this._bubbles;
  },
  get$captures: function() {
    return true;
  },
  get$target: function() {
    return this._target;
  },
  Event$2: function(type, bubbles) {
    this._reset$2(type, bubbles);
  }
};

$$.EventDispatcher = {"": "Object;",
  hasEventListener$1: function(type) {
    var t1 = this._eventStreams;
    if (!(t1 == null))
      return t1.containsKey$1(type) === true || this._eventStreams.containsKey$1($.S(type) + "_CAPTURE") === true;
    else
      return false;
  },
  dispatchEvent$1: function($event) {
    this._dispatchEventInternal$4($event, this, this, 2);
  },
  _dispatchEventInternal$4: function($event, target, currentTarget, eventPhase) {
    var eventStreamKey, t1, eventStream;
    if (!(this._eventStreams == null)) {
      if (eventPhase === 1)
        eventStreamKey = $.S($event.get$type()) + "_CAPTURE";
      else {
        t1 = $event.get$type();
        if (typeof t1 !== "string")
          return this._dispatchEventInternal$4$bailout(1, $event, target, currentTarget, eventPhase, t1);
        eventStreamKey = t1;
      }
      eventStream = $.$$index(this._eventStreams, eventStreamKey);
      if (!(eventStream == null)) {
        $event.set$_target(target);
        $event.set$_currentTarget(currentTarget);
        $event.set$_eventPhase(eventPhase);
        $event.set$_stopsPropagation(false);
        $event.set$_stopsImmediatePropagation(false);
        eventStream._dispatchEvent$1($event);
      }
    }
  },
  _dispatchEventInternal$4$bailout: function(state0, $event, target, currentTarget, eventPhase, t1) {
    switch (state0) {
      case 0:
      case 1:
        var eventStreamKey, eventStream;
        if (state0 === 1 || state0 === 0 && !(this._eventStreams == null))
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && eventPhase === 1)
                eventStreamKey = $.S($event.get$type()) + "_CAPTURE";
              else
                switch (state0) {
                  case 0:
                    t1 = $event.get$type();
                  case 1:
                    state0 = 0;
                    eventStreamKey = t1;
                }
              eventStream = $.$$index(this._eventStreams, eventStreamKey);
              if (!(eventStream == null)) {
                $event.set$_target(target);
                $event.set$_currentTarget(currentTarget);
                $event.set$_eventPhase(eventPhase);
                $event.set$_stopsPropagation(false);
                $event.set$_stopsImmediatePropagation(false);
                eventStream._dispatchEvent$1($event);
              }
          }
    }
  },
  _getEventStream$2: function(eventType, useCapture) {
    var eventStreamKey, eventStream, t1;
    if (this._eventStreams == null)
      this._eventStreams = $.HashMap$();
    eventStreamKey = useCapture === true ? $.S(eventType) + "_CAPTURE" : eventType;
    eventStream = $.$$index(this._eventStreams, eventStreamKey);
    if (eventStream == null) {
      t1 = this._eventStreams;
      eventStream = $._EventStream$0(this, eventType, useCapture);
      $.$$indexSet(t1, eventStreamKey, eventStream);
    }
    return eventStream;
  }
};

$$._EventStreamIndex = {"": "Object;_eventStreams,_eventStreamsCount",
  _addEventStream$1: function(eventStream) {
    var t1, i, t2, t3;
    for (t1 = this._eventStreams, i = 0; t2 = this._eventStreamsCount, i < t2; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      if ($.$$eq(t1[i], eventStream) === true)
        return;
    }
    t3 = t1.length;
    if (t2 === t3)
      $.CONSTANT1.add$1(t1, eventStream);
    else {
      if (t2 < 0 || t2 >= t3)
        throw $.ioore(t2);
      t1[t2] = eventStream;
    }
    this._eventStreamsCount = this._eventStreamsCount + 1;
  },
  _dispatchEvent$1: function($event) {
    var eventStreamsCount, t1, tail, head, eventStream, t2, tail0, t3;
    $event.set$_eventPhase(2);
    $event.set$_stopsPropagation(false);
    $event.set$_stopsImmediatePropagation(false);
    eventStreamsCount = this._eventStreamsCount;
    for (t1 = this._eventStreams, tail = 0, head = 0; head < eventStreamsCount; ++head) {
      if (head >= t1.length)
        throw $.ioore(head);
      eventStream = t1[head];
      if (eventStream == null)
        continue;
      t2 = eventStream.get$_subscriptionsCount();
      if (typeof t2 !== "number")
        return this._dispatchEvent$1$bailout(1, $event, t2, eventStreamsCount, t1, eventStream, tail, head);
      if (t2 === 0) {
        t1[head] = null;
        continue;
      }
      $event.set$_target(eventStream.get$_target());
      $event.set$_currentTarget(eventStream.get$_target());
      eventStream._dispatchEvent$1($event);
      if (tail !== head) {
        t2 = t1.length;
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = eventStream;
        if (head >= t2)
          throw $.ioore(head);
        t1[head] = null;
      }
      ++tail;
    }
    if (tail !== eventStreamsCount) {
      for (t2 = t1.length, head = eventStreamsCount; head < this._eventStreamsCount; ++head, tail = tail0) {
        tail0 = tail + 1;
        if (head < 0 || head >= t2)
          throw $.ioore(head);
        t3 = t1[head];
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = t3;
        t1[head] = null;
      }
      this._eventStreamsCount = tail;
    }
  },
  _dispatchEvent$1$bailout: function(state0, $event, t2, eventStreamsCount, t1, eventStream, tail, head) {
    switch (state0) {
      case 0:
        $event.set$_eventPhase(2);
        $event.set$_stopsPropagation(false);
        $event.set$_stopsImmediatePropagation(false);
        eventStreamsCount = this._eventStreamsCount;
        t1 = this._eventStreams;
        tail = 0;
        head = 0;
      case 1:
        var tail0, t3;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(head < eventStreamsCount))
                  break L0;
              case 1:
                c$0: {
                  switch (state0) {
                    case 0:
                      if (head >= t1.length)
                        throw $.ioore(head);
                      eventStream = t1[head];
                      if (eventStream == null)
                        break c$0;
                      t2 = eventStream.get$_subscriptionsCount();
                    case 1:
                      state0 = 0;
                      if ($.$$eq(t2, 0) === true) {
                        if (head >= t1.length)
                          throw $.ioore(head);
                        t1[head] = null;
                        break c$0;
                      }
                      $event.set$_target(eventStream.get$_target());
                      $event.set$_currentTarget(eventStream.get$_target());
                      eventStream._dispatchEvent$1($event);
                      if (tail !== head) {
                        t2 = t1.length;
                        if (tail >= t2)
                          throw $.ioore(tail);
                        t1[tail] = eventStream;
                        if (head >= t2)
                          throw $.ioore(head);
                        t1[head] = null;
                      }
                      ++tail;
                  }
                }
                ++head;
            }
        if (tail !== eventStreamsCount) {
          for (t2 = t1.length, head = eventStreamsCount; head < this._eventStreamsCount; ++head, tail = tail0) {
            tail0 = tail + 1;
            if (head < 0 || head >= t2)
              throw $.ioore(head);
            t3 = t1[head];
            if (tail >= t2)
              throw $.ioore(tail);
            t1[tail] = t3;
            t1[head] = null;
          }
          this._eventStreamsCount = tail;
        }
    }
  }
};

$$._EventStream0 = {"": "Stream;_target>,_liblib2$_eventType,_liblib2$_useCapture,_subscriptions,_subscriptionsCount>",
  get$isBroadcast: function() {
    return true;
  },
  asBroadcastStream$0: function() {
    return this;
  },
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    var subscription, t1, t2, t3;
    subscription = $._EventStreamSubscription$0(this, onData);
    t1 = this._subscriptionsCount;
    t2 = this._subscriptions;
    t3 = t2.length;
    if (t1 === t3)
      $.CONSTANT1.add$1(t2, subscription);
    else {
      if (t1 < 0 || t1 >= t3)
        throw $.ioore(t1);
      t2[t1] = subscription;
    }
    this._subscriptionsCount = this._subscriptionsCount + 1;
    if ($.$$eq(this._liblib2$_eventType, "enterFrame") === true && $.$$eq(this._liblib2$_useCapture, false) === true)
      $.get$_EventStreamIndex_enterFrame()._addEventStream$1(this);
    return subscription;
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  _onSubscriptionCancel$1: function(subscription) {
    var t1, i;
    for (t1 = this._subscriptions, i = 0; i < this._subscriptionsCount; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      if ($.$$eq(t1[i], subscription) === true) {
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = null;
        break;
      }
    }
  },
  _dispatchEvent$1: function($event) {
    var subscriptionsCount, t1, tail, head, subscription, t2, tail0, t3;
    subscriptionsCount = this._subscriptionsCount;
    for (t1 = this._subscriptions, tail = 0, head = 0; head < subscriptionsCount; ++head) {
      if (head >= t1.length)
        throw $.ioore(head);
      subscription = t1[head];
      if (subscription == null)
        continue;
      subscription._liblib2$_onData$1($event);
      if (tail !== head) {
        t2 = t1.length;
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = subscription;
        if (head >= t2)
          throw $.ioore(head);
        t1[head] = null;
      }
      ++tail;
    }
    if (tail !== subscriptionsCount) {
      for (t2 = t1.length, head = subscriptionsCount; head < this._subscriptionsCount; ++head, tail = tail0) {
        tail0 = tail + 1;
        if (head < 0 || head >= t2)
          throw $.ioore(head);
        t3 = t1[head];
        if (tail >= t2)
          throw $.ioore(tail);
        t1[tail] = t3;
        t1[head] = null;
      }
      this._subscriptionsCount = tail;
    }
  }
};

$$.EventStreamProvider0 = {"": "Object;_liblib2$_eventType",
  forTarget$2$useCapture: function(target, useCapture) {
    return target._getEventStream$2(this._liblib2$_eventType, useCapture);
  },
  forTarget$1: function(target) {
    return this.forTarget$2$useCapture(target, false);
  }
};

$$._EventStreamSubscription0 = {"": "StreamSubscription;_eventStream,_liblib2$_onData,_liblib2$_pauseCount,_canceled",
  _liblib2$_onData$1: function(arg0) {
    return this._liblib2$_onData.call$1(arg0);
  },
  cancel$0: function() {
    if (!this._canceled) {
      this._eventStream._onSubscriptionCancel$1(this);
      this._canceled = true;
      this._liblib2$_onData = null;
    }
  },
  onError$1: function(handleError) {
  },
  get$onError: function() {
    return new $.BoundClosure$1(this, "onError$1");
  },
  get$_liblib2$_paused: function() {
    return this._liblib2$_pauseCount > 0;
  },
  pause$1: function(resumeSignal) {
    this._liblib2$_pauseCount = this._liblib2$_pauseCount + 1;
    if (!(resumeSignal == null))
      resumeSignal.whenComplete$1(this.get$resume());
  },
  pause$0: function() {
    return this.pause$1(null);
  },
  resume$0: function() {
    if ($.$$eq(this.get$_liblib2$_paused(), false) === true)
      throw $.$$throw($.StateError$("Subscription is not paused."));
    this._liblib2$_pauseCount = this._liblib2$_pauseCount - 1;
  },
  get$resume: function() {
    return new $.Bound_resume__EventStreamSubscription0(this, "resume$0");
  },
  _liblib2$_EventStreamSubscription$2: function(_eventStream, _onData) {
    this._liblib2$_pauseCount = 0;
    this._canceled = false;
  }
};

$$.EnterFrameEvent = {"": "Event;_passedTime<,_type,_bubbles,_eventPhase,_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation",
  get$captures: function() {
    return false;
  },
  EnterFrameEvent$1: function(passedTime) {
    this._passedTime = passedTime;
  }
};

$$.MouseEvent = {"": "Event;_localX,_localY,_stageX,_stageY,_buttonDown<,_altKey<,_controlKey,_ctrlKey<,_shiftKey<,_clickCount<,_deltaX,_deltaY,_type,_bubbles,_eventPhase,_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation",
  _reset$2: function(type, bubbles) {
    $.Event.prototype._reset$2.call(this, type, bubbles);
    this._localY = 0;
    this._localX = 0;
    this._stageY = 0;
    this._stageX = 0;
    this._buttonDown = false;
    this._altKey = false;
    this._controlKey = false;
    this._ctrlKey = false;
    this._shiftKey = false;
    this._clickCount = 0;
    this._deltaX = 0;
    this._deltaY = 0;
  },
  set$_localPoint: function(point) {
    this._localX = point.get$x();
    this._localY = point.get$y();
  },
  set$_stagePoint: function(point) {
    this._stageX = point.get$x();
    this._stageY = point.get$y();
  },
  get$buttonDown: function() {
    return this._buttonDown;
  },
  get$altKey: function() {
    return this._altKey;
  },
  get$ctrlKey: function() {
    return this._ctrlKey;
  },
  get$shiftKey: function() {
    return this._shiftKey;
  },
  get$clickCount: function() {
    return this._clickCount;
  },
  MouseEvent$2: function(type, bubbles) {
    this._reset$2(type, bubbles);
  }
};

$$.KeyboardEvent = {"": "Event;_altKey<,_ctrlKey<,_shiftKey<,_commandKey,_controlKey,_charCode<,_keyCode<,_keyLocation<,_type,_bubbles,_eventPhase,_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation",
  _reset$2: function(type, bubbles) {
    $.Event.prototype._reset$2.call(this, type, bubbles);
    this._altKey = false;
    this._ctrlKey = false;
    this._shiftKey = false;
    this._commandKey = false;
    this._controlKey = false;
    this._charCode = 0;
    this._keyCode = 0;
    this._keyLocation = 0;
  },
  get$altKey: function() {
    return this._altKey;
  },
  get$ctrlKey: function() {
    return this._ctrlKey;
  },
  get$shiftKey: function() {
    return this._shiftKey;
  },
  get$charCode: function() {
    return this._charCode;
  },
  get$keyCode: function() {
    return this._keyCode;
  },
  get$keyLocation: function() {
    return this._keyLocation;
  },
  KeyboardEvent$2: function(type, bubbles) {
    this._reset$2(type, bubbles);
  }
};

$$.TextEvent = {"": "Event;_text,_type,_bubbles,_eventPhase,_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation"};

$$.TouchEvent = {"": "Event;_touchPointID<,_isPrimaryTouchPoint<,_localX,_localY,_stageX,_stageY,_altKey<,_controlKey,_ctrlKey<,_shiftKey<,_pressure,_sizeX,_sizeY,_type,_bubbles,_eventPhase,_target,_currentTarget,_stopsPropagation,_stopsImmediatePropagation",
  _reset$2: function(type, bubbles) {
    $.Event.prototype._reset$2.call(this, type, bubbles);
    this._touchPointID = 0;
    this._isPrimaryTouchPoint = false;
    this._localY = 0;
    this._localX = 0;
    this._stageY = 0;
    this._stageX = 0;
    this._altKey = false;
    this._controlKey = false;
    this._ctrlKey = false;
    this._shiftKey = false;
    this._pressure = 1;
    this._sizeX = 0;
    this._sizeY = 0;
  },
  set$_localPoint: function(point) {
    this._localX = point.get$x();
    this._localY = point.get$y();
  },
  set$_stagePoint: function(point) {
    this._stageX = point.get$x();
    this._stageY = point.get$y();
  },
  get$touchPointID: function() {
    return this._touchPointID;
  },
  get$altKey: function() {
    return this._altKey;
  },
  get$ctrlKey: function() {
    return this._ctrlKey;
  },
  get$shiftKey: function() {
    return this._shiftKey;
  },
  TouchEvent$2: function(type, bubbles) {
    this._reset$2(type, bubbles);
  }
};

$$.BitmapFilter = {"": "Object;"};

$$.BlurFilter = {"": "BitmapFilter;blurX,blurY",
  apply$4: function(sourceBitmapData, sourceRect, destinationBitmapData, destinationPoint) {
    var sourceImageData, sourceData, sourceWidth, sourceHeight, t4, weightX, t6, weightY, rx2, ry2, destinationWidth, destinationHeight, sourceWidth4, destinationWidth4, destinationContext, destinationImageData, destinationData, buffer, t1, t2, t3, sum, z, x, offsetSource, offsetDestination, sum0, dif, y, t5, t7, color;
    sourceImageData = sourceBitmapData._getContext$0().getImageData$4(sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height);
    sourceData = sourceImageData.get$data();
    if (typeof sourceData !== "string" && (typeof sourceData !== "object" || sourceData === null || sourceData.constructor !== Array && !sourceData.$isJavaScriptIndexingBehavior()))
      return this.apply$4$bailout1(1, destinationBitmapData, destinationPoint, sourceImageData, sourceData);
    sourceWidth = sourceImageData.get$width();
    if (typeof sourceWidth !== "number")
      return this.apply$4$bailout1(2, destinationBitmapData, destinationPoint, sourceImageData, sourceData, sourceWidth);
    sourceHeight = sourceImageData.get$height();
    if (typeof sourceHeight !== "number")
      return this.apply$4$bailout1(3, destinationBitmapData, destinationPoint, 0, sourceData, sourceWidth, sourceHeight);
    t4 = this.blurX;
    if (t4 !== (t4 | 0))
      return this.apply$4$bailout1(4, destinationBitmapData, destinationPoint, 0, sourceData, sourceWidth, sourceHeight, t4);
    weightX = t4 * t4;
    t6 = this.blurY;
    if (t6 !== (t6 | 0))
      return this.apply$4$bailout1(5, destinationBitmapData, destinationPoint, 0, sourceData, sourceWidth, sourceHeight, t4, $.CONSTANT, t6, weightX);
    weightY = t6 * t6;
    rx2 = t4 * 2;
    ry2 = t6 * 2;
    destinationWidth = sourceWidth + rx2;
    destinationHeight = sourceHeight + ry2;
    sourceWidth4 = sourceWidth * 4;
    destinationWidth4 = destinationWidth * 4;
    destinationContext = destinationBitmapData._getContext$0();
    destinationImageData = destinationContext.createImageData$2(destinationWidth, destinationHeight);
    destinationData = destinationImageData.get$data();
    if (typeof destinationData !== "object" || destinationData === null || (destinationData.constructor !== Array || !!destinationData.immutable$list) && !destinationData.$isJavaScriptIndexingBehavior())
      return this.apply$4$bailout1(6, 0, destinationPoint, 0, sourceData, sourceWidth, sourceHeight, t4, 0, t6, weightX, destinationWidth, sourceWidth4, destinationContext, destinationImageData, destinationData, destinationHeight, destinationWidth4, weightY, rx2, ry2);
    $._premultiplyAlpha(sourceData);
    buffer = $.List_List$fixedLength(1024, null);
    for (t1 = $.getInterceptor$JSArrayJSString(sourceData), t2 = sourceData.length, t3 = destinationData.length, sum = $.CONSTANT.$shr(weightY, 1), z = 0; z < 4; ++z)
      for (x = 0; x < sourceWidth; ++x) {
        offsetSource = x * 4 + z;
        offsetDestination = (x + t4) * 4 + z;
        for (sum0 = sum, dif = 0, y = 0; y < destinationHeight; ++y) {
          t5 = $.CONSTANT6.$tdiv(sum0, weightY);
          if (offsetDestination !== (offsetDestination | 0))
            throw $.iae(offsetDestination);
          if (offsetDestination < 0 || offsetDestination >= t3)
            throw $.ioore(offsetDestination);
          destinationData[offsetDestination] = t5;
          offsetDestination += destinationWidth4;
          if (y >= ry2) {
            t5 = buffer[y & 1023];
            if (typeof t5 !== "number")
              throw $.iae(t5);
            t7 = buffer[y - t6 & 1023];
            if (typeof t7 !== "number")
              throw $.iae(t7);
            dif -= 2 * t5 - t7;
          } else if (y >= t6) {
            t5 = buffer[y & 1023];
            if (typeof t5 !== "number")
              throw $.iae(t5);
            dif -= 2 * t5;
          }
          if (y < sourceHeight) {
            if (offsetSource !== (offsetSource | 0))
              throw $.iae(offsetSource);
            if (offsetSource < 0 || offsetSource >= t2)
              throw $.ioore(offsetSource);
            t5 = sourceData[offsetSource];
            if (typeof t5 !== "number")
              return this.apply$4$bailout1(7, 0, destinationPoint, 0, sourceData, sourceWidth, sourceHeight, $.CONSTANT6, 0, t6, weightX, destinationWidth, sourceWidth4, destinationContext, destinationImageData, destinationData, destinationHeight, destinationWidth4, weightY, rx2, ry2, dif, t1, t5, sum0, offsetSource, y, t4, $.CONSTANT1, offsetDestination, z, x, buffer, $.CONSTANT);
            color = t5;
          } else
            color = 0;
          buffer[y + t6 & 1023] = color;
          dif += color;
          sum0 += dif;
          offsetSource += sourceWidth4;
        }
      }
    for (sum = $.CONSTANT.$shr(weightX, 1), t1 = t4 * 4, z = 0; z < 4; ++z)
      for (y = 0; y < destinationHeight; ++y) {
        t2 = y * destinationWidth4;
        offsetSource = t2 + t1 + z;
        offsetDestination = t2 + z;
        for (sum0 = sum, dif = 0, x = 0; x < destinationWidth; ++x) {
          t2 = $.CONSTANT6.$tdiv(sum0, weightX);
          if (offsetDestination !== (offsetDestination | 0))
            throw $.iae(offsetDestination);
          if (offsetDestination < 0 || offsetDestination >= t3)
            throw $.ioore(offsetDestination);
          destinationData[offsetDestination] = t2;
          offsetDestination += 4;
          if (x >= rx2) {
            t2 = buffer[x & 1023];
            if (typeof t2 !== "number")
              throw $.iae(t2);
            t5 = buffer[x - t4 & 1023];
            if (typeof t5 !== "number")
              throw $.iae(t5);
            dif -= 2 * t2 - t5;
          } else if (x >= t4) {
            t2 = buffer[x & 1023];
            if (typeof t2 !== "number")
              throw $.iae(t2);
            dif -= 2 * t2;
          }
          if (x < sourceWidth) {
            if (offsetSource !== (offsetSource | 0))
              throw $.iae(offsetSource);
            if (offsetSource < 0 || offsetSource >= t3)
              throw $.ioore(offsetSource);
            t2 = destinationData[offsetSource];
            if (typeof t2 !== "number")
              return this.apply$4$bailout1(8, 0, destinationPoint, 0, 0, sourceWidth, 0, $.CONSTANT6, 0, t6, weightX, destinationWidth, 0, destinationContext, destinationImageData, destinationData, destinationHeight, destinationWidth4, 0, rx2, 0, dif, $.CONSTANT, t2, sum0, offsetSource, y, t4, $.CONSTANT1, offsetDestination, z, x, buffer, $.CONSTANT6);
            color = t2;
          } else
            color = 0;
          buffer[x + t4 & 1023] = color;
          dif += color;
          sum0 += dif;
          offsetSource += 4;
        }
      }
    $._unpremultiplyAlpha(destinationData);
    destinationContext.putImageData$3(destinationImageData, $.$$sub(destinationPoint.x, t4), $.$$sub(destinationPoint.y, t6));
  },
  apply$4$bailout1: function(state0, destinationBitmapData, destinationPoint, sourceImageData, sourceData, sourceWidth, sourceHeight, t4, t6, t7, weightX, destinationWidth, sourceWidth4, destinationContext, destinationImageData, destinationData, destinationHeight, destinationWidth4, weightY, rx2, ry2, dif, t1, t5, sum, offsetSource, y, rx1, t2, offsetDestination, z, x, buffer, t3) {
    switch (state0) {
      case 0:
        sourceImageData = sourceBitmapData._getContext$0().getImageData$4(sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height);
        sourceData = sourceImageData.get$data();
      case 1:
        state0 = 0;
        sourceWidth = sourceImageData.get$width();
      case 2:
        state0 = 0;
        sourceHeight = sourceImageData.get$height();
      case 3:
        state0 = 0;
        t4 = this.blurX;
      case 4:
        state0 = 0;
        t6 = $.getInterceptor$JSNumber(t4);
        weightX = t6.$mul(t4, t4);
        t7 = this.blurY;
      case 5:
        state0 = 0;
        t9 = $.getInterceptor$JSNumber(t7);
        weightY = t9.$mul(t7, t7);
        rx2 = t6.$mul(t4, 2);
        ry2 = t9.$mul(t7, 2);
        t9 = $.getInterceptor$JSNumber(sourceWidth);
        destinationWidth = t9.$add(sourceWidth, rx2);
        destinationHeight = $.$$add(sourceHeight, ry2);
        sourceWidth4 = t9.$mul(sourceWidth, 4);
        destinationWidth4 = $.$$mul(destinationWidth, 4);
        destinationContext = destinationBitmapData._getContext$0();
        destinationImageData = destinationContext.createImageData$2(destinationWidth, destinationHeight);
        destinationData = destinationImageData.get$data();
      case 6:
        state0 = 0;
        $._premultiplyAlpha(sourceData);
        buffer = $.List_List$fixedLength(1024, null);
        t1 = $.getInterceptor$JSArrayJSString(sourceData);
        t2 = $.getInterceptor$JSArray(destinationData);
        t3 = $.getInterceptor$JSNumber(weightY);
        rx1 = t4;
        z = 0;
      case 7:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(z < 4))
                  break L0;
                x = 0;
              case 7:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!$.CONSTANT.$lt(x, sourceWidth))
                          break L1;
                        sum = t3.$shr(weightY, 1);
                        offsetSource = x * 4 + z;
                        if (typeof rx1 !== "number")
                          throw $.iae(rx1);
                        offsetDestination = (x + rx1) * 4 + z;
                        dif = 0;
                        y = 0;
                      case 7:
                        L2:
                          while (true)
                            switch (state0) {
                              case 0:
                                if (!$.CONSTANT.$lt(y, destinationHeight))
                                  break L2;
                                t4 = $.getInterceptor$JSNumber(sum);
                                t2.$indexSet(destinationData, offsetDestination, t4.$tdiv(sum, weightY));
                                if (typeof destinationWidth4 !== "number")
                                  throw $.iae(destinationWidth4);
                                offsetDestination += destinationWidth4;
                                if ($.CONSTANT.$ge(y, ry2)) {
                                  t5 = buffer[y & 1023];
                                  if (typeof t5 !== "number")
                                    throw $.iae(t5);
                                  if (typeof t7 !== "number")
                                    throw $.iae(t7);
                                  t6 = buffer[y - t7 & 1023];
                                  if (typeof t6 !== "number")
                                    throw $.iae(t6);
                                  dif -= 2 * t5 - t6;
                                } else if ($.CONSTANT.$ge(y, t7)) {
                                  t5 = buffer[y & 1023];
                                  if (typeof t5 !== "number")
                                    throw $.iae(t5);
                                  dif -= 2 * t5;
                                }
                              case 7:
                                if (state0 === 7 || state0 === 0 && $.CONSTANT.$lt(y, sourceHeight))
                                  switch (state0) {
                                    case 0:
                                      t5 = t1.$index(sourceData, offsetSource);
                                    case 7:
                                      state0 = 0;
                                      color = t5;
                                  }
                                else
                                  color = 0;
                                if (typeof t7 !== "number")
                                  throw $.iae(t7);
                                buffer[y + t7 & 1023] = color;
                                if (typeof color !== "number")
                                  throw $.iae(color);
                                dif += color;
                                sum = t4.$add(sum, dif);
                                if (typeof sourceWidth4 !== "number")
                                  throw $.iae(sourceWidth4);
                                offsetSource += sourceWidth4;
                                ++y;
                            }
                        ++x;
                    }
                ++z;
            }
        t1 = $.getInterceptor$JSNumber(weightX);
        t3 = $.getInterceptor$JSNumber(rx1);
        z = 0;
      case 8:
        var t9, color;
        L3:
          while (true)
            switch (state0) {
              case 0:
                if (!(z < 4))
                  break L3;
                y = 0;
              case 8:
                L4:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!$.CONSTANT.$lt(y, destinationHeight))
                          break L4;
                        sum = t1.$shr(weightX, 1);
                        if (typeof destinationWidth4 !== "number")
                          throw $.iae(destinationWidth4);
                        t4 = y * destinationWidth4;
                        t5 = t3.$mul(rx1, 4);
                        if (typeof t5 !== "number")
                          throw $.iae(t5);
                        offsetSource = t4 + t5 + z;
                        offsetDestination = t4 + z;
                        dif = 0;
                        x = 0;
                      case 8:
                        L5:
                          while (true)
                            switch (state0) {
                              case 0:
                                if (!$.CONSTANT.$lt(x, destinationWidth))
                                  break L5;
                                t4 = $.getInterceptor$JSNumber(sum);
                                t2.$indexSet(destinationData, offsetDestination, t4.$tdiv(sum, weightX));
                                offsetDestination += 4;
                                if ($.CONSTANT.$ge(x, rx2)) {
                                  t5 = buffer[x & 1023];
                                  if (typeof t5 !== "number")
                                    throw $.iae(t5);
                                  if (typeof rx1 !== "number")
                                    throw $.iae(rx1);
                                  t6 = buffer[x - rx1 & 1023];
                                  if (typeof t6 !== "number")
                                    throw $.iae(t6);
                                  dif -= 2 * t5 - t6;
                                } else if ($.CONSTANT.$ge(x, rx1)) {
                                  t5 = buffer[x & 1023];
                                  if (typeof t5 !== "number")
                                    throw $.iae(t5);
                                  dif -= 2 * t5;
                                }
                              case 8:
                                if (state0 === 8 || state0 === 0 && $.CONSTANT.$lt(x, sourceWidth))
                                  switch (state0) {
                                    case 0:
                                      t5 = t2.$index(destinationData, offsetSource);
                                    case 8:
                                      state0 = 0;
                                      color = t5;
                                  }
                                else
                                  color = 0;
                                if (typeof rx1 !== "number")
                                  throw $.iae(rx1);
                                buffer[x + rx1 & 1023] = color;
                                if (typeof color !== "number")
                                  throw $.iae(color);
                                dif += color;
                                sum = t4.$add(sum, dif);
                                offsetSource += 4;
                                ++x;
                            }
                        ++y;
                    }
                ++z;
            }
        $._unpremultiplyAlpha(destinationData);
        destinationContext.putImageData$3(destinationImageData, $.$$sub(destinationPoint.x, rx1), $.$$sub(destinationPoint.y, t7));
    }
  },
  BlurFilter$2: function(blurX, blurY) {
    var t1, t2;
    t1 = this.blurX;
    t2 = $.getInterceptor$JSNumber(t1);
    if (t2.$lt(t1, 1) === true || $.$$lt(this.blurY, 1) === true)
      throw $.$$throw($.ArgumentError$("Error #9004: The minimum blur size is 1."));
    if (t2.$gt(t1, 128) === true || $.$$gt(this.blurY, 128) === true)
      throw $.$$throw($.ArgumentError$("Error #9004: The maximum blur size is 128."));
  }
};

$$.ColorMatrixFilter = {"": "BitmapFilter;matrix",
  apply$4: function(sourceBitmapData, sourceRect, destinationBitmapData, destinationPoint) {
    var imageData, data, t2, t3, a00, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, t1, index, srcR, srcG, t4, srcB, t5, srcA;
    imageData = sourceBitmapData._getContext$0().getImageData$4(sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height);
    data = imageData.get$data();
    if (typeof data !== "object" || data === null || (data.constructor !== Array || !!data.immutable$list) && !data.$isJavaScriptIndexingBehavior())
      return this.apply$4$bailout1(1, destinationBitmapData, destinationPoint, imageData, data);
    t2 = this.matrix;
    t3 = $.getInterceptor$JSArrayJSString(t2);
    a00 = $.toInt($.$$mul(t3.$index(t2, 0), 65536));
    if (typeof a00 !== "number")
      return this.apply$4$bailout1(2, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3);
    a01 = $.toInt($.$$mul(t3.$index(t2, 1), 65536));
    if (typeof a01 !== "number")
      return this.apply$4$bailout1(3, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01);
    a02 = $.toInt($.$$mul(t3.$index(t2, 2), 65536));
    if (typeof a02 !== "number")
      return this.apply$4$bailout1(4, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02);
    a03 = $.toInt($.$$mul(t3.$index(t2, 3), 65536));
    if (typeof a03 !== "number")
      return this.apply$4$bailout1(5, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03);
    a04 = $.toInt($.$$mul(t3.$index(t2, 4), 65536));
    if (typeof a04 !== "number")
      return this.apply$4$bailout1(6, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04);
    a05 = $.toInt($.$$mul(t3.$index(t2, 5), 65536));
    if (typeof a05 !== "number")
      return this.apply$4$bailout1(7, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05);
    a06 = $.toInt($.$$mul(t3.$index(t2, 6), 65536));
    if (typeof a06 !== "number")
      return this.apply$4$bailout1(8, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06);
    a07 = $.toInt($.$$mul(t3.$index(t2, 7), 65536));
    if (typeof a07 !== "number")
      return this.apply$4$bailout1(9, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07);
    a08 = $.toInt($.$$mul(t3.$index(t2, 8), 65536));
    if (typeof a08 !== "number")
      return this.apply$4$bailout1(10, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07, a08);
    a09 = $.toInt($.$$mul(t3.$index(t2, 9), 65536));
    if (typeof a09 !== "number")
      return this.apply$4$bailout1(11, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07, a08, a09);
    a10 = $.toInt($.$$mul(t3.$index(t2, 10), 65536));
    if (typeof a10 !== "number")
      return this.apply$4$bailout1(12, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10);
    a11 = $.toInt($.$$mul(t3.$index(t2, 11), 65536));
    if (typeof a11 !== "number")
      return this.apply$4$bailout1(13, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11);
    a12 = $.toInt($.$$mul(t3.$index(t2, 12), 65536));
    if (typeof a12 !== "number")
      return this.apply$4$bailout1(14, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12);
    a13 = $.toInt($.$$mul(t3.$index(t2, 13), 65536));
    if (typeof a13 !== "number")
      return this.apply$4$bailout1(15, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13);
    a14 = $.toInt($.$$mul(t3.$index(t2, 14), 65536));
    if (typeof a14 !== "number")
      return this.apply$4$bailout1(16, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14);
    a15 = $.toInt($.$$mul(t3.$index(t2, 15), 65536));
    if (typeof a15 !== "number")
      return this.apply$4$bailout1(17, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15);
    a16 = $.toInt($.$$mul(t3.$index(t2, 16), 65536));
    if (typeof a16 !== "number")
      return this.apply$4$bailout1(18, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15, a16);
    a17 = $.toInt($.$$mul(t3.$index(t2, 17), 65536));
    if (typeof a17 !== "number")
      return this.apply$4$bailout1(19, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15, a16, a17);
    a18 = $.toInt($.$$mul(t3.$index(t2, 18), 65536));
    if (typeof a18 !== "number")
      return this.apply$4$bailout1(20, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15, a16, a17, a18);
    a19 = $.toInt($.$$mul(t3.$index(t2, 19), 65536));
    if (typeof a19 !== "number")
      return this.apply$4$bailout1(21, destinationBitmapData, destinationPoint, imageData, data, a00, 0, 0, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
    if ($.get$_isLittleEndianSystem() === true)
      for (t1 = data.length, index = 0; index <= t1 - 4; index += 4) {
        t2 = index + 0;
        srcR = data[t2];
        t3 = index + 1;
        srcG = data[t3];
        t4 = index + 2;
        srcB = data[t4];
        t5 = index + 3;
        srcA = data[t5];
        if (typeof srcR !== "number")
          throw $.iae(srcR);
        if (typeof srcG !== "number")
          throw $.iae(srcG);
        if (typeof srcB !== "number")
          throw $.iae(srcB);
        if (typeof srcA !== "number")
          throw $.iae(srcA);
        data[t2] = $.CONSTANT6.$tdiv(a00 * srcR + a01 * srcG + a02 * srcB + a03 * srcA + a04, 65536);
        data[t3] = $.CONSTANT6.$tdiv(a05 * srcR + a06 * srcG + a07 * srcB + a08 * srcA + a09, 65536);
        data[t4] = $.CONSTANT6.$tdiv(a10 * srcR + a11 * srcG + a12 * srcB + a13 * srcA + a14, 65536);
        data[t5] = $.CONSTANT6.$tdiv(a15 * srcR + a16 * srcG + a17 * srcB + a18 * srcA + a19, 65536);
      }
    else
      for (t1 = data.length, index = 0; index <= t1 - 4; index += 4) {
        t2 = index + 0;
        srcA = data[t2];
        t3 = index + 1;
        srcB = data[t3];
        t4 = index + 2;
        srcG = data[t4];
        t5 = index + 3;
        srcR = data[t5];
        if (typeof srcR !== "number")
          throw $.iae(srcR);
        if (typeof srcG !== "number")
          throw $.iae(srcG);
        if (typeof srcB !== "number")
          throw $.iae(srcB);
        if (typeof srcA !== "number")
          throw $.iae(srcA);
        data[t2] = $.CONSTANT6.$tdiv(a15 * srcR + a16 * srcG + a17 * srcB + a18 * srcA + a19, 65536);
        data[t3] = $.CONSTANT6.$tdiv(a10 * srcR + a11 * srcG + a12 * srcB + a13 * srcA + a14, 65536);
        data[t4] = $.CONSTANT6.$tdiv(a05 * srcR + a06 * srcG + a07 * srcB + a08 * srcA + a09, 65536);
        data[t5] = $.CONSTANT6.$tdiv(a00 * srcR + a01 * srcG + a02 * srcB + a03 * srcA + a04, 65536);
      }
    destinationBitmapData._getContext$0().putImageData$3(imageData, destinationPoint.x, destinationPoint.y);
  },
  apply$4$bailout1: function(state0, destinationBitmapData, destinationPoint, imageData, data, a00, t2, t3, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
    switch (state0) {
      case 0:
        imageData = sourceBitmapData._getContext$0().getImageData$4(sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height);
        data = imageData.get$data();
      case 1:
        state0 = 0;
        t2 = this.matrix;
        t3 = $.getInterceptor$JSArrayJSString(t2);
        a00 = $.toInt($.$$mul(t3.$index(t2, 0), 65536));
      case 2:
        state0 = 0;
        a01 = $.toInt($.$$mul(t3.$index(t2, 1), 65536));
      case 3:
        state0 = 0;
        a02 = $.toInt($.$$mul(t3.$index(t2, 2), 65536));
      case 4:
        state0 = 0;
        a03 = $.toInt($.$$mul(t3.$index(t2, 3), 65536));
      case 5:
        state0 = 0;
        a04 = $.toInt($.$$mul(t3.$index(t2, 4), 65536));
      case 6:
        state0 = 0;
        a05 = $.toInt($.$$mul(t3.$index(t2, 5), 65536));
      case 7:
        state0 = 0;
        a06 = $.toInt($.$$mul(t3.$index(t2, 6), 65536));
      case 8:
        state0 = 0;
        a07 = $.toInt($.$$mul(t3.$index(t2, 7), 65536));
      case 9:
        state0 = 0;
        a08 = $.toInt($.$$mul(t3.$index(t2, 8), 65536));
      case 10:
        state0 = 0;
        a09 = $.toInt($.$$mul(t3.$index(t2, 9), 65536));
      case 11:
        state0 = 0;
        a10 = $.toInt($.$$mul(t3.$index(t2, 10), 65536));
      case 12:
        state0 = 0;
        a11 = $.toInt($.$$mul(t3.$index(t2, 11), 65536));
      case 13:
        state0 = 0;
        a12 = $.toInt($.$$mul(t3.$index(t2, 12), 65536));
      case 14:
        state0 = 0;
        a13 = $.toInt($.$$mul(t3.$index(t2, 13), 65536));
      case 15:
        state0 = 0;
        a14 = $.toInt($.$$mul(t3.$index(t2, 14), 65536));
      case 16:
        state0 = 0;
        a15 = $.toInt($.$$mul(t3.$index(t2, 15), 65536));
      case 17:
        state0 = 0;
        a16 = $.toInt($.$$mul(t3.$index(t2, 16), 65536));
      case 18:
        state0 = 0;
        a17 = $.toInt($.$$mul(t3.$index(t2, 17), 65536));
      case 19:
        state0 = 0;
        a18 = $.toInt($.$$mul(t3.$index(t2, 18), 65536));
      case 20:
        state0 = 0;
        a19 = $.toInt($.$$mul(t3.$index(t2, 19), 65536));
      case 21:
        var t1, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, index, t18, srcR, t19, srcG, t20, srcB, t21, srcA;
        state0 = 0;
        if ($.get$_isLittleEndianSystem() === true)
          for (t1 = $.getInterceptor$JSArrayJSString(data), t2 = $.getInterceptor$JSNumber(a00), t3 = $.getInterceptor$JSNumber(a01), t4 = $.getInterceptor$JSNumber(a02), t5 = $.getInterceptor$JSNumber(a03), t6 = $.getInterceptor$JSNumber(a05), t7 = $.getInterceptor$JSNumber(a06), t8 = $.getInterceptor$JSNumber(a07), t9 = $.getInterceptor$JSNumber(a08), t10 = $.getInterceptor$JSNumber(a10), t11 = $.getInterceptor$JSNumber(a11), t12 = $.getInterceptor$JSNumber(a12), t13 = $.getInterceptor$JSNumber(a13), t14 = $.getInterceptor$JSNumber(a15), t15 = $.getInterceptor$JSNumber(a16), t16 = $.getInterceptor$JSNumber(a17), t17 = $.getInterceptor$JSNumber(a18), index = 0; $.CONSTANT.$le(index, $.$$sub(t1.get$length(data), 4)); index += 4) {
            t18 = index + 0;
            srcR = t1.$index(data, t18);
            t19 = index + 1;
            srcG = t1.$index(data, t19);
            t20 = index + 2;
            srcB = t1.$index(data, t20);
            t21 = index + 3;
            srcA = t1.$index(data, t21);
            t1.$indexSet(data, t18, $.$$tdiv($.$$add($.$$add($.$$add($.$$add(t2.$mul(a00, srcR), t3.$mul(a01, srcG)), t4.$mul(a02, srcB)), t5.$mul(a03, srcA)), a04), 65536));
            t1.$indexSet(data, t19, $.$$tdiv($.$$add($.$$add($.$$add($.$$add(t6.$mul(a05, srcR), t7.$mul(a06, srcG)), t8.$mul(a07, srcB)), t9.$mul(a08, srcA)), a09), 65536));
            t1.$indexSet(data, t20, $.$$tdiv($.$$add($.$$add($.$$add($.$$add(t10.$mul(a10, srcR), t11.$mul(a11, srcG)), t12.$mul(a12, srcB)), t13.$mul(a13, srcA)), a14), 65536));
            t1.$indexSet(data, t21, $.$$tdiv($.$$add($.$$add($.$$add($.$$add(t14.$mul(a15, srcR), t15.$mul(a16, srcG)), t16.$mul(a17, srcB)), t17.$mul(a18, srcA)), a19), 65536));
          }
        else
          for (t1 = $.getInterceptor$JSArrayJSString(data), t2 = $.getInterceptor$JSNumber(a15), t3 = $.getInterceptor$JSNumber(a16), t4 = $.getInterceptor$JSNumber(a17), t5 = $.getInterceptor$JSNumber(a18), t6 = $.getInterceptor$JSNumber(a10), t7 = $.getInterceptor$JSNumber(a11), t8 = $.getInterceptor$JSNumber(a12), t9 = $.getInterceptor$JSNumber(a13), t10 = $.getInterceptor$JSNumber(a05), t11 = $.getInterceptor$JSNumber(a06), t12 = $.getInterceptor$JSNumber(a07), t13 = $.getInterceptor$JSNumber(a08), t14 = $.getInterceptor$JSNumber(a00), t15 = $.getInterceptor$JSNumber(a01), t16 = $.getInterceptor$JSNumber(a02), t17 = $.getInterceptor$JSNumber(a03), index = 0; $.CONSTANT.$le(index, $.$$sub(t1.get$length(data), 4)); index += 4) {
            t18 = index + 0;
            srcA = t1.$index(data, t18);
            t19 = index + 1;
            srcB = t1.$index(data, t19);
            t20 = index + 2;
            srcG = t1.$index(data, t20);
            t21 = index + 3;
            srcR = t1.$index(data, t21);
            t1.$indexSet(data, t18, $.$$tdiv($.$$add($.$$add($.$$add($.$$add(t2.$mul(a15, srcR), t3.$mul(a16, srcG)), t4.$mul(a17, srcB)), t5.$mul(a18, srcA)), a19), 65536));
            t1.$indexSet(data, t19, $.$$tdiv($.$$add($.$$add($.$$add($.$$add(t6.$mul(a10, srcR), t7.$mul(a11, srcG)), t8.$mul(a12, srcB)), t9.$mul(a13, srcA)), a14), 65536));
            t1.$indexSet(data, t20, $.$$tdiv($.$$add($.$$add($.$$add($.$$add(t10.$mul(a05, srcR), t11.$mul(a06, srcG)), t12.$mul(a07, srcB)), t13.$mul(a08, srcA)), a09), 65536));
            t1.$indexSet(data, t21, $.$$tdiv($.$$add($.$$add($.$$add($.$$add(t14.$mul(a00, srcR), t15.$mul(a01, srcG)), t16.$mul(a02, srcB)), t17.$mul(a03, srcA)), a04), 65536));
          }
        destinationBitmapData._getContext$0().putImageData$3(imageData, destinationPoint.x, destinationPoint.y);
    }
  }
};

$$.DropShadowFilter = {"": "BitmapFilter;distance,angle,color>,alpha,blurX,blurY,strength,inner,knockout,hideObject",
  apply$4: function(sourceBitmapData, sourceRect, destinationBitmapData, destinationPoint) {
    var sourceContext, sourceData, sourceWidth, sourceHeight, t4, weightX, t6, weightY, rx2, ry2, destinationWidth, destinationHeight, sourceWidth4, destinationWidth4, alphaChannel, destinationContext, destinationImageData, destinationData, buffer, t1, t2, t3, sum, x, offsetSource, offsetDestination, sum0, dif, y, t5, t7, alpha, aColor, rColor, gColor, bColor, i, sx, sy, dx, dy, uRect;
    sourceContext = sourceBitmapData._getContext$0();
    sourceData = sourceContext.getImageData$4(sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height).get$data();
    if (typeof sourceData !== "string" && (typeof sourceData !== "object" || sourceData === null || sourceData.constructor !== Array && !sourceData.$isJavaScriptIndexingBehavior()))
      return this.apply$4$bailout1(1, sourceRect, destinationBitmapData, destinationPoint, sourceData, sourceContext);
    sourceWidth = sourceRect.width;
    if (typeof sourceWidth !== "number")
      return this.apply$4$bailout1(2, sourceRect, destinationBitmapData, destinationPoint, sourceData, sourceContext, sourceWidth);
    sourceHeight = sourceRect.height;
    if (typeof sourceHeight !== "number")
      return this.apply$4$bailout1(3, 0, destinationBitmapData, destinationPoint, sourceData, sourceContext, sourceWidth, sourceHeight);
    t4 = this.blurX;
    if (t4 !== (t4 | 0))
      return this.apply$4$bailout1(4, 0, destinationBitmapData, destinationPoint, sourceData, sourceContext, sourceWidth, sourceHeight, t4);
    weightX = t4 * t4;
    t6 = this.blurY;
    if (t6 !== (t6 | 0))
      return this.apply$4$bailout1(5, 0, destinationBitmapData, destinationPoint, sourceData, sourceContext, sourceWidth, sourceHeight, t4, t6, weightX, $.CONSTANT);
    weightY = t6 * t6;
    rx2 = t4 * 2;
    ry2 = t6 * 2;
    destinationWidth = sourceWidth + rx2;
    destinationHeight = sourceHeight + ry2;
    sourceWidth4 = sourceWidth * 4;
    destinationWidth4 = destinationWidth * 4;
    alphaChannel = $.get$_isLittleEndianSystem() === true ? 3 : 0;
    destinationContext = destinationBitmapData._getContext$0();
    destinationImageData = destinationContext.createImageData$2(destinationWidth, destinationHeight);
    destinationData = destinationImageData.get$data();
    if (typeof destinationData !== "object" || destinationData === null || (destinationData.constructor !== Array || !!destinationData.immutable$list) && !destinationData.$isJavaScriptIndexingBehavior())
      return this.apply$4$bailout1(6, 0, 0, destinationPoint, sourceData, sourceContext, sourceWidth, sourceHeight, t4, t6, weightX, 0, destinationWidth, sourceWidth4, destinationContext, destinationData, weightY, alphaChannel, destinationHeight, destinationWidth4, rx2, destinationImageData, ry2);
    buffer = $.List_List$fixedLength(1024, null);
    for (t1 = $.getInterceptor$JSArrayJSString(sourceData), t2 = sourceData.length, t3 = destinationData.length, sum = $.CONSTANT.$shr(weightY, 1), x = 0; x < sourceWidth; ++x) {
      offsetSource = x * 4 + alphaChannel;
      offsetDestination = (x + t4) * 4 + alphaChannel;
      for (sum0 = sum, dif = 0, y = 0; y < destinationHeight; ++y) {
        t5 = $.CONSTANT6.$tdiv(sum0, weightY);
        if (offsetDestination !== (offsetDestination | 0))
          throw $.iae(offsetDestination);
        if (offsetDestination < 0 || offsetDestination >= t3)
          throw $.ioore(offsetDestination);
        destinationData[offsetDestination] = t5;
        offsetDestination += destinationWidth4;
        if (y >= ry2) {
          t5 = buffer[y & 1023];
          if (typeof t5 !== "number")
            throw $.iae(t5);
          t7 = buffer[y - t6 & 1023];
          if (typeof t7 !== "number")
            throw $.iae(t7);
          dif -= 2 * t5 - t7;
        } else if (y >= t6) {
          t5 = buffer[y & 1023];
          if (typeof t5 !== "number")
            throw $.iae(t5);
          dif -= 2 * t5;
        }
        if (y < sourceHeight) {
          if (offsetSource !== (offsetSource | 0))
            throw $.iae(offsetSource);
          if (offsetSource < 0 || offsetSource >= t2)
            throw $.ioore(offsetSource);
          t5 = sourceData[offsetSource];
          if (typeof t5 !== "number")
            return this.apply$4$bailout1(7, 0, 0, destinationPoint, sourceData, sourceContext, sourceWidth, sourceHeight, $.CONSTANT6, t6, weightX, 0, destinationWidth, sourceWidth4, destinationContext, destinationData, weightY, alphaChannel, destinationHeight, destinationWidth4, rx2, destinationImageData, ry2, offsetDestination, sum0, offsetSource, y, t4, $.CONSTANT1, x, $.CONSTANT, dif, buffer, t1, t5);
          alpha = t5;
        } else
          alpha = 0;
        buffer[y + t6 & 1023] = alpha;
        dif += alpha;
        sum0 += dif;
        offsetSource += sourceWidth4;
      }
    }
    for (sum = $.CONSTANT.$shr(weightX, 1), t1 = t4 * 4, y = 0; y < destinationHeight; ++y) {
      t2 = y * destinationWidth4;
      offsetSource = t2 + t1 + alphaChannel;
      offsetDestination = t2 + alphaChannel;
      for (sum0 = sum, dif = 0, x = 0; x < destinationWidth; ++x) {
        t2 = $.CONSTANT6.$tdiv(sum0, weightX);
        if (offsetDestination !== (offsetDestination | 0))
          throw $.iae(offsetDestination);
        if (offsetDestination < 0 || offsetDestination >= t3)
          throw $.ioore(offsetDestination);
        destinationData[offsetDestination] = t2;
        offsetDestination += 4;
        if (x >= rx2) {
          t2 = buffer[x & 1023];
          if (typeof t2 !== "number")
            throw $.iae(t2);
          t5 = buffer[x - t4 & 1023];
          if (typeof t5 !== "number")
            throw $.iae(t5);
          dif -= 2 * t2 - t5;
        } else if (x >= t4) {
          t2 = buffer[x & 1023];
          if (typeof t2 !== "number")
            throw $.iae(t2);
          dif -= 2 * t2;
        }
        if (x < sourceWidth) {
          if (offsetSource !== (offsetSource | 0))
            throw $.iae(offsetSource);
          if (offsetSource < 0 || offsetSource >= t3)
            throw $.ioore(offsetSource);
          t2 = destinationData[offsetSource];
          if (typeof t2 !== "number")
            return this.apply$4$bailout1(8, 0, 0, destinationPoint, 0, sourceContext, sourceWidth, sourceHeight, $.CONSTANT6, t6, weightX, 0, destinationWidth, 0, destinationContext, destinationData, 0, alphaChannel, destinationHeight, destinationWidth4, rx2, destinationImageData, 0, offsetDestination, sum0, offsetSource, y, t4, $.CONSTANT1, x, $.CONSTANT6, dif, buffer, $.CONSTANT, t2);
          alpha = t2;
        } else
          alpha = 0;
        buffer[x + t4 & 1023] = alpha;
        dif += alpha;
        sum0 += dif;
        offsetSource += 4;
      }
    }
    aColor = $.toInt($.$$mul(this.alpha, 256));
    if (typeof aColor !== "number")
      return this.apply$4$bailout1(9, 0, 0, destinationPoint, 0, sourceContext, sourceWidth, sourceHeight, 0, t6, 0, 0, destinationWidth, 0, destinationContext, destinationData, 0, 0, destinationHeight, 0, 0, destinationImageData, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, aColor);
    t2 = this.color;
    t3 = $.getInterceptor$JSNumber(t2);
    rColor = $.$$and(t3.$shr(t2, 16), 255);
    if (rColor !== (rColor | 0))
      return this.apply$4$bailout1(10, 0, 0, destinationPoint, 0, sourceContext, sourceWidth, sourceHeight, 0, t6, 0, 0, destinationWidth, 0, destinationContext, destinationData, 0, 0, destinationHeight, 0, 0, destinationImageData, 0, 0, 0, 0, 0, t4, t2, 0, t3, 0, 0, 0, 0, aColor, rColor);
    gColor = $.$$and(t3.$shr(t2, 8), 255);
    if (gColor !== (gColor | 0))
      return this.apply$4$bailout1(11, 0, 0, destinationPoint, 0, sourceContext, sourceWidth, sourceHeight, 0, t6, 0, 0, destinationWidth, 0, destinationContext, destinationData, 0, 0, destinationHeight, 0, 0, destinationImageData, 0, 0, 0, 0, 0, t4, t2, 0, t3, 0, 0, 0, 0, aColor, rColor, gColor);
    bColor = $.$$and(t3.$shr(t2, 0), 255);
    if (bColor !== (bColor | 0))
      return this.apply$4$bailout1(12, 0, 0, destinationPoint, 0, sourceContext, sourceWidth, sourceHeight, 0, t6, 0, 0, destinationWidth, 0, destinationContext, destinationData, 0, 0, destinationHeight, 0, 0, destinationImageData, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, aColor, rColor, gColor, bColor);
    if ($.get$_isLittleEndianSystem() === true)
      for (i = 0; i <= destinationData.length - 4; i += 4) {
        t1 = i + 3;
        if ($.$$gt(destinationData[t1], 0) === true) {
          t2 = i + 0;
          t3 = destinationData.length;
          if (t2 >= t3)
            throw $.ioore(t2);
          destinationData[t2] = rColor;
          t2 = i + 1;
          if (t2 >= t3)
            throw $.ioore(t2);
          destinationData[t2] = gColor;
          t2 = i + 2;
          if (t2 >= t3)
            throw $.ioore(t2);
          destinationData[t2] = bColor;
          if (t1 >= t3)
            throw $.ioore(t1);
          t2 = $.$$tdiv($.$$mul(destinationData[t1], aColor), 256);
          if (t1 >= destinationData.length)
            throw $.ioore(t1);
          destinationData[t1] = t2;
        }
      }
    else
      for (i = 0; i <= destinationData.length - 4; i += 4) {
        t1 = i + 3;
        if ($.$$gt(destinationData[t1], 0) === true) {
          t2 = i + 0;
          if (t2 >= destinationData.length)
            throw $.ioore(t2);
          t3 = $.$$tdiv($.$$mul(destinationData[t2], aColor), 256);
          t5 = destinationData.length;
          if (t2 >= t5)
            throw $.ioore(t2);
          destinationData[t2] = t3;
          t3 = i + 1;
          if (t3 >= t5)
            throw $.ioore(t3);
          destinationData[t3] = bColor;
          t3 = i + 2;
          if (t3 >= t5)
            throw $.ioore(t3);
          destinationData[t3] = gColor;
          if (t1 >= t5)
            throw $.ioore(t1);
          destinationData[t1] = rColor;
        }
      }
    sx = destinationPoint.x;
    sy = destinationPoint.y;
    t1 = $.$$sub(sx, t4);
    t2 = this.distance;
    t3 = this.angle;
    t4 = $.getInterceptor$JSNumber(t2);
    dx = $.$$add(t1, $.CONSTANT6.toInt$0($.round(t4.$mul(t2, Math.cos($.checkNum(t3))))));
    dy = $.$$add($.$$sub(destinationPoint.y, t6), $.CONSTANT6.toInt$0($.round(t4.$mul(t2, Math.sin($.checkNum(t3))))));
    uRect = $.Rectangle$(sx, sy, sourceWidth, sourceHeight).union$1($.Rectangle$(dx, dy, destinationWidth, destinationHeight));
    destinationContext.setTransform$6(1, 0, 0, 1, 0, 0);
    destinationContext.clearRect$4(uRect.x, uRect.y, uRect.width, uRect.height);
    destinationContext.putImageData$3(destinationImageData, dx, dy);
    if ($.$$eq(this.hideObject, false) === true)
      destinationContext.drawImage$3(sourceContext.get$canvas(), sx, sy);
  },
  apply$4$bailout1: function(state0, sourceRect, destinationBitmapData, destinationPoint, sourceData, sourceContext, sourceWidth, sourceHeight, t4, t7, weightX, t6, destinationWidth, sourceWidth4, destinationContext, destinationData, weightY, alphaChannel, destinationHeight, destinationWidth4, rx2, destinationImageData, ry2, offsetDestination, sum, offsetSource, y, rx1, t2, x, t3, dif, buffer, t1, t5, aColor, rColor, gColor, bColor) {
    switch (state0) {
      case 0:
        sourceContext = sourceBitmapData._getContext$0();
        sourceData = sourceContext.getImageData$4(sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height).get$data();
      case 1:
        state0 = 0;
        sourceWidth = sourceRect.width;
      case 2:
        state0 = 0;
        sourceHeight = sourceRect.height;
      case 3:
        state0 = 0;
        t4 = this.blurX;
      case 4:
        state0 = 0;
        t6 = $.getInterceptor$JSNumber(t4);
        weightX = t6.$mul(t4, t4);
        t7 = this.blurY;
      case 5:
        state0 = 0;
        t9 = $.getInterceptor$JSNumber(t7);
        weightY = t9.$mul(t7, t7);
        rx2 = t6.$mul(t4, 2);
        ry2 = t9.$mul(t7, 2);
        t9 = $.getInterceptor$JSNumber(sourceWidth);
        destinationWidth = t9.$add(sourceWidth, rx2);
        destinationHeight = $.$$add(sourceHeight, ry2);
        sourceWidth4 = t9.$mul(sourceWidth, 4);
        destinationWidth4 = $.$$mul(destinationWidth, 4);
        alphaChannel = $.get$_isLittleEndianSystem() === true ? 3 : 0;
        destinationContext = destinationBitmapData._getContext$0();
        destinationImageData = destinationContext.createImageData$2(destinationWidth, destinationHeight);
        destinationData = destinationImageData.get$data();
      case 6:
        state0 = 0;
        buffer = $.List_List$fixedLength(1024, null);
        t1 = $.getInterceptor$JSArrayJSString(sourceData);
        t2 = $.getInterceptor$JSArray(destinationData);
        t3 = $.getInterceptor$JSNumber(weightY);
        rx1 = t4;
        x = 0;
      case 7:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT.$lt(x, sourceWidth))
                  break L0;
                sum = t3.$shr(weightY, 1);
                offsetSource = x * 4 + alphaChannel;
                if (typeof rx1 !== "number")
                  throw $.iae(rx1);
                offsetDestination = (x + rx1) * 4 + alphaChannel;
                dif = 0;
                y = 0;
              case 7:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!$.CONSTANT.$lt(y, destinationHeight))
                          break L1;
                        t4 = $.getInterceptor$JSNumber(sum);
                        t2.$indexSet(destinationData, offsetDestination, t4.$tdiv(sum, weightY));
                        if (typeof destinationWidth4 !== "number")
                          throw $.iae(destinationWidth4);
                        offsetDestination += destinationWidth4;
                        if ($.CONSTANT.$ge(y, ry2)) {
                          t5 = buffer[y & 1023];
                          if (typeof t5 !== "number")
                            throw $.iae(t5);
                          if (typeof t7 !== "number")
                            throw $.iae(t7);
                          t6 = buffer[y - t7 & 1023];
                          if (typeof t6 !== "number")
                            throw $.iae(t6);
                          dif -= 2 * t5 - t6;
                        } else if ($.CONSTANT.$ge(y, t7)) {
                          t5 = buffer[y & 1023];
                          if (typeof t5 !== "number")
                            throw $.iae(t5);
                          dif -= 2 * t5;
                        }
                      case 7:
                        if (state0 === 7 || state0 === 0 && $.CONSTANT.$lt(y, sourceHeight))
                          switch (state0) {
                            case 0:
                              t5 = t1.$index(sourceData, offsetSource);
                            case 7:
                              state0 = 0;
                              alpha = t5;
                          }
                        else
                          alpha = 0;
                        if (typeof t7 !== "number")
                          throw $.iae(t7);
                        buffer[y + t7 & 1023] = alpha;
                        if (typeof alpha !== "number")
                          throw $.iae(alpha);
                        dif += alpha;
                        sum = t4.$add(sum, dif);
                        if (typeof sourceWidth4 !== "number")
                          throw $.iae(sourceWidth4);
                        offsetSource += sourceWidth4;
                        ++y;
                    }
                ++x;
            }
        t1 = $.getInterceptor$JSNumber(weightX);
        t3 = $.getInterceptor$JSNumber(rx1);
        y = 0;
      case 8:
        L2:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT.$lt(y, destinationHeight))
                  break L2;
                sum = t1.$shr(weightX, 1);
                if (typeof destinationWidth4 !== "number")
                  throw $.iae(destinationWidth4);
                t4 = y * destinationWidth4;
                t5 = t3.$mul(rx1, 4);
                if (typeof t5 !== "number")
                  throw $.iae(t5);
                offsetSource = t4 + t5 + alphaChannel;
                offsetDestination = t4 + alphaChannel;
                dif = 0;
                x = 0;
              case 8:
                L3:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!$.CONSTANT.$lt(x, destinationWidth))
                          break L3;
                        t4 = $.getInterceptor$JSNumber(sum);
                        t2.$indexSet(destinationData, offsetDestination, t4.$tdiv(sum, weightX));
                        offsetDestination += 4;
                        if ($.CONSTANT.$ge(x, rx2)) {
                          t5 = buffer[x & 1023];
                          if (typeof t5 !== "number")
                            throw $.iae(t5);
                          if (typeof rx1 !== "number")
                            throw $.iae(rx1);
                          t6 = buffer[x - rx1 & 1023];
                          if (typeof t6 !== "number")
                            throw $.iae(t6);
                          dif -= 2 * t5 - t6;
                        } else if ($.CONSTANT.$ge(x, rx1)) {
                          t5 = buffer[x & 1023];
                          if (typeof t5 !== "number")
                            throw $.iae(t5);
                          dif -= 2 * t5;
                        }
                      case 8:
                        if (state0 === 8 || state0 === 0 && $.CONSTANT.$lt(x, sourceWidth))
                          switch (state0) {
                            case 0:
                              t5 = t2.$index(destinationData, offsetSource);
                            case 8:
                              state0 = 0;
                              alpha = t5;
                          }
                        else
                          alpha = 0;
                        if (typeof rx1 !== "number")
                          throw $.iae(rx1);
                        buffer[x + rx1 & 1023] = alpha;
                        if (typeof alpha !== "number")
                          throw $.iae(alpha);
                        dif += alpha;
                        sum = t4.$add(sum, dif);
                        offsetSource += 4;
                        ++x;
                    }
                ++y;
            }
        aColor = $.toInt($.$$mul(this.alpha, 256));
      case 9:
        state0 = 0;
        t2 = this.color;
        t3 = $.getInterceptor$JSNumber(t2);
        rColor = $.$$and(t3.$shr(t2, 16), 255);
      case 10:
        state0 = 0;
        gColor = $.$$and(t3.$shr(t2, 8), 255);
      case 11:
        state0 = 0;
        bColor = $.$$and(t3.$shr(t2, 0), 255);
      case 12:
        var t9, alpha, i, sx, sy, dx, dy, uRect;
        state0 = 0;
        if ($.get$_isLittleEndianSystem() === true)
          for (t1 = $.getInterceptor$JSArrayJSString(destinationData), i = 0; $.CONSTANT.$le(i, $.$$sub(t1.get$length(destinationData), 4)); i += 4) {
            t2 = i + 3;
            if ($.$$gt(t1.$index(destinationData, t2), 0) === true) {
              t1.$indexSet(destinationData, i + 0, rColor);
              t1.$indexSet(destinationData, i + 1, gColor);
              t1.$indexSet(destinationData, i + 2, bColor);
              t1.$indexSet(destinationData, t2, $.$$tdiv($.$$mul(t1.$index(destinationData, t2), aColor), 256));
            }
          }
        else
          for (t1 = $.getInterceptor$JSArrayJSString(destinationData), i = 0; $.CONSTANT.$le(i, $.$$sub(t1.get$length(destinationData), 4)); i += 4) {
            t2 = i + 3;
            if ($.$$gt(t1.$index(destinationData, t2), 0) === true) {
              t3 = i + 0;
              t1.$indexSet(destinationData, t3, $.$$tdiv($.$$mul(t1.$index(destinationData, t3), aColor), 256));
              t1.$indexSet(destinationData, i + 1, bColor);
              t1.$indexSet(destinationData, i + 2, gColor);
              t1.$indexSet(destinationData, t2, rColor);
            }
          }
        sx = destinationPoint.x;
        sy = destinationPoint.y;
        t1 = $.$$sub(sx, rx1);
        t2 = this.distance;
        t3 = this.angle;
        t4 = $.getInterceptor$JSNumber(t2);
        dx = $.$$add(t1, $.CONSTANT6.toInt$0($.round(t4.$mul(t2, Math.cos($.checkNum(t3))))));
        dy = $.$$add($.$$sub(destinationPoint.y, t7), $.CONSTANT6.toInt$0($.round(t4.$mul(t2, Math.sin($.checkNum(t3))))));
        uRect = $.Rectangle$(sx, sy, sourceWidth, sourceHeight).union$1($.Rectangle$(dx, dy, destinationWidth, destinationHeight));
        destinationContext.setTransform$6(1, 0, 0, 1, 0, 0);
        destinationContext.clearRect$4(uRect.x, uRect.y, uRect.width, uRect.height);
        destinationContext.putImageData$3(destinationImageData, dx, dy);
        if ($.$$eq(this.hideObject, false) === true)
          destinationContext.drawImage$3(sourceContext.get$canvas(), sx, sy);
    }
  },
  DropShadowFilter$10: function(distance, angle, color, alpha, blurX, blurY, strength, inner, knockout, hideObject) {
    var t1, t2;
    t1 = this.blurX;
    t2 = $.getInterceptor$JSNumber(t1);
    if (t2.$lt(t1, 1) === true || $.$$lt(this.blurY, 1) === true)
      throw $.$$throw($.ArgumentError$("Error #9004: The minimum blur size is 1."));
    if (t2.$gt(t1, 128) === true || $.$$gt(this.blurY, 128) === true)
      throw $.$$throw($.ArgumentError$("Error #9004: The maximum blur size is 128."));
  }
};

$$.GlowFilter = {"": "BitmapFilter;color>,alpha,blurX,blurY,strength,inner,knockout,hideObject",
  apply$4: function(sourceBitmapData, sourceRect, destinationBitmapData, destinationPoint) {
    var sourceContext, sourceData, sourceWidth, sourceHeight, t4, weightX, t6, weightY, rx2, ry2, destinationWidth, destinationHeight, sourceWidth4, destinationWidth4, alphaChannel, destinationContext, destinationImageData, destinationData, buffer, t1, t2, t3, sum, x, offsetSource, offsetDestination, sum0, dif, y, t5, t7, alpha, aColor, rColor, gColor, bColor, i, sx, sy, dx, dy, uRect;
    sourceContext = sourceBitmapData._getContext$0();
    sourceData = sourceContext.getImageData$4(sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height).get$data();
    if (typeof sourceData !== "string" && (typeof sourceData !== "object" || sourceData === null || sourceData.constructor !== Array && !sourceData.$isJavaScriptIndexingBehavior()))
      return this.apply$4$bailout1(1, sourceRect, destinationBitmapData, destinationPoint, sourceData, sourceContext);
    sourceWidth = sourceRect.width;
    if (typeof sourceWidth !== "number")
      return this.apply$4$bailout1(2, sourceRect, destinationBitmapData, destinationPoint, sourceData, sourceContext, sourceWidth);
    sourceHeight = sourceRect.height;
    if (typeof sourceHeight !== "number")
      return this.apply$4$bailout1(3, 0, destinationBitmapData, destinationPoint, sourceData, sourceContext, sourceWidth, sourceHeight);
    t4 = this.blurX;
    if (t4 !== (t4 | 0))
      return this.apply$4$bailout1(4, 0, destinationBitmapData, destinationPoint, sourceData, sourceContext, sourceWidth, sourceHeight, t4);
    weightX = t4 * t4;
    t6 = this.blurY;
    if (t6 !== (t6 | 0))
      return this.apply$4$bailout1(5, 0, destinationBitmapData, destinationPoint, sourceData, sourceContext, sourceWidth, sourceHeight, t4, $.CONSTANT, weightX, t6);
    weightY = t6 * t6;
    rx2 = t4 * 2;
    ry2 = t6 * 2;
    destinationWidth = sourceWidth + rx2;
    destinationHeight = sourceHeight + ry2;
    sourceWidth4 = sourceWidth * 4;
    destinationWidth4 = destinationWidth * 4;
    alphaChannel = $.get$_isLittleEndianSystem() === true ? 3 : 0;
    destinationContext = destinationBitmapData._getContext$0();
    destinationImageData = destinationContext.createImageData$2(destinationWidth, destinationHeight);
    destinationData = destinationImageData.get$data();
    if (typeof destinationData !== "object" || destinationData === null || (destinationData.constructor !== Array || !!destinationData.immutable$list) && !destinationData.$isJavaScriptIndexingBehavior())
      return this.apply$4$bailout1(6, 0, 0, destinationPoint, sourceData, sourceContext, sourceWidth, sourceHeight, t4, 0, weightX, t6, destinationWidth, sourceWidth4, alphaChannel, destinationImageData, destinationData, destinationContext, weightY, rx2, destinationHeight, destinationWidth4, ry2);
    buffer = $.List_List$fixedLength(1024, null);
    for (t1 = $.getInterceptor$JSArrayJSString(sourceData), t2 = sourceData.length, t3 = destinationData.length, sum = $.CONSTANT.$shr(weightY, 1), x = 0; x < sourceWidth; ++x) {
      offsetSource = x * 4 + alphaChannel;
      offsetDestination = (x + t4) * 4 + alphaChannel;
      for (sum0 = sum, dif = 0, y = 0; y < destinationHeight; ++y) {
        t5 = $.CONSTANT6.$tdiv(sum0, weightY);
        if (offsetDestination !== (offsetDestination | 0))
          throw $.iae(offsetDestination);
        if (offsetDestination < 0 || offsetDestination >= t3)
          throw $.ioore(offsetDestination);
        destinationData[offsetDestination] = t5;
        offsetDestination += destinationWidth4;
        if (y >= ry2) {
          t5 = buffer[y & 1023];
          if (typeof t5 !== "number")
            throw $.iae(t5);
          t7 = buffer[y - t6 & 1023];
          if (typeof t7 !== "number")
            throw $.iae(t7);
          dif -= 2 * t5 - t7;
        } else if (y >= t6) {
          t5 = buffer[y & 1023];
          if (typeof t5 !== "number")
            throw $.iae(t5);
          dif -= 2 * t5;
        }
        if (y < sourceHeight) {
          if (offsetSource !== (offsetSource | 0))
            throw $.iae(offsetSource);
          if (offsetSource < 0 || offsetSource >= t2)
            throw $.ioore(offsetSource);
          t5 = sourceData[offsetSource];
          if (typeof t5 !== "number")
            return this.apply$4$bailout1(7, 0, 0, destinationPoint, sourceData, sourceContext, sourceWidth, sourceHeight, $.CONSTANT6, 0, weightX, t6, destinationWidth, sourceWidth4, alphaChannel, destinationImageData, destinationData, destinationContext, weightY, rx2, destinationHeight, destinationWidth4, ry2, sum0, offsetSource, y, t4, $.CONSTANT1, x, $.CONSTANT, offsetDestination, dif, buffer, t1, t5);
          alpha = t5;
        } else
          alpha = 0;
        buffer[y + t6 & 1023] = alpha;
        dif += alpha;
        sum0 += dif;
        offsetSource += sourceWidth4;
      }
    }
    for (sum = $.CONSTANT.$shr(weightX, 1), t1 = t4 * 4, y = 0; y < destinationHeight; ++y) {
      t2 = y * destinationWidth4;
      offsetSource = t2 + t1 + alphaChannel;
      offsetDestination = t2 + alphaChannel;
      for (sum0 = sum, dif = 0, x = 0; x < destinationWidth; ++x) {
        t2 = $.CONSTANT6.$tdiv(sum0, weightX);
        if (offsetDestination !== (offsetDestination | 0))
          throw $.iae(offsetDestination);
        if (offsetDestination < 0 || offsetDestination >= t3)
          throw $.ioore(offsetDestination);
        destinationData[offsetDestination] = t2;
        offsetDestination += 4;
        if (x >= rx2) {
          t2 = buffer[x & 1023];
          if (typeof t2 !== "number")
            throw $.iae(t2);
          t5 = buffer[x - t4 & 1023];
          if (typeof t5 !== "number")
            throw $.iae(t5);
          dif -= 2 * t2 - t5;
        } else if (x >= t4) {
          t2 = buffer[x & 1023];
          if (typeof t2 !== "number")
            throw $.iae(t2);
          dif -= 2 * t2;
        }
        if (x < sourceWidth) {
          if (offsetSource !== (offsetSource | 0))
            throw $.iae(offsetSource);
          if (offsetSource < 0 || offsetSource >= t3)
            throw $.ioore(offsetSource);
          t2 = destinationData[offsetSource];
          if (typeof t2 !== "number")
            return this.apply$4$bailout1(8, 0, 0, destinationPoint, 0, sourceContext, sourceWidth, sourceHeight, $.CONSTANT6, 0, weightX, t6, destinationWidth, 0, alphaChannel, destinationImageData, destinationData, destinationContext, 0, rx2, destinationHeight, destinationWidth4, 0, sum0, offsetSource, y, t4, $.CONSTANT1, x, $.CONSTANT6, offsetDestination, dif, buffer, $.CONSTANT, t2);
          alpha = t2;
        } else
          alpha = 0;
        buffer[x + t4 & 1023] = alpha;
        dif += alpha;
        sum0 += dif;
        offsetSource += 4;
      }
    }
    aColor = $.toInt($.$$mul(this.alpha, 256));
    if (typeof aColor !== "number")
      return this.apply$4$bailout1(9, 0, 0, destinationPoint, 0, sourceContext, sourceWidth, sourceHeight, 0, 0, 0, t6, destinationWidth, 0, 0, destinationImageData, destinationData, destinationContext, 0, 0, destinationHeight, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, 0, aColor);
    t2 = this.color;
    t3 = $.getInterceptor$JSNumber(t2);
    rColor = $.$$and(t3.$shr(t2, 16), 255);
    if (rColor !== (rColor | 0))
      return this.apply$4$bailout1(10, 0, 0, destinationPoint, 0, sourceContext, sourceWidth, sourceHeight, 0, 0, 0, t6, destinationWidth, 0, 0, destinationImageData, destinationData, destinationContext, 0, 0, destinationHeight, 0, 0, 0, 0, 0, t4, t2, 0, t3, 0, 0, 0, 0, 0, aColor, rColor);
    gColor = $.$$and(t3.$shr(t2, 8), 255);
    if (gColor !== (gColor | 0))
      return this.apply$4$bailout1(11, 0, 0, destinationPoint, 0, sourceContext, sourceWidth, sourceHeight, 0, 0, 0, t6, destinationWidth, 0, 0, destinationImageData, destinationData, destinationContext, 0, 0, destinationHeight, 0, 0, 0, 0, 0, t4, t2, 0, t3, 0, 0, 0, 0, 0, aColor, rColor, gColor);
    bColor = $.$$and(t3.$shr(t2, 0), 255);
    if (bColor !== (bColor | 0))
      return this.apply$4$bailout1(12, 0, 0, destinationPoint, 0, sourceContext, sourceWidth, sourceHeight, 0, 0, 0, t6, destinationWidth, 0, 0, destinationImageData, destinationData, destinationContext, 0, 0, destinationHeight, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, 0, aColor, rColor, gColor, bColor);
    if ($.get$_isLittleEndianSystem() === true)
      for (i = 0; i <= destinationData.length - 4; i += 4) {
        t1 = i + 3;
        if ($.$$gt(destinationData[t1], 0) === true) {
          t2 = i + 0;
          t3 = destinationData.length;
          if (t2 >= t3)
            throw $.ioore(t2);
          destinationData[t2] = rColor;
          t2 = i + 1;
          if (t2 >= t3)
            throw $.ioore(t2);
          destinationData[t2] = gColor;
          t2 = i + 2;
          if (t2 >= t3)
            throw $.ioore(t2);
          destinationData[t2] = bColor;
          if (t1 >= t3)
            throw $.ioore(t1);
          t2 = $.$$tdiv($.$$mul(destinationData[t1], aColor), 256);
          if (t1 >= destinationData.length)
            throw $.ioore(t1);
          destinationData[t1] = t2;
        }
      }
    else
      for (i = 0; i <= destinationData.length - 4; i += 4) {
        t1 = i + 3;
        if ($.$$gt(destinationData[t1], 0) === true) {
          t2 = i + 0;
          if (t2 >= destinationData.length)
            throw $.ioore(t2);
          t3 = $.$$tdiv($.$$mul(destinationData[t2], aColor), 256);
          t5 = destinationData.length;
          if (t2 >= t5)
            throw $.ioore(t2);
          destinationData[t2] = t3;
          t3 = i + 1;
          if (t3 >= t5)
            throw $.ioore(t3);
          destinationData[t3] = bColor;
          t3 = i + 2;
          if (t3 >= t5)
            throw $.ioore(t3);
          destinationData[t3] = gColor;
          if (t1 >= t5)
            throw $.ioore(t1);
          destinationData[t1] = rColor;
        }
      }
    sx = destinationPoint.x;
    sy = destinationPoint.y;
    dx = $.$$sub(sx, t4);
    dy = $.$$sub(destinationPoint.y, t6);
    uRect = $.Rectangle$(sx, sy, sourceWidth, sourceHeight).union$1($.Rectangle$(dx, dy, destinationWidth, destinationHeight));
    destinationContext.setTransform$6(1, 0, 0, 1, 0, 0);
    destinationContext.clearRect$4(uRect.x, uRect.y, uRect.width, uRect.height);
    destinationContext.putImageData$3(destinationImageData, dx, dy);
    if ($.$$eq(this.hideObject, false) === true)
      destinationContext.drawImage$3(sourceContext.get$canvas(), sx, sy);
  },
  apply$4$bailout1: function(state0, sourceRect, destinationBitmapData, destinationPoint, sourceData, sourceContext, sourceWidth, sourceHeight, t4, t6, weightX, t7, destinationWidth, sourceWidth4, alphaChannel, destinationImageData, destinationData, destinationContext, weightY, rx2, destinationHeight, destinationWidth4, ry2, sum, offsetSource, y, rx1, t2, x, t3, offsetDestination, dif, buffer, t1, t5, aColor, rColor, gColor, bColor) {
    switch (state0) {
      case 0:
        sourceContext = sourceBitmapData._getContext$0();
        sourceData = sourceContext.getImageData$4(sourceRect.x, sourceRect.y, sourceRect.width, sourceRect.height).get$data();
      case 1:
        state0 = 0;
        sourceWidth = sourceRect.width;
      case 2:
        state0 = 0;
        sourceHeight = sourceRect.height;
      case 3:
        state0 = 0;
        t4 = this.blurX;
      case 4:
        state0 = 0;
        t6 = $.getInterceptor$JSNumber(t4);
        weightX = t6.$mul(t4, t4);
        t7 = this.blurY;
      case 5:
        state0 = 0;
        t9 = $.getInterceptor$JSNumber(t7);
        weightY = t9.$mul(t7, t7);
        rx2 = t6.$mul(t4, 2);
        ry2 = t9.$mul(t7, 2);
        t9 = $.getInterceptor$JSNumber(sourceWidth);
        destinationWidth = t9.$add(sourceWidth, rx2);
        destinationHeight = $.$$add(sourceHeight, ry2);
        sourceWidth4 = t9.$mul(sourceWidth, 4);
        destinationWidth4 = $.$$mul(destinationWidth, 4);
        alphaChannel = $.get$_isLittleEndianSystem() === true ? 3 : 0;
        destinationContext = destinationBitmapData._getContext$0();
        destinationImageData = destinationContext.createImageData$2(destinationWidth, destinationHeight);
        destinationData = destinationImageData.get$data();
      case 6:
        state0 = 0;
        buffer = $.List_List$fixedLength(1024, null);
        t1 = $.getInterceptor$JSArrayJSString(sourceData);
        t2 = $.getInterceptor$JSArray(destinationData);
        t3 = $.getInterceptor$JSNumber(weightY);
        rx1 = t4;
        x = 0;
      case 7:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT.$lt(x, sourceWidth))
                  break L0;
                sum = t3.$shr(weightY, 1);
                offsetSource = x * 4 + alphaChannel;
                if (typeof rx1 !== "number")
                  throw $.iae(rx1);
                offsetDestination = (x + rx1) * 4 + alphaChannel;
                dif = 0;
                y = 0;
              case 7:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!$.CONSTANT.$lt(y, destinationHeight))
                          break L1;
                        t4 = $.getInterceptor$JSNumber(sum);
                        t2.$indexSet(destinationData, offsetDestination, t4.$tdiv(sum, weightY));
                        if (typeof destinationWidth4 !== "number")
                          throw $.iae(destinationWidth4);
                        offsetDestination += destinationWidth4;
                        if ($.CONSTANT.$ge(y, ry2)) {
                          t5 = buffer[y & 1023];
                          if (typeof t5 !== "number")
                            throw $.iae(t5);
                          if (typeof t7 !== "number")
                            throw $.iae(t7);
                          t6 = buffer[y - t7 & 1023];
                          if (typeof t6 !== "number")
                            throw $.iae(t6);
                          dif -= 2 * t5 - t6;
                        } else if ($.CONSTANT.$ge(y, t7)) {
                          t5 = buffer[y & 1023];
                          if (typeof t5 !== "number")
                            throw $.iae(t5);
                          dif -= 2 * t5;
                        }
                      case 7:
                        if (state0 === 7 || state0 === 0 && $.CONSTANT.$lt(y, sourceHeight))
                          switch (state0) {
                            case 0:
                              t5 = t1.$index(sourceData, offsetSource);
                            case 7:
                              state0 = 0;
                              alpha = t5;
                          }
                        else
                          alpha = 0;
                        if (typeof t7 !== "number")
                          throw $.iae(t7);
                        buffer[y + t7 & 1023] = alpha;
                        if (typeof alpha !== "number")
                          throw $.iae(alpha);
                        dif += alpha;
                        sum = t4.$add(sum, dif);
                        if (typeof sourceWidth4 !== "number")
                          throw $.iae(sourceWidth4);
                        offsetSource += sourceWidth4;
                        ++y;
                    }
                ++x;
            }
        t1 = $.getInterceptor$JSNumber(weightX);
        t3 = $.getInterceptor$JSNumber(rx1);
        y = 0;
      case 8:
        L2:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT.$lt(y, destinationHeight))
                  break L2;
                sum = t1.$shr(weightX, 1);
                if (typeof destinationWidth4 !== "number")
                  throw $.iae(destinationWidth4);
                t4 = y * destinationWidth4;
                t5 = t3.$mul(rx1, 4);
                if (typeof t5 !== "number")
                  throw $.iae(t5);
                offsetSource = t4 + t5 + alphaChannel;
                offsetDestination = t4 + alphaChannel;
                dif = 0;
                x = 0;
              case 8:
                L3:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!$.CONSTANT.$lt(x, destinationWidth))
                          break L3;
                        t4 = $.getInterceptor$JSNumber(sum);
                        t2.$indexSet(destinationData, offsetDestination, t4.$tdiv(sum, weightX));
                        offsetDestination += 4;
                        if ($.CONSTANT.$ge(x, rx2)) {
                          t5 = buffer[x & 1023];
                          if (typeof t5 !== "number")
                            throw $.iae(t5);
                          if (typeof rx1 !== "number")
                            throw $.iae(rx1);
                          t6 = buffer[x - rx1 & 1023];
                          if (typeof t6 !== "number")
                            throw $.iae(t6);
                          dif -= 2 * t5 - t6;
                        } else if ($.CONSTANT.$ge(x, rx1)) {
                          t5 = buffer[x & 1023];
                          if (typeof t5 !== "number")
                            throw $.iae(t5);
                          dif -= 2 * t5;
                        }
                      case 8:
                        if (state0 === 8 || state0 === 0 && $.CONSTANT.$lt(x, sourceWidth))
                          switch (state0) {
                            case 0:
                              t5 = t2.$index(destinationData, offsetSource);
                            case 8:
                              state0 = 0;
                              alpha = t5;
                          }
                        else
                          alpha = 0;
                        if (typeof rx1 !== "number")
                          throw $.iae(rx1);
                        buffer[x + rx1 & 1023] = alpha;
                        if (typeof alpha !== "number")
                          throw $.iae(alpha);
                        dif += alpha;
                        sum = t4.$add(sum, dif);
                        offsetSource += 4;
                        ++x;
                    }
                ++y;
            }
        aColor = $.toInt($.$$mul(this.alpha, 256));
      case 9:
        state0 = 0;
        t2 = this.color;
        t3 = $.getInterceptor$JSNumber(t2);
        rColor = $.$$and(t3.$shr(t2, 16), 255);
      case 10:
        state0 = 0;
        gColor = $.$$and(t3.$shr(t2, 8), 255);
      case 11:
        state0 = 0;
        bColor = $.$$and(t3.$shr(t2, 0), 255);
      case 12:
        var t9, alpha, i, sx, sy, dx, dy, uRect;
        state0 = 0;
        if ($.get$_isLittleEndianSystem() === true)
          for (t1 = $.getInterceptor$JSArrayJSString(destinationData), i = 0; $.CONSTANT.$le(i, $.$$sub(t1.get$length(destinationData), 4)); i += 4) {
            t2 = i + 3;
            if ($.$$gt(t1.$index(destinationData, t2), 0) === true) {
              t1.$indexSet(destinationData, i + 0, rColor);
              t1.$indexSet(destinationData, i + 1, gColor);
              t1.$indexSet(destinationData, i + 2, bColor);
              t1.$indexSet(destinationData, t2, $.$$tdiv($.$$mul(t1.$index(destinationData, t2), aColor), 256));
            }
          }
        else
          for (t1 = $.getInterceptor$JSArrayJSString(destinationData), i = 0; $.CONSTANT.$le(i, $.$$sub(t1.get$length(destinationData), 4)); i += 4) {
            t2 = i + 3;
            if ($.$$gt(t1.$index(destinationData, t2), 0) === true) {
              t3 = i + 0;
              t1.$indexSet(destinationData, t3, $.$$tdiv($.$$mul(t1.$index(destinationData, t3), aColor), 256));
              t1.$indexSet(destinationData, i + 1, bColor);
              t1.$indexSet(destinationData, i + 2, gColor);
              t1.$indexSet(destinationData, t2, rColor);
            }
          }
        sx = destinationPoint.x;
        sy = destinationPoint.y;
        dx = $.$$sub(sx, rx1);
        dy = $.$$sub(destinationPoint.y, t7);
        uRect = $.Rectangle$(sx, sy, sourceWidth, sourceHeight).union$1($.Rectangle$(dx, dy, destinationWidth, destinationHeight));
        destinationContext.setTransform$6(1, 0, 0, 1, 0, 0);
        destinationContext.clearRect$4(uRect.x, uRect.y, uRect.width, uRect.height);
        destinationContext.putImageData$3(destinationImageData, dx, dy);
        if ($.$$eq(this.hideObject, false) === true)
          destinationContext.drawImage$3(sourceContext.get$canvas(), sx, sy);
    }
  },
  GlowFilter$8: function(color, alpha, blurX, blurY, strength, inner, knockout, hideObject) {
    var t1, t2;
    t1 = this.blurX;
    t2 = $.getInterceptor$JSNumber(t1);
    if (t2.$lt(t1, 1) === true || $.$$lt(this.blurY, 1) === true)
      throw $.$$throw($.ArgumentError$("Error #9004: The minimum blur size is 1."));
    if (t2.$gt(t1, 128) === true || $.$$gt(this.blurY, 128) === true)
      throw $.$$throw($.ArgumentError$("Error #9004: The maximum blur size is 128."));
  }
};

$$.DisplayObject = {"": "EventDispatcher;_alpha>,_parent>",
  get$x: function() {
    return this._x;
  },
  get$y: function() {
    return this._y;
  },
  get$visible: function() {
    return this._visible;
  },
  get$mask: function() {
    return this._mask;
  },
  get$parent: function() {
    return this._parent;
  },
  get$root: function() {
    var currentObject, currentObject0;
    for (currentObject = this; currentObject0 = currentObject.get$_parent(), !(currentObject0 == null); currentObject = currentObject0)
      ;
    return currentObject;
  },
  get$stage: function() {
    var root = this.get$root();
    if (typeof root === "object" && root !== null && !!root.$isStage)
      return root;
    return;
  },
  set$x: function(value) {
    this._x = value;
    this._transformationMatrixRefresh = true;
  },
  set$y: function(value) {
    this._y = value;
    this._transformationMatrixRefresh = true;
  },
  set$scaleX: function(value) {
    this._scaleX = value;
    this._transformationMatrixRefresh = true;
  },
  set$scaleY: function(value) {
    this._scaleY = value;
    this._transformationMatrixRefresh = true;
  },
  get$width: function() {
    return this.getBoundsTransformed$1(this.get$_transformationMatrix()).get$width();
  },
  get$height: function() {
    return this.getBoundsTransformed$1(this.get$_transformationMatrix()).get$height();
  },
  set$width: function(value) {
    var normalWidth, t2, t1;
    this.set$scaleX(1);
    normalWidth = this.get$width();
    if (typeof normalWidth !== "number")
      return this.set$width$bailout(2, value, normalWidth);
    if (!(normalWidth === 0)) {
      if (typeof value !== "number")
        return this.set$width$bailout(1, value);
      t2 = value / normalWidth;
      t1 = t2;
    } else
      t1 = 1;
    this.set$scaleX(t1);
  },
  set$width$bailout: function(state0, value, normalWidth) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        this.set$scaleX(1);
        normalWidth = this.get$width();
      case 2:
        var t2, t1;
        state0 = 0;
        if ($.$$eq(normalWidth, 0) !== true) {
          t2 = $.$$div(value, normalWidth);
          t1 = t2;
        } else
          t1 = 1;
        this.set$scaleX(t1);
    }
  },
  set$height: function(value) {
    var normalHeight;
    this.set$scaleY(1);
    normalHeight = this.get$height();
    this.set$scaleY($.$$eq(normalHeight, 0) !== true ? $.$$div(value, normalHeight) : 1);
  },
  removeFromParent$0: function() {
    var t1 = this._parent;
    if (!(t1 == null))
      t1.removeChild$1(this);
  },
  get$_transformationMatrix: function() {
    var t1, t2, t3, t4, t5, t6, t8, cosR, sinR, a, b, c, d, tx, t9;
    if (this._transformationMatrixRefresh) {
      this._transformationMatrixRefresh = false;
      t1 = this._rotation;
      t2 = this._pivotX;
      t3 = this._pivotY;
      if (t1 === 0) {
        t1 = this._transformationMatrixPrivate;
        t4 = this._scaleX;
        t5 = this._scaleY;
        t6 = this._x;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        if (typeof t6 !== "number")
          return this.get$_transformationMatrix$bailout(1, t1, t2, t4, t5, t6, t3);
        t6 -= t2 * t4;
        t8 = this._y;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        if (typeof t8 !== "number")
          return this.get$_transformationMatrix$bailout(2, t1, 0, t4, t5, t6, t3, t8);
        t1.setTo$6(t4, 0, 0, t5, t6, t8 - t3 * t5);
      } else {
        cosR = $.cos(t1);
        if (typeof cosR !== "number")
          return this.get$_transformationMatrix$bailout(3, t1, t2, 0, 0, 0, t3, 0, cosR);
        sinR = $.sin(t1);
        if (typeof sinR !== "number")
          return this.get$_transformationMatrix$bailout(4, 0, t2, 0, 0, 0, t3, 0, cosR, sinR);
        t5 = this._scaleX;
        if (typeof t5 !== "number")
          return this.get$_transformationMatrix$bailout(5, 0, t2, 0, t5, 0, t3, 0, cosR, sinR);
        a = t5 * cosR;
        b = t5 * sinR;
        t5 = this._scaleY;
        if (typeof t5 !== "number")
          return this.get$_transformationMatrix$bailout(7, 0, t2, 0, t5, 0, t3, 0, cosR, sinR, a, b);
        c = -t5 * sinR;
        d = t5 * cosR;
        t5 = this._x;
        if (typeof t5 !== "number")
          return this.get$_transformationMatrix$bailout(9, 0, t2, 0, t5, 0, t3, 0, 0, 0, a, b, c, d);
        tx = t5 - t2 * a - t3 * c;
        t9 = this._y;
        if (typeof t9 !== "number")
          return this.get$_transformationMatrix$bailout(10, 0, t2, 0, 0, 0, t3, 0, 0, 0, a, b, c, d, tx, t9);
        this._transformationMatrixPrivate.setTo$6(a, b, c, d, tx, t9 - t2 * b - t3 * d);
      }
    }
    return this._transformationMatrixPrivate;
  },
  get$_transformationMatrix$bailout: function(state0, t1, t2, t4, t5, t6, t3, t8, cosR, sinR, a, b, c, d, tx, t11) {
    switch (state0) {
      case 0:
      default:
        var t10, ty;
        if (state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && this._transformationMatrixRefresh)
          switch (state0) {
            case 0:
              this._transformationMatrixRefresh = false;
              t1 = this._rotation;
              t2 = this._pivotX;
              t3 = this._pivotY;
            default:
              if (state0 === 2 || state0 === 1 || state0 === 0 && t1 === 0)
                switch (state0) {
                  case 0:
                    t1 = this._transformationMatrixPrivate;
                    t4 = this._scaleX;
                    t5 = this._scaleY;
                    t6 = this._x;
                  case 1:
                    state0 = 0;
                    if (typeof t4 !== "number")
                      throw $.iae(t4);
                    t6 = $.$$sub(t6, t2 * t4);
                    t8 = this._y;
                  case 2:
                    state0 = 0;
                    t10 = this._scaleY;
                    if (typeof t10 !== "number")
                      throw $.iae(t10);
                    t1.setTo$6(t4, 0, 0, t5, t6, $.$$sub(t8, t3 * t10));
                }
              else
                switch (state0) {
                  case 0:
                    cosR = $.cos(t1);
                  case 3:
                    state0 = 0;
                    sinR = $.sin(t1);
                  case 4:
                    state0 = 0;
                    t5 = this._scaleX;
                  case 5:
                    state0 = 0;
                    a = $.$$mul(t5, cosR);
                    t5 = this._scaleX;
                  case 6:
                    state0 = 0;
                    b = $.$$mul(t5, sinR);
                    t5 = this._scaleY;
                  case 7:
                    state0 = 0;
                    t5 = $.$$negate(t5);
                    if (typeof sinR !== "number")
                      throw $.iae(sinR);
                    c = t5 * sinR;
                    t5 = this._scaleY;
                  case 8:
                    state0 = 0;
                    d = $.$$mul(t5, cosR);
                    t5 = this._x;
                  case 9:
                    state0 = 0;
                    if (typeof a !== "number")
                      throw $.iae(a);
                    tx = $.$$sub($.$$sub(t5, t2 * a), t3 * c);
                    t11 = this._y;
                  case 10:
                    state0 = 0;
                    if (typeof b !== "number")
                      throw $.iae(b);
                    t11 = $.$$sub(t11, t2 * b);
                    if (typeof d !== "number")
                      throw $.iae(d);
                    ty = $.$$sub(t11, t3 * d);
                    this._transformationMatrixPrivate.setTo$6(a, b, c, d, tx, ty);
                }
          }
        return this._transformationMatrixPrivate;
    }
  },
  getBoundsTransformed$2: function(matrix, returnRectangle) {
    if (returnRectangle == null)
      returnRectangle = $.Rectangle$zero();
    returnRectangle.set$x(matrix.get$tx());
    returnRectangle.set$y(matrix.get$ty());
    returnRectangle.set$width(0);
    returnRectangle.set$height(0);
    return returnRectangle;
  },
  getBoundsTransformed$1: function(matrix) {
    return this.getBoundsTransformed$2(matrix, null);
  },
  hitTestInput$2: function(localX, localY) {
    if ($.contains(this.getBoundsTransformed$1(this._tmpMatrixIdentity), localX, localY) === true)
      return this;
    return;
  },
  globalToLocal$1: function(globalPoint) {
    var displayObject, t1;
    this._tmpMatrix.identity$0();
    for (displayObject = this; t1 = this._tmpMatrix, !(displayObject == null); displayObject = displayObject.get$_parent())
      t1.concat$1(displayObject.get$_transformationMatrix());
    t1.invert$0();
    return this._tmpMatrix.transformPoint$1(globalPoint);
  },
  dispatchEvent$1: function($event) {
    var ancestor, ancestors, t1, t2, i;
    if ($event.get$captures() === true || $event.get$bubbles() === true) {
      for (ancestor = this._parent, ancestors = null; !(ancestor == null); ancestor = ancestor.get$_parent())
        if (ancestor.hasEventListener$1($event.get$type())) {
          if (ancestors == null)
            ancestors = $.List_List(0);
          $.add(ancestors, ancestor);
        }
    } else
      ancestors = null;
    if ($event.get$captures() === true && !(ancestors == null)) {
      t1 = $.getInterceptor$JSArrayJSString(ancestors);
      t2 = t1.get$length(ancestors);
      if (typeof t2 !== "number")
        return this.dispatchEvent$1$bailout1(1, $event, ancestors, t1, t2);
      i = t2 - 1;
      for (; i >= 0; --i) {
        t2 = $event.get$stopsPropagation();
        if (typeof t2 !== "boolean")
          return this.dispatchEvent$1$bailout1(2, $event, ancestors, t1, $.CONSTANT6, t2, i);
        if (!t2)
          t1.$index(ancestors, i)._dispatchEventInternal$4($event, this, t1.$index(ancestors, i), 1);
      }
    }
    t1 = $event.get$stopsPropagation();
    if (typeof t1 !== "boolean")
      return this.dispatchEvent$1$bailout1(3, $event, ancestors, t1);
    if (!t1)
      this._dispatchEventInternal$4($event, this, this, 2);
    if ($event.get$bubbles() === true && !(ancestors == null)) {
      t1 = $.getInterceptor$JSArrayJSString(ancestors);
      i = 0;
      while (true) {
        t2 = t1.get$length(ancestors);
        if (typeof t2 !== "number")
          return this.dispatchEvent$1$bailout1(4, $event, ancestors, t1, t2, 0, i);
        if (!(i < t2))
          break;
        t2 = $event.get$stopsPropagation();
        if (typeof t2 !== "boolean")
          return this.dispatchEvent$1$bailout1(5, $event, ancestors, t1, t2, 0, i);
        if (!t2)
          t1.$index(ancestors, i)._dispatchEventInternal$4($event, this, t1.$index(ancestors, i), 3);
        ++i;
      }
    }
  },
  dispatchEvent$1$bailout1: function(state0, $event, ancestors, t1, t2, t3, i) {
    switch (state0) {
      case 0:
        if ($event.get$captures() === true || $event.get$bubbles() === true) {
          for (ancestor = this._parent, ancestors = null; !(ancestor == null); ancestor = ancestor.get$_parent())
            if (ancestor.hasEventListener$1($event.get$type())) {
              if (ancestors == null)
                ancestors = $.List_List(0);
              $.add(ancestors, ancestor);
            }
        } else
          ancestors = null;
      default:
        if (state0 === 2 || state0 === 1 || state0 === 0 && $event.get$captures() === true && !(ancestors == null))
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$JSArrayJSString(ancestors);
              t2 = t1.get$length(ancestors);
            case 1:
              state0 = 0;
              i = $.$$sub(t2, 1);
            case 2:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t2 = $.getInterceptor$JSNumber(i);
                      if (!(t2.$ge(i, 0) === true))
                        break L0;
                      t3 = $event.get$stopsPropagation();
                    case 2:
                      state0 = 0;
                      if ($.$$eq(t3, false) === true)
                        t1.$index(ancestors, i)._dispatchEventInternal$4($event, this, t1.$index(ancestors, i), 1);
                      i = t2.$sub(i, 1);
                  }
          }
        t1 = $event.get$stopsPropagation();
      case 3:
        state0 = 0;
        if ($.$$eq(t1, false) === true)
          this._dispatchEventInternal$4($event, this, this, 2);
      case 4:
      case 5:
        var ancestor;
        if (state0 === 5 || state0 === 4 || state0 === 0 && $event.get$bubbles() === true && !(ancestors == null))
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$JSArrayJSString(ancestors);
              i = 0;
            default:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      t2 = t1.get$length(ancestors);
                    case 4:
                      state0 = 0;
                      if (!$.CONSTANT.$lt(i, t2))
                        break L1;
                      t2 = $event.get$stopsPropagation();
                    case 5:
                      state0 = 0;
                      if ($.$$eq(t2, false) === true)
                        t1.$index(ancestors, i)._dispatchEventInternal$4($event, this, t1.$index(ancestors, i), 3);
                      ++i;
                  }
          }
    }
  },
  _setParent$1: function(value) {
    var ancestor;
    for (ancestor = value; !(ancestor == null); ancestor = ancestor.get$_parent())
      if ($.$$eq(ancestor, this) === true)
        throw $.$$throw($.ArgumentError$("Error #2150: An object cannot be added as a child to one of it's children (or children's children, etc.)."));
    this._parent = value;
  },
  DisplayObject$0: function() {
    this._transformationMatrixPrivate = $.Matrix$fromIdentity();
    this._transformationMatrixRefresh = true;
    this._tmpMatrix = $.Matrix$fromIdentity();
    this._tmpMatrixIdentity = $.Matrix$fromIdentity();
  }
};

$$.InteractiveObject = {"": "DisplayObject;",
  get$onMouseOut: function() {
    return $.CONSTANT31.forTarget$1(this);
  },
  get$onMouseMove: function() {
    return $.CONSTANT33.forTarget$1(this);
  },
  get$onMouseDown: function() {
    return $.CONSTANT37.forTarget$1(this);
  },
  get$onMouseUp: function() {
    return $.CONSTANT35.forTarget$1(this);
  },
  get$onMouseWheel: function() {
    return $.CONSTANT29.forTarget$1(this);
  },
  get$onTouchMove: function() {
    return $.CONSTANT22.forTarget$1(this);
  },
  get$onTouchEnd: function() {
    return $.CONSTANT24.forTarget$1(this);
  },
  get$onTouchCancel: function() {
    return $.CONSTANT18.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT14.forTarget$1(this);
  },
  get$onKeyDown: function() {
    return $.CONSTANT16.forTarget$1(this);
  },
  $isInteractiveObject: true
};

$$.DisplayObjectContainer = {"": "InteractiveObject;",
  addChild$1: function(child) {
    var t1, t2;
    t1 = $.$$eq(child.get$parent(), this);
    t2 = this._children;
    if (t1 === true) {
      $.CONSTANT1.removeAt$1(t2, $.CONSTANT1.indexOf$1(t2, child));
      t2.push(child);
    } else
      this.addChildAt$2(child, t2.length);
  },
  addChildAt$2: function(child, index) {
    var t1, t2;
    if (typeof index !== "number")
      return this.addChildAt$2$bailout(1, child, index);
    if (index < 0 && index > this._children.length)
      throw $.$$throw($.ArgumentError$("Error #2006: The supplied index is out of bounds."));
    if ($.$$eq(child, this) === true)
      throw $.$$throw($.ArgumentError$("Error #2024: An object cannot be added as a child of itself."));
    t1 = $.$$eq(child.get$parent(), this);
    t2 = this._children;
    if (t1 === true) {
      $.CONSTANT1.removeAt$1(t2, $.CONSTANT1.indexOf$1(t2, child));
      if (index > t2.length)
        --index;
      $.CONSTANT1.insertRange$3(t2, index, 1, child);
    } else {
      child.removeFromParent$0();
      child._setParent$1(this);
      $.CONSTANT1.insertRange$3(t2, index, 1, child);
      child.dispatchEvent$1($.Event$("added", true));
      if (!(this.get$stage() == null))
        this._dispatchEventOnChildren$2(child, $.Event$("addedToStage", false));
    }
  },
  addChildAt$2$bailout: function(state0, child, index) {
    var t1, t2, t3;
    t1 = $.getInterceptor$JSNumber(index);
    if (t1.$lt(index, 0) === true && t1.$gt(index, this._children.length) === true)
      throw $.$$throw($.ArgumentError$("Error #2006: The supplied index is out of bounds."));
    if ($.$$eq(child, this) === true)
      throw $.$$throw($.ArgumentError$("Error #2024: An object cannot be added as a child of itself."));
    t2 = $.$$eq(child.get$parent(), this);
    t3 = this._children;
    if (t2 === true) {
      $.CONSTANT1.removeAt$1(t3, $.CONSTANT1.indexOf$1(t3, child));
      $.CONSTANT1.insertRange$3(t3, t1.$gt(index, t3.length) === true ? t1.$sub(index, 1) : index, 1, child);
    } else {
      child.removeFromParent$0();
      child._setParent$1(this);
      $.CONSTANT1.insertRange$3(t3, index, 1, child);
      child.dispatchEvent$1($.Event$("added", true));
      if (!(this.get$stage() == null))
        this._dispatchEventOnChildren$2(child, $.Event$("addedToStage", false));
    }
  },
  removeChild$1: function(child) {
    var childIndex = $.CONSTANT1.indexOf$1(this._children, child);
    if ($.$$eq(childIndex, -1) === true)
      throw $.$$throw($.ArgumentError$("Error #2025: The supplied DisplayObject must be a child of the caller."));
    this.removeChildAt$1(childIndex);
  },
  removeChildAt$1: function(index) {
    var t1, child;
    t1 = $.getInterceptor$JSNumber(index);
    if (t1.$lt(index, 0) === true && t1.$ge(index, this._children.length) === true)
      throw $.$$throw($.ArgumentError$("Error #2006: The supplied index is out of bounds."));
    t1 = this._children;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    child = t1[index];
    child.dispatchEvent$1($.Event$("removed", true));
    if (!(this.get$stage() == null))
      this._dispatchEventOnChildren$2(child, $.Event$("removedFromStage", false));
    child._setParent$1(null);
    $.CONSTANT1.removeAt$1(t1, index);
  },
  getBoundsTransformed$2: function(matrix, returnRectangle) {
    var t1, left, $top, right, bottom, i, child, rectangle, t2;
    if (returnRectangle == null)
      returnRectangle = $.Rectangle$zero();
    t1 = this._children;
    if (t1.length === 0)
      return $.DisplayObject.prototype.getBoundsTransformed$2.call(this, matrix, returnRectangle);
    for (left = (1/0), $top = (1/0), right = (-1/0), bottom = (-1/0), i = 0; i < t1.length; ++i) {
      child = t1[i];
      this._tmpMatrix.copyFromAndConcat$2(child.get$_transformationMatrix(), matrix);
      rectangle = child.getBoundsTransformed$2(this._tmpMatrix, returnRectangle);
      t2 = rectangle.get$left();
      if (typeof t2 !== "number")
        return this.getBoundsTransformed$2$bailout1(1, matrix, t1, left, $top, right, bottom, rectangle, i, t2, returnRectangle);
      if (t2 < left) {
        left = rectangle.get$left();
        if (typeof left !== "number")
          return this.getBoundsTransformed$2$bailout1(2, matrix, t1, left, $top, right, bottom, rectangle, i, 0, returnRectangle);
      }
      t2 = rectangle.get$top();
      if (typeof t2 !== "number")
        return this.getBoundsTransformed$2$bailout1(3, matrix, t1, left, $top, right, bottom, rectangle, i, t2, returnRectangle);
      if (t2 < $top) {
        $top = rectangle.get$top();
        if (typeof $top !== "number")
          return this.getBoundsTransformed$2$bailout1(4, matrix, t1, left, $top, right, bottom, rectangle, i, 0, returnRectangle);
      }
      t2 = rectangle.get$right();
      if (typeof t2 !== "number")
        return this.getBoundsTransformed$2$bailout1(5, matrix, t1, left, $top, right, bottom, rectangle, i, t2, returnRectangle);
      if (t2 > right) {
        right = rectangle.get$right();
        if (typeof right !== "number")
          return this.getBoundsTransformed$2$bailout1(6, matrix, t1, left, $top, right, bottom, rectangle, i, 0, returnRectangle);
      }
      t2 = rectangle.get$bottom();
      if (typeof t2 !== "number")
        return this.getBoundsTransformed$2$bailout1(7, matrix, t1, left, $top, right, bottom, rectangle, i, t2, returnRectangle);
      if (t2 > bottom) {
        bottom = rectangle.get$bottom();
        if (typeof bottom !== "number")
          return this.getBoundsTransformed$2$bailout1(8, matrix, t1, left, $top, right, bottom, 0, i, 0, returnRectangle);
      }
    }
    returnRectangle.set$x(left);
    returnRectangle.set$y($top);
    returnRectangle.set$width(right - left);
    returnRectangle.set$height(bottom - $top);
    return returnRectangle;
  },
  getBoundsTransformed$2$bailout1: function(state0, matrix, t1, left, $top, right, bottom, rectangle, i, t2, returnRectangle) {
    switch (state0) {
      case 0:
        if (returnRectangle == null)
          returnRectangle = $.Rectangle$zero();
        t1 = this._children;
        if (t1.length === 0)
          return $.DisplayObject.prototype.getBoundsTransformed$2.call(this, matrix, returnRectangle);
        left = (1/0);
        $top = (1/0);
        right = (-1/0);
        bottom = (-1/0);
        i = 0;
      default:
        var child;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < t1.length))
                  break L0;
                child = t1[i];
                this._tmpMatrix.copyFromAndConcat$2(child.get$_transformationMatrix(), matrix);
                rectangle = child.getBoundsTransformed$2(this._tmpMatrix, returnRectangle);
                t2 = rectangle.get$left();
              case 1:
                state0 = 0;
              case 2:
                if (state0 === 2 || state0 === 0 && $.$$lt(t2, left) === true)
                  switch (state0) {
                    case 0:
                      left = rectangle.get$left();
                    case 2:
                      state0 = 0;
                  }
                t2 = rectangle.get$top();
              case 3:
                state0 = 0;
              case 4:
                if (state0 === 4 || state0 === 0 && $.$$lt(t2, $top) === true)
                  switch (state0) {
                    case 0:
                      $top = rectangle.get$top();
                    case 4:
                      state0 = 0;
                  }
                t2 = rectangle.get$right();
              case 5:
                state0 = 0;
              case 6:
                if (state0 === 6 || state0 === 0 && $.$$gt(t2, right) === true)
                  switch (state0) {
                    case 0:
                      right = rectangle.get$right();
                    case 6:
                      state0 = 0;
                  }
                t2 = rectangle.get$bottom();
              case 7:
                state0 = 0;
              case 8:
                if (state0 === 8 || state0 === 0 && $.$$gt(t2, bottom) === true)
                  switch (state0) {
                    case 0:
                      bottom = rectangle.get$bottom();
                    case 8:
                      state0 = 0;
                  }
                ++i;
            }
        returnRectangle.set$x(left);
        returnRectangle.set$y($top);
        returnRectangle.set$width($.$$sub(right, left));
        returnRectangle.set$height($.$$sub(bottom, $top));
        return returnRectangle;
    }
  },
  getBoundsTransformed$1: function(matrix) {
    return this.getBoundsTransformed$2(matrix, null);
  },
  hitTestInput$2: function(localX, localY) {
    var t1, i, hit, child, matrix, t2, deltaX, deltaY, t6, t8, childX, t10, t12, displayObject;
    if (typeof localX !== "number")
      return this.hitTestInput$2$bailout1(1, localX, localY);
    if (typeof localY !== "number")
      return this.hitTestInput$2$bailout1(1, localX, localY);
    for (t1 = this._children, i = t1.length - 1, hit = null; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      child = t1[i];
      if (child.get$visible() === true) {
        matrix = child.get$_transformationMatrix();
        t2 = matrix.get$tx();
        if (typeof t2 !== "number")
          return this.hitTestInput$2$bailout1(2, localX, localY, i, $.CONSTANT6, hit, child, t1, matrix, t2, $.CONSTANT6);
        deltaX = localX - t2;
        t2 = matrix.get$ty();
        if (typeof t2 !== "number")
          return this.hitTestInput$2$bailout1(3, localX, localY, i, $.CONSTANT6, hit, child, t1, matrix, t2, $.CONSTANT6, deltaX);
        deltaY = localY - t2;
        t2 = matrix.get$d();
        if (typeof t2 !== "number")
          return this.hitTestInput$2$bailout1(4, localX, localY, i, $.CONSTANT6, hit, child, t1, matrix, t2, $.CONSTANT6, deltaX, deltaY);
        t2 *= deltaX;
        t6 = matrix.get$c();
        if (typeof t6 !== "number")
          return this.hitTestInput$2$bailout1(5, localX, localY, i, $.CONSTANT6, hit, child, t1, matrix, t2, $.CONSTANT6, deltaX, deltaY, t6);
        t2 -= t6 * deltaY;
        t8 = matrix.get$det();
        if (typeof t8 !== "number")
          return this.hitTestInput$2$bailout1(6, localX, localY, i, $.CONSTANT6, hit, child, t1, matrix, t2, $.CONSTANT6, deltaX, deltaY, 0, t8);
        childX = t2 / t8;
        t8 = matrix.get$a();
        if (typeof t8 !== "number")
          return this.hitTestInput$2$bailout1(7, localX, localY, i, $.CONSTANT6, hit, child, t1, matrix, 0, $.CONSTANT6, deltaX, deltaY, 0, t8, childX);
        t8 *= deltaY;
        t10 = matrix.get$b();
        if (typeof t10 !== "number")
          return this.hitTestInput$2$bailout1(8, localX, localY, i, $.CONSTANT6, hit, child, t1, matrix, 0, $.CONSTANT6, deltaX, 0, 0, t8, childX, t10);
        t8 -= t10 * deltaX;
        t12 = matrix.get$det();
        if (typeof t12 !== "number")
          return this.hitTestInput$2$bailout1(9, localX, localY, i, $.CONSTANT6, hit, child, t1, 0, 0, $.CONSTANT6, 0, 0, 0, t8, childX, 0, t12);
        displayObject = child.hitTestInput$2(childX, t8 / t12);
        if (!(displayObject == null)) {
          if (typeof displayObject === "object" && displayObject !== null && !!displayObject.$isInteractiveObject)
            if (displayObject.mouseEnabled)
              return this._mouseChildren ? displayObject : this;
          hit = this;
        }
      }
    }
    return hit;
  },
  hitTestInput$2$bailout1: function(state0, localX, localY, i, t3, hit, child, t1, matrix, t4, t2, deltaX, deltaY, t8, t10, childX, t12, t14) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._children;
        i = t1.length - 1;
        t2 = $.getInterceptor$JSNumber(localX);
        t3 = $.getInterceptor$JSNumber(localY);
        hit = null;
      default:
        var displayObject;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i >= 0))
                  break L0;
                if (i >= t1.length)
                  throw $.ioore(i);
                child = t1[i];
              default:
                if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && child.get$visible() === true)
                  switch (state0) {
                    case 0:
                      matrix = child.get$_transformationMatrix();
                      t4 = matrix.get$tx();
                    case 2:
                      state0 = 0;
                      deltaX = t2.$sub(localX, t4);
                      t4 = matrix.get$ty();
                    case 3:
                      state0 = 0;
                      deltaY = t3.$sub(localY, t4);
                      t4 = matrix.get$d();
                    case 4:
                      state0 = 0;
                      t4 = $.$$mul(t4, deltaX);
                      t8 = matrix.get$c();
                    case 5:
                      state0 = 0;
                      t4 = $.$$sub(t4, $.$$mul(t8, deltaY));
                      t10 = matrix.get$det();
                    case 6:
                      state0 = 0;
                      childX = $.$$div(t4, t10);
                      t10 = matrix.get$a();
                    case 7:
                      state0 = 0;
                      t10 = $.$$mul(t10, deltaY);
                      t12 = matrix.get$b();
                    case 8:
                      state0 = 0;
                      t10 = $.$$sub(t10, $.$$mul(t12, deltaX));
                      t14 = matrix.get$det();
                    case 9:
                      state0 = 0;
                      displayObject = child.hitTestInput$2(childX, $.$$div(t10, t14));
                      if (!(displayObject == null)) {
                        if (typeof displayObject === "object" && displayObject !== null && !!displayObject.$isInteractiveObject)
                          if (displayObject.mouseEnabled)
                            return this._mouseChildren ? displayObject : this;
                        hit = this;
                      }
                  }
                --i;
            }
        return hit;
    }
  },
  render$1: function(renderState) {
    var t1, i, child;
    for (t1 = this._children, i = 0; i < t1.length; ++i) {
      child = t1[i];
      if (child.get$visible() === true)
        renderState.renderDisplayObject$1(child);
    }
  },
  _dispatchEventOnChildren$2: function(displayObject, $event) {
    var children, i;
    displayObject.dispatchEvent$1($event);
    if (typeof displayObject === "object" && displayObject !== null && !!displayObject.$isDisplayObjectContainer) {
      children = $.List_List$from(displayObject._children);
      for (i = 0; i < children.length; ++i)
        this._dispatchEventOnChildren$2(children[i], $event);
    }
  },
  $isDisplayObjectContainer: true
};

$$._MouseButton = {"": "Object;target=,buttonDown=,clickTime=,clickCount=,mouseDownEventType>,mouseUpEventType>,mouseClickEventType>,mouseDoubleClickEventType>"};

$$._Touch = {"": "Object;touchPointID>,target=,primaryTouchPoint>"};

$$.Stage = {"": "DisplayObjectContainer;_canvas,_context,_focus,_renderState,_renderMode,_mouseCursor,_mousePosition,_mouseTarget,_mouseButtons,_touches,_mouseEvent,_keyboardEvent,_touchEvent,_touchEventSubscriptions,_children,_mouseChildren,_tabChildren,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_rotation,_transformationMatrixPrivate,_transformationMatrixRefresh,_alpha,_visible,_mask,_name,_parent,_tmpMatrix,_tmpMatrixIdentity,_eventStreams",
  get$focus: function() {
    return this._focus;
  },
  focus$0: function() {
    return this.get$focus().call$0();
  },
  _throwStageException$0: function() {
    throw $.$$throw($.UnsupportedError$("Error #2071: The Stage class does not implement this property or method."));
  },
  set$x: function(value) {
    this._throwStageException$0();
  },
  set$y: function(value) {
    this._throwStageException$0();
  },
  set$scaleX: function(value) {
    this._throwStageException$0();
  },
  set$scaleY: function(value) {
    this._throwStageException$0();
  },
  set$width: function(value) {
    this._throwStageException$0();
  },
  set$height: function(value) {
    this._throwStageException$0();
  },
  materialize$0: function() {
    var t1 = this._renderMode;
    if (typeof t1 !== "string")
      return this.materialize$0$bailout(1, t1);
    if (t1 === "auto" || t1 === "once") {
      this._renderState.reset$0();
      this.render$1(this._renderState);
      t1 = this._renderMode;
      if (typeof t1 !== "string")
        return this.materialize$0$bailout(3, t1);
      if (t1 === "once")
        this._renderMode = "stop";
    }
  },
  materialize$0$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
        t1 = this._renderMode;
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$eq(t1, "auto") !== true)
          switch (state0) {
            case 0:
              t1 = this._renderMode;
            case 2:
              state0 = 0;
              t3 = $.$$eq(t1, "once") === true;
              t1 = t3;
          }
        else
          t1 = true;
      case 3:
        var t3;
        if (state0 === 3 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              this._renderState.reset$0();
              this.render$1(this._renderState);
              t1 = this._renderMode;
            case 3:
              state0 = 0;
              if ($.$$eq(t1, "once") === true)
                this._renderMode = "stop";
          }
    }
  },
  _onMouseCursorChanged$1: function(action) {
    var t1 = $.Mouse__getCssStyle(this._mouseCursor);
    this._canvas.get$style().set$cursor(t1);
  },
  get$_onMouseCursorChanged: function() {
    return new $.BoundClosure$1(this, "_onMouseCursorChanged$1");
  },
  _onMouseEvent$1: function($event) {
    var clientRect, time, button, stagePoint, t1, mouseButton, target, mouseCursor, t2, t3, t4, t5, mouseEventType, isClick, isDoubleClick, localPoint;
    $event.preventDefault$0();
    clientRect = this._canvas.getBoundingClientRect$0();
    time = $.DateTime$_now().millisecondsSinceEpoch;
    button = $event.get$button();
    stagePoint = $.Point$($.$$sub($event.get$clientX(), clientRect.get$left()), $.$$sub($event.get$clientY(), clientRect.get$top()));
    t1 = $.getInterceptor$JSNumber(button);
    if (t1.$lt(button, 0) === true || t1.$gt(button, 2) === true)
      return;
    if ($.$$eq($event.get$type(), "mousemove") === true && this._mousePosition.equals$1(stagePoint) === true)
      return;
    mouseButton = $.$$index(this._mouseButtons, button);
    this._mousePosition = stagePoint;
    target = $.$$eq($event.get$type(), "mouseout") !== true ? $.propertyTypeCast(this.hitTestInput$2(stagePoint.x, stagePoint.y), "$isInteractiveObject") : null;
    mouseCursor = typeof target === "object" && target !== null && !!target.$isSprite ? target.useHandCursor === true ? "button" : "arrow" : "arrow";
    if (typeof target === "object" && target !== null && !!target.$isSimpleButton)
      mouseCursor = target.useHandCursor === true ? "button" : mouseCursor;
    if ($.$$eq(this._mouseCursor, mouseCursor) !== true) {
      this._mouseCursor = mouseCursor;
      t1 = $.Mouse__getCssStyle(mouseCursor);
      this._canvas.get$style().set$cursor(t1);
    }
    t1 = this._mouseTarget;
    if (!(t1 == null) && $.$$eq(t1, target) !== true) {
      t1 = this._mouseTarget;
      t2 = mouseButton.get$buttonDown();
      t3 = !(this._mouseTarget.get$stage() == null) ? this._mouseTarget.globalToLocal$1(stagePoint) : $.Point$zero();
      t4 = this._mouseEvent;
      t4._reset$2("mouseOut", true);
      t4.set$_localPoint(t3);
      t4.set$_stagePoint(stagePoint);
      t4.set$_buttonDown(t2);
      t1.dispatchEvent$1(t4);
      this._mouseTarget = null;
    }
    t1 = $.getInterceptor(target);
    t2 = !(target == null);
    if (t2 && t1.$eq(target, this._mouseTarget) !== true) {
      t3 = mouseButton.get$buttonDown();
      t4 = target.globalToLocal$1(stagePoint);
      t5 = this._mouseEvent;
      t5._reset$2("mouseOver", true);
      t5.set$_localPoint(t4);
      t5.set$_stagePoint(stagePoint);
      t5.set$_buttonDown(t3);
      target.dispatchEvent$1(t5);
      this._mouseTarget = target;
    }
    if ($.$$eq($event.get$type(), "mousedown") === true) {
      mouseEventType = mouseButton.get$mouseDownEventType();
      if (t1.$eq(target, mouseButton.get$target()) !== true || $.$$gt(time, $.$$add(mouseButton.get$clickTime(), 500)) === true)
        mouseButton.set$clickCount(0);
      mouseButton.set$buttonDown(true);
      mouseButton.set$target(target);
      mouseButton.set$clickTime(time);
      mouseButton.set$clickCount($.$$add(mouseButton.get$clickCount(), 1));
    } else
      mouseEventType = null;
    if ($.$$eq($event.get$type(), "mouseup") === true) {
      mouseEventType = mouseButton.get$mouseUpEventType();
      mouseButton.set$buttonDown(false);
      isClick = $.$$eq(mouseButton.get$target(), target);
      isDoubleClick = isClick === true && $.isEven(mouseButton.get$clickCount()) === true && $.$$lt(time, $.$$add(mouseButton.get$clickTime(), 500)) === true;
    } else {
      isClick = false;
      isDoubleClick = false;
    }
    if ($.$$eq($event.get$type(), "mousemove") === true)
      mouseEventType = "mouseMove";
    if (!(mouseEventType == null) && t2) {
      localPoint = target.globalToLocal$1(stagePoint);
      t1 = mouseButton.get$clickCount();
      t2 = mouseButton.get$buttonDown();
      t3 = this._mouseEvent;
      t3._reset$2(mouseEventType, true);
      t3.set$_localPoint(localPoint);
      t3.set$_stagePoint(stagePoint);
      t3.set$_buttonDown(t2);
      t3.set$_clickCount(t1);
      target.dispatchEvent$1(t3);
      if (isClick === true)
        if (isDoubleClick && target.doubleClickEnabled) {
          t1 = mouseButton.get$buttonDown();
          t2 = this._mouseEvent;
          t2._reset$2(mouseButton.get$mouseDoubleClickEventType(), true);
          t2.set$_localPoint(localPoint);
          t2.set$_stagePoint(stagePoint);
          t2.set$_buttonDown(t1);
          target.dispatchEvent$1(t2);
        } else {
          t1 = mouseButton.get$buttonDown();
          t2 = this._mouseEvent;
          t2._reset$2(mouseButton.get$mouseClickEventType(), true);
          t2.set$_localPoint(localPoint);
          t2.set$_stagePoint(stagePoint);
          t2.set$_buttonDown(t1);
          target.dispatchEvent$1(t2);
        }
    }
  },
  get$_onMouseEvent: function() {
    return new $.BoundClosure$1(this, "_onMouseEvent$1");
  },
  _onMultitouchInputModeChanged$1: function(inputMode) {
    $.CONSTANT1.forEach$1(this._touchEventSubscriptions, new $.Stage__onMultitouchInputModeChanged_anon());
    $.Multitouch__initialize();
    if ($.$$eq($.Multitouch__inputMode, "touchPoint") === true)
      this._touchEventSubscriptions = [this._canvas.get$onTouchStart().listen$1(this.get$_onTouchEvent()), this._canvas.get$onTouchEnd().listen$1(this.get$_onTouchEvent()), this._canvas.get$onTouchMove().listen$1(this.get$_onTouchEvent()), this._canvas.get$onTouchEnter().listen$1(this.get$_onTouchEvent()), this._canvas.get$onTouchLeave().listen$1(this.get$_onTouchEvent()), this._canvas.get$onTouchCancel().listen$1(this.get$_onTouchEvent())];
  },
  get$_onMultitouchInputModeChanged: function() {
    return new $.BoundClosure$1(this, "_onMultitouchInputModeChanged$1");
  },
  _onTouchEvent$1: function($event) {
    var clientRect, t1, t2, identifier, stagePoint, target, t3, touch, t4, t5, t6, touchEventType;
    $event.preventDefault$0();
    clientRect = this._canvas.getBoundingClientRect$0();
    for (t1 = $.iterator($event.get$changedTouches()); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      identifier = t2.get$identifier();
      stagePoint = $.Point$($.$$sub(t2.get$clientX(), clientRect.get$left()), $.$$sub(t2.get$clientY(), clientRect.get$top()));
      target = $.propertyTypeCast(this.hitTestInput$2(stagePoint.x, stagePoint.y), "$isInteractiveObject");
      t2 = this._touches.containsKey$1(identifier);
      t3 = this._touches;
      touch = t2 === true ? $.$$index(t3, identifier) : $._Touch$(target, $.$$eq($.length(t3), 0));
      if (!(touch.get$target() == null) && $.$$eq(touch.get$target(), target) !== true) {
        t2 = touch.get$target();
        t3 = touch.get$primaryTouchPoint();
        t4 = touch.get$touchPointID();
        t5 = !(touch.get$target().get$stage() == null) ? touch.get$target().globalToLocal$1(stagePoint) : $.Point$zero();
        t6 = this._touchEvent;
        t6._reset$2("touchOut", true);
        t6.set$_localPoint(t5);
        t6.set$_stagePoint(stagePoint);
        t6.set$_touchPointID(t4);
        t6.set$_isPrimaryTouchPoint(t3);
        t2.dispatchEvent$1(t6);
        touch.set$target(null);
      }
      t2 = !(target == null);
      if (t2 && $.$$eq(target, touch.get$target()) !== true) {
        t3 = touch.get$primaryTouchPoint();
        t4 = touch.get$touchPointID();
        t5 = target.globalToLocal$1(stagePoint);
        t6 = this._touchEvent;
        t6._reset$2("touchOver", true);
        t6.set$_localPoint(t5);
        t6.set$_stagePoint(stagePoint);
        t6.set$_touchPointID(t4);
        t6.set$_isPrimaryTouchPoint(t3);
        target.dispatchEvent$1(t6);
        touch.set$target(target);
      }
      if ($.$$eq($event.get$type(), "touchstart") === true) {
        $.$$indexSet(this._touches, identifier, touch);
        touchEventType = "touchBegin";
      } else
        touchEventType = null;
      if ($.$$eq($event.get$type(), "touchend") === true) {
        $.remove(this._touches, identifier);
        touchEventType = "touchEnd";
      }
      if ($.$$eq($event.get$type(), "touchcancel") === true) {
        $.remove(this._touches, identifier);
        touchEventType = "touchCancel";
      }
      if ($.$$eq($event.get$type(), "touchmove") === true)
        touchEventType = "touchMove";
      if (!(touchEventType == null) && t2) {
        t2 = touch.get$primaryTouchPoint();
        t3 = touch.get$touchPointID();
        t4 = target.globalToLocal$1(stagePoint);
        t5 = this._touchEvent;
        t5._reset$2(touchEventType, true);
        t5.set$_localPoint(t4);
        t5.set$_stagePoint(stagePoint);
        t5.set$_touchPointID(t3);
        t5.set$_isPrimaryTouchPoint(t2);
        target.dispatchEvent$1(t5);
      }
    }
  },
  get$_onTouchEvent: function() {
    return new $.BoundClosure$1(this, "_onTouchEvent$1");
  },
  _onKeyEvent$1: function($event) {
    var keyboardEventType, t1, t2, t3, t4, t5, t6;
    $event.preventDefault$0();
    keyboardEventType = $.$$eq($event.get$type(), "keyup") === true ? "keyUp" : null;
    if ($.$$eq($event.get$type(), "keydown") === true)
      keyboardEventType = "keyDown";
    t1 = $event.get$keyCode();
    t2 = $event.get$charCode();
    t3 = $event.get$shiftKey();
    t4 = $event.get$ctrlKey();
    t5 = $event.get$altKey();
    t6 = this._keyboardEvent;
    t6._reset$2(keyboardEventType, true);
    t6.set$_altKey(t5);
    t6.set$_ctrlKey(t4);
    t6.set$_shiftKey(t3);
    t6.set$_charCode(t2);
    t6.set$_keyCode(t1);
    t6.set$_keyLocation(0);
    if ($.$$eq($event.get$keyLocation(), 1) === true)
      this._keyboardEvent.set$_keyLocation(1);
    if ($.$$eq($event.get$keyLocation(), 2) === true)
      this._keyboardEvent.set$_keyLocation(2);
    if ($.$$eq($event.get$keyLocation(), 3) === true)
      this._keyboardEvent.set$_keyLocation(3);
    if ($.$$eq($event.get$keyLocation(), 5) === true)
      this._keyboardEvent.set$_keyLocation(4);
    if ($.$$eq($event.get$keyLocation(), 4) === true)
      this._keyboardEvent.set$_keyLocation(4);
    t1 = this._focus;
    if (!(t1 == null))
      t1.dispatchEvent$1(this._keyboardEvent);
  },
  get$_onKeyEvent: function() {
    return new $.BoundClosure$1(this, "_onKeyEvent$1");
  },
  _onTextEvent$1: function($event) {
    var charCode, textEvent, t1;
    charCode = $.$$eq($event.get$charCode(), 0) !== true ? $event.get$charCode() : $event.get$keyCode();
    textEvent = $.TextEvent$("textInput", true);
    textEvent._text = $.String_String$fromCharCodes([charCode]);
    t1 = this._focus;
    if (!(t1 == null))
      t1.dispatchEvent$1(textEvent);
  },
  get$_onTextEvent: function() {
    return new $.BoundClosure$1(this, "_onTextEvent$1");
  },
  Stage$2: function($name, canvas) {
    this._name = $name;
    this._canvas = canvas;
    this._canvas.focus$0();
    this._context = canvas.get$context2d();
    this._renderState = $.RenderState$fromCanvasRenderingContext2D(this._context, null);
    this._renderMode = "auto";
    this._mouseCursor = "arrow";
    $.get$Mouse__onMouseCursorChanged().listen$1(this.get$_onMouseCursorChanged());
    this._mouseButtons = [$._MouseButton$("mouseDown", "mouseUp", "click", "doubleClick"), $._MouseButton$("middleMouseDown", "middleMouseUp", "middleClick", "middleClick"), $._MouseButton$("rightMouseDown", "rightMouseUp", "rightClick", "rightClick")];
    this._mouseTarget = null;
    this._mousePosition = $.Point$(0, 0);
    this._mouseEvent = $.MouseEvent$("click", true);
    this._canvas.get$onMouseDown().listen$1(this.get$_onMouseEvent());
    this._canvas.get$onMouseUp().listen$1(this.get$_onMouseEvent());
    this._canvas.get$onMouseMove().listen$1(this.get$_onMouseEvent());
    this._canvas.get$onMouseOut().listen$1(this.get$_onMouseEvent());
    this._canvas.get$onMouseWheel().listen$1(this.get$_onMouseEvent());
    this._touches = $.Map_Map();
    this._touchEvent = $.TouchEvent$("touchBegin", true);
    $.get$Multitouch__onInputModeChanged().listen$1(this.get$_onMultitouchInputModeChanged());
    this._onMultitouchInputModeChanged$1(null);
    this._keyboardEvent = $.KeyboardEvent$("keyDown", true);
    this._canvas.get$onKeyDown().listen$1(this.get$_onKeyEvent());
    this._canvas.get$onKeyUp().listen$1(this.get$_onKeyEvent());
    this._canvas.get$onKeyPress().listen$1(this.get$_onTextEvent());
  },
  $isStage: true
};

$$.Bitmap = {"": "DisplayObject;bitmapData,pixelSnapping,clipRectangle,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_rotation,_transformationMatrixPrivate,_transformationMatrixRefresh,_alpha,_visible,_mask,_name,_parent,_tmpMatrix,_tmpMatrixIdentity,_eventStreams",
  getBoundsTransformed$2: function(matrix, returnRectangle) {
    var t1, t2, t3, width, height;
    t1 = this.bitmapData;
    t2 = !(t1 == null);
    if (t2) {
      t3 = t1.get$width();
      if (typeof t3 !== "number")
        return this.getBoundsTransformed$2$bailout1(1, matrix, returnRectangle, t2, t1, t3);
      width = t3;
    } else
      width = 0;
    if (t2) {
      t1 = t1.get$height();
      if (typeof t1 !== "number")
        return this.getBoundsTransformed$2$bailout1(2, matrix, returnRectangle, 0, t1, 0, width);
      height = t1;
    } else
      height = 0;
    return $._getBoundsTransformedHelper(matrix, width, height, returnRectangle);
  },
  getBoundsTransformed$2$bailout1: function(state0, matrix, returnRectangle, t2, t1, t3, width) {
    switch (state0) {
      case 0:
        t1 = this.bitmapData;
        t2 = !(t1 == null);
      case 1:
        if (state0 === 1 || state0 === 0 && t2)
          switch (state0) {
            case 0:
              t3 = t1.get$width();
            case 1:
              state0 = 0;
              width = t3;
          }
        else
          width = 0;
      case 2:
        var height;
        if (state0 === 2 || state0 === 0 && t2)
          switch (state0) {
            case 0:
              t1 = t1.get$height();
            case 2:
              state0 = 0;
              height = t1;
          }
        else
          height = 0;
        return $._getBoundsTransformedHelper(matrix, width, height, returnRectangle);
    }
  },
  getBoundsTransformed$1: function(matrix) {
    return this.getBoundsTransformed$2(matrix, null);
  },
  hitTestInput$2: function(localX, localY) {
    var t1, t2;
    t1 = this.bitmapData;
    if (!(t1 == null))
      if (localX >= 0)
        if (localY >= 0) {
          t2 = t1.get$width();
          if (typeof t2 !== "number")
            return this.hitTestInput$2$bailout1(1, localX, localY, t2, t1);
          if (localX < t2) {
            t1 = t1.get$height();
            if (typeof t1 !== "number")
              return this.hitTestInput$2$bailout1(2, 0, localY, 0, t1);
            t1 = localY < t1;
          } else
            t1 = false;
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      return this;
    return;
  },
  hitTestInput$2$bailout1: function(state0, localX, localY, t2, t1) {
    switch (state0) {
      case 0:
        t1 = this.bitmapData;
      default:
        if (state0 === 2 || state0 === 1 || state0 === 0 && !(t1 == null))
          switch (state0) {
            case 0:
            default:
              if (state0 === 2 || state0 === 1 || state0 === 0 && localX >= 0)
                switch (state0) {
                  case 0:
                  default:
                    if (state0 === 2 || state0 === 1 || state0 === 0 && localY >= 0)
                      switch (state0) {
                        case 0:
                          t2 = t1.get$width();
                        case 1:
                          state0 = 0;
                        case 2:
                          if (state0 === 2 || state0 === 0 && $.CONSTANT6.$lt(localX, t2))
                            switch (state0) {
                              case 0:
                                t1 = t1.get$height();
                              case 2:
                                state0 = 0;
                                t1 = $.CONSTANT6.$lt(localY, t1);
                            }
                          else
                            t1 = false;
                      }
                    else
                      t1 = false;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        if (t1)
          return this;
        return;
    }
  },
  render$1: function(renderState) {
    var t1, t2;
    t1 = this.bitmapData;
    if (!(t1 == null)) {
      t2 = this.clipRectangle;
      if (t2 == null)
        t1.render$1(renderState);
      else
        t1.renderClipped$2(renderState, t2);
    }
  },
  Bitmap$2: function(bitmapData, pixelSnapping) {
    this.clipRectangle = null;
  }
};

$$.BitmapData = {"": "Object;_width,_height,_transparent,_element,_context,_frameMode,_frameOffsetX,_frameOffsetY,_frameX,_frameY,_frameWidth,_frameHeight",
  get$width: function() {
    return this._width;
  },
  get$height: function() {
    return this._height;
  },
  applyFilter$4: function(sourceBitmapData, sourceRect, destPoint, filter) {
    filter.apply$4(sourceBitmapData, sourceRect, this, destPoint);
  },
  render$1: function(renderState) {
    var t1, t2, t3, t4, t5, t6, t7;
    switch (this._frameMode) {
      case 0:
        renderState.get$context().drawImage$3(this._element, 0, 0);
        break;
      case 1:
        t1 = renderState.get$context();
        t2 = this._element;
        t3 = this._frameX;
        t4 = this._frameY;
        t5 = this._frameWidth;
        t6 = this._frameHeight;
        t1.drawImage$9(t2, t3, t4, t5, t6, this._frameOffsetX, this._frameOffsetY, t5, t6);
        break;
      case 2:
        t1 = renderState.get$context();
        t2 = this._frameOffsetX;
        t3 = this._frameOffsetY;
        t4 = this._frameHeight;
        t1.transform$6(0, -1, 1, 0, t2, $.$$add(t3, t4));
        t2 = renderState.get$context();
        t1 = this._element;
        t5 = this._frameX;
        t6 = this._frameY;
        t7 = this._frameWidth;
        t2.drawImage$9(t1, t5, t6, t4, t7, 0, 0, t4, t7);
        break;
    }
  },
  renderClipped$2: function(renderState, clipRectangle) {
    var fLeft, fTop, t1, fRight, t2, fBottom, t3, cLeft, t4, cTop, cRight, cBottom, iLeft, iTop, iRight, iBottom, iOffsetX, iOffsetY, iWidth, iHeight, t5;
    if ($.$$le(clipRectangle.get$width(), 0) === true || $.$$le(clipRectangle.get$height(), 0) === true)
      return;
    switch (this._frameMode) {
      case 0:
        renderState.get$context().drawImage$9(this._element, clipRectangle.get$x(), clipRectangle.get$y(), clipRectangle.get$width(), clipRectangle.get$height(), clipRectangle.get$x(), clipRectangle.get$y(), clipRectangle.get$width(), clipRectangle.get$height());
        break;
      case 1:
        fLeft = this._frameX;
        fTop = this._frameY;
        t1 = $.getInterceptor$JSNumber(fLeft);
        fRight = t1.$add(fLeft, this._frameWidth);
        t2 = $.getInterceptor$JSNumber(fTop);
        fBottom = t2.$add(fTop, this._frameHeight);
        t3 = this._frameOffsetX;
        cLeft = $.$$add(t1.$sub(fLeft, t3), clipRectangle.get$x());
        t4 = this._frameOffsetY;
        cTop = $.$$add(t2.$sub(fTop, t4), clipRectangle.get$y());
        cRight = $.$$add(cLeft, clipRectangle.get$width());
        cBottom = $.$$add(cTop, clipRectangle.get$height());
        iLeft = t1.$gt(fLeft, cLeft) === true ? fLeft : cLeft;
        iTop = t2.$gt(fTop, cTop) === true ? fTop : cTop;
        iRight = $.$$lt(fRight, cRight) === true ? fRight : cRight;
        iBottom = $.$$lt(fBottom, cBottom) === true ? fBottom : cBottom;
        iOffsetX = $.$$add($.$$sub(t3, fLeft), iLeft);
        iOffsetY = $.$$add($.$$sub(t4, fTop), iTop);
        iWidth = $.$$sub(iRight, iLeft);
        iHeight = $.$$sub(iBottom, iTop);
        if ($.$$gt(iWidth, 0) === true && $.$$gt(iHeight, 0) === true)
          renderState.get$context().drawImage$9(this._element, iLeft, iTop, iWidth, iHeight, iOffsetX, iOffsetY, iWidth, iHeight);
        break;
      case 2:
        fLeft = this._frameX;
        fTop = this._frameY;
        t1 = this._frameHeight;
        t2 = $.getInterceptor$JSNumber(fLeft);
        fRight = t2.$add(fLeft, t1);
        t3 = $.getInterceptor$JSNumber(fTop);
        fBottom = t3.$add(fTop, this._frameWidth);
        t4 = this._frameOffsetY;
        cLeft = $.$$sub($.$$add($.$$sub(t2.$add(fLeft, t4), clipRectangle.get$y()), t1), clipRectangle.get$height());
        t5 = this._frameOffsetX;
        cTop = $.$$add(t3.$sub(fTop, t5), clipRectangle.get$x());
        cRight = $.$$add(cLeft, clipRectangle.get$height());
        cBottom = $.$$add(cTop, clipRectangle.get$width());
        iLeft = t2.$gt(fLeft, cLeft) === true ? fLeft : cLeft;
        iTop = t3.$gt(fTop, cTop) === true ? fTop : cTop;
        iRight = $.$$lt(fRight, cRight) === true ? fRight : cRight;
        iBottom = $.$$lt(fBottom, cBottom) === true ? fBottom : cBottom;
        iOffsetX = $.$$add($.$$sub(t5, fTop), iTop);
        iOffsetY = $.$$sub($.$$add(t4, fRight), iRight);
        iWidth = $.$$sub(iBottom, iTop);
        iHeight = $.$$sub(iRight, iLeft);
        if ($.$$gt(iWidth, 0) === true && $.$$gt(iHeight, 0) === true) {
          renderState.get$context().transform$6(0, -1, 1, 0, iOffsetX, $.$$add(iOffsetY, iHeight));
          renderState.get$context().drawImage$9(this._element, iLeft, iTop, iHeight, iWidth, 0, 0, iHeight, iWidth);
        }
        break;
    }
  },
  _getContext$0: function() {
    var t1, canvas, t2, t3, t4, t5, t6, t7;
    if (this._context == null) {
      t1 = this._width;
      canvas = $.CanvasElement_CanvasElement(this._height, t1);
      this._context = canvas.get$context2d();
      switch (this._frameMode) {
        case 0:
          this._context.drawImage$3(this._element, 0, 0);
          break;
        case 1:
          t1 = this._context;
          t2 = this._element;
          t3 = this._frameX;
          t4 = this._frameY;
          t5 = this._frameWidth;
          t6 = this._frameHeight;
          t1.drawImage$9(t2, t3, t4, t5, t6, this._frameOffsetX, this._frameOffsetY, t5, t6);
          break;
        case 2:
          t1 = this._context;
          t2 = this._frameOffsetX;
          t3 = this._frameOffsetY;
          t4 = this._frameHeight;
          t1.setTransform$6(0, -1, 1, 0, t2, $.$$add(t3, t4));
          t2 = this._context;
          t1 = this._element;
          t5 = this._frameX;
          t6 = this._frameY;
          t7 = this._frameWidth;
          t2.drawImage$9(t1, t5, t6, t4, t7, 0, 0, t4, t7);
          this._context.setTransform$6(1, 0, 0, 1, 0, 0);
          break;
      }
      this._element = canvas;
      this._frameMode = 0;
    }
    return this._context;
  },
  BitmapData$fromImageElement$1: function(imageElement) {
    this._width = imageElement.get$naturalWidth();
    this._height = imageElement.get$naturalHeight();
    this._transparent = true;
    this._element = imageElement;
    this._frameMode = 0;
  },
  BitmapData$4: function(width, height, transparent, fillColor) {
    var t1, canvas;
    this._width = width;
    this._height = height;
    this._transparent = transparent;
    t1 = this._width;
    canvas = $.CanvasElement_CanvasElement(this._height, t1);
    this._context = canvas.get$context2d();
    t1 = this._transparent === true ? $._color2rgba(fillColor) : $._color2rgb(fillColor);
    this._context.set$fillStyle(t1);
    this._context.fillRect$4(0, 0, width, height);
    this._element = canvas;
    this._frameMode = 0;
  }
};

$$.TextField = {"": "InteractiveObject;_text,_textColor,_defaultTextFormat,_autoSize,_gridFitType,_type,_wordWrap,_background,_backgroundColor,_border,_borderColor,_textWidth,_textHeight,_linesText,_linesMetrics,_canvasRefreshPending,_canvasWidth,_canvasHeight,_canvas,_context,doubleClickEnabled,mouseEnabled,tabEnabled,tabIndex,_x,_y,_pivotX,_pivotY,_scaleX,_scaleY,_rotation,_transformationMatrixPrivate,_transformationMatrixRefresh,_alpha,_visible,_mask,_name,_parent,_tmpMatrix,_tmpMatrixIdentity,_eventStreams",
  get$type: function() {
    return this._type;
  },
  get$width: function() {
    return this._canvasWidth;
  },
  get$height: function() {
    return this._canvasHeight;
  },
  set$text: function(value) {
    this._text = value;
    this._canvasRefreshPending = true;
  },
  set$defaultTextFormat: function(value) {
    this._defaultTextFormat = value;
    this._textColor = this._defaultTextFormat.get$color();
    this._canvasRefreshPending = true;
  },
  set$width: function(value) {
    this._canvasWidth = value;
    this._canvasRefreshPending = true;
  },
  set$height: function(value) {
    this._canvasHeight = value;
    this._canvasRefreshPending = true;
  },
  getBoundsTransformed$2: function(matrix, returnRectangle) {
    return $._getBoundsTransformedHelper(matrix, this._canvasWidth, this._canvasHeight, returnRectangle);
  },
  getBoundsTransformed$1: function(matrix) {
    return this.getBoundsTransformed$2(matrix, null);
  },
  hitTestInput$2: function(localX, localY) {
    var t1;
    if (localX >= 0)
      if (localY >= 0) {
        t1 = this._canvasWidth;
        if (typeof t1 !== "number")
          return this.hitTestInput$2$bailout1(1, localX, localY, t1);
        if (localX < t1) {
          t1 = this._canvasHeight;
          if (typeof t1 !== "number")
            return this.hitTestInput$2$bailout1(2, 0, localY, t1);
          t1 = localY < t1;
        } else
          t1 = false;
      } else
        t1 = false;
    else
      t1 = false;
    if (t1)
      return this;
    return;
  },
  hitTestInput$2$bailout1: function(state0, localX, localY, t1) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 2 || state0 === 1 || state0 === 0 && localX >= 0)
          switch (state0) {
            case 0:
            default:
              if (state0 === 2 || state0 === 1 || state0 === 0 && localY >= 0)
                switch (state0) {
                  case 0:
                    t1 = this._canvasWidth;
                  case 1:
                    state0 = 0;
                  case 2:
                    if (state0 === 2 || state0 === 0 && $.CONSTANT6.$lt(localX, t1))
                      switch (state0) {
                        case 0:
                          t1 = this._canvasHeight;
                        case 2:
                          state0 = 0;
                          t1 = $.CONSTANT6.$lt(localY, t1);
                      }
                    else
                      t1 = false;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        if (t1)
          return this;
        return;
    }
  },
  render$1: function(renderState) {
    this._canvasRefresh$0();
    renderState._context.drawImage$3(this._canvas, 0, 0);
  },
  _processTextLines$0: function() {
    var lineBuffer, t1, previousLength, line, t2, word, t3, metrics, offsetX, textLineMetrics;
    $.CONSTANT1.clear$0(this._linesText);
    $.CONSTANT1.clear$0(this._linesMetrics);
    if (!this._wordWrap)
      this._linesText.push(this._text);
    else {
      lineBuffer = $.JsStringBuffer$("");
      for (t1 = $.CONSTANT1.get$iterator($.split($.replaceAll(this._text, "\r", ""), "\n")), previousLength = null, line = null; t1.moveNext$0() === true;) {
        for (t2 = $.CONSTANT1.get$iterator($.split(t1.get$current(), " ")); t2.moveNext$0() === true;) {
          word = t2.get$current();
          previousLength = lineBuffer.get$length();
          t3 = $.getInterceptor$JSNumber(previousLength);
          lineBuffer.add$1(t3.$gt(previousLength, 0) === true ? " " + $.S(word) : word);
          line = lineBuffer.toString$0();
          if ($.$$gt(this._context.measureText$1(line).get$width(), this._canvasWidth) === true) {
            if (t3.$gt(previousLength, 0) === true)
              line = $.substring(line, 0, previousLength);
            else
              word = "";
            this._linesText.push(line);
            lineBuffer.clear$0();
            lineBuffer.add$1(word);
          }
        }
        if ($.$$eq(lineBuffer.get$isEmpty(), false) === true) {
          this._linesText.push(lineBuffer.toString$0());
          lineBuffer.clear$0();
        }
      }
    }
    this._textWidth = 0;
    this._textHeight = 0;
    for (t1 = $.CONSTANT1.get$iterator(this._linesText); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      metrics = this._context.measureText$1(t2);
      offsetX = $.$$eq(this._defaultTextFormat.get$align(), "center") === true || $.$$eq(this._defaultTextFormat.get$align(), "justify") === true ? $.$$div($.$$sub(this._canvasWidth, metrics.get$width()), 2) : 0;
      if ($.$$eq(this._defaultTextFormat.get$align(), "right") === true || $.$$eq(this._defaultTextFormat.get$align(), "end") === true)
        offsetX = $.$$sub(this._canvasWidth, metrics.get$width());
      textLineMetrics = $.TextLineMetrics$(offsetX, metrics.get$width(), this._defaultTextFormat.get$size(), 0, 0, 0);
      this._linesMetrics.push(textLineMetrics);
      this._textWidth = $.max(this._textWidth, textLineMetrics.width);
      t2 = this._textHeight;
      t3 = textLineMetrics.height;
      if (typeof t3 !== "number")
        throw $.iae(t3);
      this._textHeight = t2 + t3;
    }
  },
  _canvasRefresh$0: function() {
    var canvasWidthInt, canvasHeightInt, fontStyle, t1, offsetY, i, metrics, t2;
    if (this._canvasRefreshPending) {
      this._canvasRefreshPending = false;
      canvasWidthInt = $.CONSTANT6.toInt$0($.ceil(this._canvasWidth));
      canvasHeightInt = $.CONSTANT6.toInt$0($.ceil(this._canvasHeight));
      if (this._canvas == null) {
        this._canvas = $.CanvasElement_CanvasElement(canvasHeightInt, canvasWidthInt);
        this._context = this._canvas.get$context2d();
      }
      if ($.$$eq(this._canvas.get$width(), canvasWidthInt) !== true)
        this._canvas.set$width(canvasWidthInt);
      if ($.$$eq(this._canvas.get$height(), canvasHeightInt) !== true)
        this._canvas.set$height(canvasHeightInt);
      fontStyle = $.JsStringBuffer$("");
      fontStyle.add$1(this._defaultTextFormat.get$italic() === true ? "italic " : "normal ");
      fontStyle.add$1("normal ");
      fontStyle.add$1(this._defaultTextFormat.get$bold() === true ? "bold " : "normal ");
      fontStyle.add$1($.S(this._defaultTextFormat.get$size()) + "px ");
      fontStyle.add$1($.S(this._defaultTextFormat.get$font()) + ",sans-serif");
      t1 = fontStyle.toString$0();
      this._context.set$font(t1);
      this._context.set$textAlign("start");
      this._context.set$textBaseline("top");
      t1 = $._color2rgb(this._textColor);
      this._context.set$fillStyle(t1);
      this._processTextLines$0();
      if (this._background) {
        t1 = $._color2rgb(this._backgroundColor);
        this._context.set$fillStyle(t1);
        this._context.fillRect$4(0, 0, this._canvasWidth, this._canvasHeight);
      } else
        this._context.clearRect$4(0, 0, this._canvasWidth, this._canvasHeight);
      for (offsetY = 0, i = 0; i < this._linesText.length; ++i) {
        t1 = this._linesMetrics;
        if (i >= t1.length)
          throw $.ioore(i);
        metrics = t1[i];
        t1 = $._color2rgb(this._textColor);
        this._context.set$fillStyle(t1);
        t1 = this._context;
        t2 = this._linesText;
        if (i >= t2.length)
          throw $.ioore(i);
        t1.fillText$3(t2[i], metrics.get$x(), offsetY);
        t1 = metrics.get$height();
        if (typeof t1 !== "number")
          throw $.iae(t1);
        offsetY += t1;
      }
      if (this._border) {
        t1 = $._color2rgb(this._borderColor);
        this._context.set$strokeStyle(t1);
        this._context.set$lineWidth(1);
        this._context.strokeRect$4(0, 0, this._canvasWidth, this._canvasHeight);
      }
    }
  },
  TextField$0: function() {
    this._defaultTextFormat = $.TextFormat$("Arial", 12, 0, "left", false, 0, false, 0, 0, 0, false);
    this._linesText = $.List_List(0);
    this._linesMetrics = $.List_List(0);
  }
};

$$.TextFormat = {"": "Object;font=,size>,color>,bold>,italic>,underline,align>,leftMargin,rightMargin,indent,leading,letterSpacing,blockIndent,bullet,kerning"};

$$.TextLineMetrics = {"": "Object;ascent,descent,height=,leading,width=,x="};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true)
      $.add(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.add(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$$gt(t1.i_1, 0) === true)
      $.add(t1.sb_0, ", ");
    $.add(t1.sb_0, key);
    $.add(t1.sb_0, ": ");
    $.add(t1.sb_0, $.Error_safeToString(value));
    t1.i_1 = $.$$add(t1.i_1, 1);
  }
};

$$.convertDartToNative_Dictionary_anon = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.call$1$bailout(1, value, t1);
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    $.add(t1, value);
    $.add(this.copies_1, null);
    return $length;
  },
  call$1$bailout: function(state0, value, t1, t3, $length) {
    switch (state0) {
      case 0:
        t1 = this.values_0;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArrayJSString(t1);
        $length = t3.get$length(t1);
      case 2:
        var i, t2;
        state0 = 0;
        for (i = 0; $.CONSTANT.$lt(i, $length); ++i) {
          t2 = t3.$index(t1, i);
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        $.add(t1, value);
        $.add(this.copies_1, null);
        return $length;
    }
  }
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    return $.$$index(this.copies_2, i);
  }
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    $.$$indexSet(this.copies_3, i, x);
  }
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, $length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.$isJavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (!(copy == null))
        return copy;
      copy = $.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.CONSTANT1.get$iterator(Object.keys(e)); t1.moveNext$0() === true;) {
        t2 = t1.get$current();
        copy.$indexSet(t2, this.call$1(e[t2]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (!(copy == null))
        return copy;
      $length = e.length;
      if (this.mustCopy_4 === true)
        copy = new Array($length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(3, e, $length, $.CONSTANT1, slot, copy);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, $length, t1, slot, copy) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (Object.getPrototypeOf(e) === Object.prototype) {
          slot = this.findSlot_5.call$1(e);
          copy = this.readSlot_6.call$1(slot);
          if (!(copy == null))
            return copy;
          copy = $.makeLiteralMap([]);
          this.writeSlot_7.call$2(slot, copy);
          for (t1 = $.CONSTANT1.get$iterator(Object.keys(e)); t1.moveNext$0() === true;) {
            t2 = t1.get$current();
            copy.$indexSet(t2, this.call$1(e[t2]));
          }
          return copy;
        }
      default:
        var t2, i;
        if (state0 === 3 || state0 === 2 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (!(copy == null))
                return copy;
              $length = t1.get$length(e);
            case 2:
              state0 = 0;
              copy = this.mustCopy_4 === true ? new Array($length) : e;
            case 3:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$JSArray(copy), i = 0; $.CONSTANT.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  },
  $is_TimerCallback1: true
};

$$.BitmapData_load_anon = {"": "Closure;completer_0,image_1",
  call$1: function($event) {
    return this.completer_0.complete$1($.BitmapData$fromImageElement(this.image_1));
  },
  $is_TimerCallback1: true
};

$$.BitmapData_load_anon0 = {"": "Closure;completer_2",
  call$1: function($event) {
    return this.completer_2.completeError$1($.StateError$("Error loading image."));
  },
  $is_TimerCallback1: true
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$$add(t1.count_0, 1);
  },
  $is_TimerCallback1: true
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._liblib0$_setValue$1(this.box_0.count_0);
  },
  $is_TimerCallback0: true
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1._clearUnhandledError$0();
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error.get$error()));
      t1 = error.get$stackTrace();
      if (!(t1 == null))
        $.Primitives_printString("Stack Trace:\n" + $.S(t1) + "\n");
      throw $.$$throw(error.get$error());
    }
  },
  $is_TimerCallback0: true
};

$$.Timer_Timer_anon = {"": "Closure;box_0,callback_1",
  call$0: function() {
    return this.callback_1.call$1(this.box_0.timer_0);
  },
  $is_TimerCallback0: true
};

$$.internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.set$activeTimerCount($.$$sub(t1.get$activeTimerCount(), 1));
  },
  $is_TimerCallback0: true
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $is_TimerCallback0: true
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $is_TimerCallback0: true
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $is_TimerCallback0: true
};

$$.Duration_toString_threeDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$JSNumber(n);
    if (t1.$ge(n, 100) === true)
      return $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0" + $.S(n);
    return "00" + $.S(n);
  }
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$$ge(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  },
  $is_TimerCallback0: true
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  },
  $is_TimerCallback0: true
};

$$.Stage__onMultitouchInputModeChanged_anon = {"": "Closure;",
  call$1: function(s) {
    return s.cancel$0();
  },
  $is_TimerCallback1: true
};

$$._StreamImpl__sendError_anon = {"": "Closure;error_0",
  call$1: function(subscriber) {
    var e, e0, s, exception, t1;
    try {
      subscriber._sendError$1(this.error_0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        e.throwDelayed$0();
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$withCause(e0, s, this.error_0).throwDelayed$0();
      }
    }

  },
  $is_TimerCallback1: true
};

$$._StreamImpl__sendDone_anon = {"": "Closure;this_0",
  call$1: function(subscriber) {
    var e, e0, s, exception, t1;
    this.this_0._cancel$1(subscriber);
    try {
      subscriber._sendDone$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        e.throwDelayed$0();
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$(e0, s).throwDelayed$0();
      }
    }

  },
  $is_TimerCallback1: true
};

$$.AsyncError_throwDelayed_reportError = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    $.Primitives_printString("Uncaught Error: " + $.S(t1.get$error()));
    t1 = t1.get$stackTrace();
    if (!(t1 == null))
      $.Primitives_printString("Stack Trace:\n" + $.S(t1) + "\n");
  },
  $is_TimerCallback0: true
};

$$.AsyncError_throwDelayed_anon = {"": "Closure;this_1,reportError_2",
  call$0: function() {
    this.reportError_2.call$0();
    throw $.$$throw(this.this_1.get$error());
  },
  $is_TimerCallback0: true
};

$$.Stream_isEmpty_anon = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._liblib0$_setValue$1(false);
  },
  $is_TimerCallback1: true
};

$$.Stream_isEmpty_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._liblib0$_setValue$1(true);
  },
  $is_TimerCallback0: true
};

$$._StreamImpl__sendData_anon = {"": "Closure;value_0",
  call$1: function(subscriber) {
    var e, e0, s, exception, t1;
    try {
      subscriber._sendData$1(this.value_0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        e.throwDelayed$0();
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$(e0, s).throwDelayed$0();
      }
    }

  },
  $is_TimerCallback1: true
};

$$._FutureImpl_whenComplete_anon = {"": "Closure;whenFuture_0,value_1",
  call$0: function() {
    this.whenFuture_0._sendValue$1(this.value_1);
  },
  $is_TimerCallback0: true
};

$$._FutureImpl_whenComplete_anon0 = {"": "Closure;whenFuture_2,error_3",
  call$0: function() {
    this.whenFuture_2._sendError$1(this.error_3);
  },
  $is_TimerCallback0: true
};

$$._WhenFuture__sendError_anon = {"": "Closure;box_0,this_1",
  call$1: function(_) {
    this.this_1._setError$1(this.box_0.error_0);
  },
  $is_TimerCallback1: true
};

$$._WhenFuture__sendValue_anon = {"": "Closure;this_0,value_1",
  call$1: function(_) {
    this.this_0._liblib0$_setValue$1(this.value_1);
  },
  $is_TimerCallback1: true
};

$$._PendingEvents_schedule_anon = {"": "Closure;this_0,stream_1",
  call$0: function() {
    this.this_0.set$scheduleTimer(null);
    this.stream_1._handlePendingEvents$0();
  },
  $is_TimerCallback0: true
};

$$._StreamImpl__pause_anon = {"": "Closure;this_0,listener_1",
  call$0: function() {
    this.this_0._resume$2(this.listener_1, true);
  },
  $is_TimerCallback0: true
};

$$._DoneSubscription__delayDone_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    if (!(t1.get$_handler() == null))
      t1._handler$0();
  },
  $is_TimerCallback0: true
};

$$.DateTime_toString_fourDigits = {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = $.getInterceptor$JSNumber(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) === true ? "-" : "";
    if (absN >= 1000)
      return $.S(n);
    if (absN >= 100)
      return sign + "0" + $.S(absN);
    if (absN >= 10)
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  }
};

$$.DateTime_toString_threeDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$JSNumber(n);
    if (t1.$ge(n, 100) === true)
      return $.S(n);
    if (t1.$ge(n, 10) === true)
      return "0" + $.S(n);
    return "00" + $.S(n);
  }
};

$$.DateTime_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$$ge(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_Timer($.CONSTANT10, this);
  },
  $is_TimerCallback0: true
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1;
    this.port_1.close$0();
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!value.$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(value);
  }
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true)
      $globalState.mainManager.postMessage$1(workerMessage);
    else {
      manager = $.$$index($globalState.managers, t1.get$_workerId());
      if (!(manager == null))
        manager.postMessage$1(workerMessage);
    }
  },
  $is_TimerCallback0: true
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $is_TimerCallback1: true
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,completer_1,values_2,pos_3",
  call$1: function(value) {
    var t1, t2, remaining;
    t1 = this.values_2;
    $.$$indexSet(t1, this.pos_3, value);
    t2 = this.box_0;
    remaining = $.$$sub(t2.remaining_0, 1);
    t2.remaining_0 = remaining;
    if ($.$$eq(remaining, 0) === true)
      this.completer_1.complete$1(t1);
  },
  $is_TimerCallback1: true
};

$$._FutureImpl__FutureImpl$wait_anon0 = {"": "Closure;box_0,completer_4",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.completed_1 !== true)
      this.completer_4.completeError$2(error.get$error(), error.get$stackTrace());
    t1.completed_1 = true;
  },
  $is_TimerCallback1: true
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $is_TimerCallback1: true
};

$$.Storage_values_anon = {"": "Closure;values_0",
  call$2: function(k, v) {
    return $.add(this.values_0, v);
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $is_TimerCallback1: true
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    isolate = $.$$index($globalState.isolates, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = !($globalState.currentContext == null) && $.$$eq($globalState.currentContext.get$id(), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  $is_TimerCallback0: true
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (!(t1.get$_receivePort().get$_callback() == null)) {
      if (this.shouldSerialize_5 === true) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $is_TimerCallback0: true
};

$$.Stream_toList_anon = {"": "Closure;result_0",
  call$1: function(data) {
    $.add(this.result_0, data);
  },
  $is_TimerCallback1: true
};

$$.Stream_toList_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._liblib0$_setValue$1(this.result_1);
  },
  $is_TimerCallback0: true
};

$$.Storage_keys_anon = {"": "Closure;keys_0",
  call$2: function(k, v) {
    return $.add(this.keys_0, k);
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$$indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  }
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  $is_TimerCallback0: true
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};
$$.Bound__close__StreamImpl = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $is_TimerCallback0: true
};
$$.Bound_resume__EventStreamSubscription = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $is_TimerCallback0: true
};
$$.Bound_resume__EventStreamSubscription0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  },
  $is_TimerCallback0: true
};
$.ListIterator$ = function(list) {
  return new $.ListIterator(list, list.length, -1, null);
};

$.ToString_collectionToString = function(c) {
  var result = $.JsStringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List(0));
  return result.toString$0();
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, t2);
  for (t2 = $.iterator(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.ToString__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.ToString__containsRef(visiting, o))
      $.add(result, typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.$isMap())
    if ($.ToString__containsRef(visiting, o))
      $.add(result, "{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    $.add(result, o);
};

$.ToString__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.ToString_mapToString = function(m) {
  var result = $.JsStringBuffer$("");
  $.ToString__emitMap(m, result, $.List_List(0));
  return result.toString$0();
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  $.forEach(m, new $.ToString__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$._callInIsolate = function(isolate, $function) {
  isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue(), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var scripts, len, i, script, src, t1;
  scripts = document.getElementsByTagName('script');
  for (len = scripts.length, i = 0; i < len; ++i) {
    script = scripts[i];
    src = script && script.src;
    t1 = $.getInterceptor(src);
    if (!(src == null) && t1.endsWith$1(src, "test_controller.js") !== true && t1.endsWith$1(src, "dart.js") !== true)
      return src;
  }
  return;
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$JSArrayJSString(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      t2 = t1.$index(msg, "id");
      $globalState.currentManagerId = t2;
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (!(t1.$index(msg, "port") == null))
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      $.remove($globalState.managers, sender.get$id());
      sender.terminate$0();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true)
        $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      else
        $.Primitives_printString($.toString(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, exception;
  if ($globalState.isWorker === true)
    $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePortImpl$();
  replyTo.send$2("spawned", $._Isolate_port().toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.set$onmessage(function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  worker.set$id(workerId);
  $.$$indexSet($globalState.managers, workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$$add(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return !($.get$globalThis().setTimeout == null);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && !(value === 0) || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  res = $.toString(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$$add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$JSString($name);
  return t1.charCodeAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result = result + String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, t2;
  a = [];
  for (t1 = $.CONSTANT1.get$iterator(codePoints); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 <= 65535)
      a.push(t2);
    else if (t2 <= 1114111) {
      a.push(55296 + ($.CONSTANT.$shr(t2 - 65536, 10) & 1023));
      a.push(56320 + (t2 & 1023));
    } else
      throw $.$$throw($.ArgumentError$(t2));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.CONSTANT1.get$iterator(charCodes); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 < 0)
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.listInsertRange = function(receiver, start, $length, initialValue) {
  var receiverLength, t1, t2, t3, i;
  if (typeof receiver !== "object" || receiver === null || (receiver.constructor !== Array || !!receiver.immutable$list) && !receiver.$isJavaScriptIndexingBehavior())
    return $.listInsertRange$bailout(1, receiver, start, $length, initialValue);
  if ($.$$eq($length, 0) === true)
    return;
  if (!(typeof $length === "number" && Math.floor($length) === $length))
    throw $.$$throw($.ArgumentError$($length));
  if ($length < 0)
    throw $.$$throw($.ArgumentError$($length));
  if (!(typeof start === "number" && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  receiverLength = receiver.length;
  if (start < 0 || start > receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = receiverLength + $length;
  $.CONSTANT1.set$length(receiver, t1);
  t2 = start + $length;
  $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
  if (!(initialValue == null))
    for (t3 = receiver.length, i = start; i < t2; ++i) {
      if (i < 0 || i >= t3)
        throw $.ioore(i);
      receiver[i] = initialValue;
    }
  $.CONSTANT1.set$length(receiver, t1);
};

$.listInsertRange$bailout = function(state0, receiver, start, $length, initialValue) {
  var receiverLength, t1, t2, i;
  if ($.$$eq($length, 0) === true)
    return;
  if (!(typeof $length === "number" && Math.floor($length) === $length))
    throw $.$$throw($.ArgumentError$($length));
  if ($length < 0)
    throw $.$$throw($.ArgumentError$($length));
  if (!(typeof start === "number" && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  receiverLength = receiver.length;
  if (start < 0 || start > receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = receiverLength + $length;
  $.CONSTANT1.set$length(receiver, t1);
  t2 = start + $length;
  $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
  if (!(initialValue == null))
    for (i = start; i < t2; ++i)
      $.CONSTANT1.$indexSet(receiver, i, initialValue);
  $.CONSTANT1.set$length(receiver, t1);
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT0;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if ($.CONSTANT2.endsWith$1(message, "is null") === true || $.CONSTANT2.endsWith$1(message, "is undefined") === true || $.CONSTANT2.endsWith$1(message, "is null or undefined") === true || $.CONSTANT2.endsWith$1(message, "of undefined") === true || $.CONSTANT2.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.CONSTANT1.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$();
  for (; iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $._currentIsolate();
  $function = function($0, $1) { return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, $0, $1); };
  closure.$identity = $function;
  return $function;
};

$.propertyTypeCastError = function(value, property) {
  var t1 = $.getInterceptor$JSArrayJSString(property);
  throw $.$$throw($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation(actualType, expectedType);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = !($name === "") && !($name === "Object") && !($name === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var hasOwnPropertyFunction, tag, method, secondTag, proto;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if (!$.isDartObject(obj)) {
    tag = $.getTypeNameOf(obj);
    method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
    if (method == null) {
      secondTag = $.alternateTag(obj, tag);
      if (!(secondTag == null))
        method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
    }
  } else
    method = null;
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT38));
  if (method == null)
    (function(){throw new TypeError($name + " is not a function");})();
  else {
    proto = Object.getPrototypeOf(obj);
    if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, $name))
      $.defineProperty(proto, $name, method);
  }
  return method.apply(obj, $arguments);
};

$.isDartObject = function(obj) {
  return ((obj) instanceof ($.Object));
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function($name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[$name];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT38)[$name];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, $name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, exception;
  pattern = regExp.get$pattern();
  isMultiLine = regExp.get$isMultiLine();
  isCaseSensitive = regExp.get$isCaseSensitive();
  $.checkString(pattern);
  sb = $.JsStringBuffer$("");
  if (isMultiLine === true)
    $.add(sb, "m");
  if (isCaseSensitive !== true)
    $.add(sb, "i");
  if (global === true)
    $.add(sb, "g");
  try {
    t1 = new RegExp(pattern, $.toString(sb));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$isMultiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$isCaseSensitive(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, t1, endIndex;
  result = $.List_List(0);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.CONSTANT2.indexOf$2(haystack, needle, startIndex);
    t1 = $.getInterceptor(position);
    if (t1.$eq(position, -1) === true)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = t1.$add(position, patternLength);
    if ($.$$eq(endIndex, $length) === true)
      break;
    else
      startIndex = t1.$eq(position, endIndex) === true ? $.$$add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.$$eq($.CONSTANT2.indexOf$2(receiver, other, startIndex), -1) !== true;
  else if (typeof other === "object" && other !== null && !!other.$isJSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT2.substring$1(receiver, startIndex));
  else
    return $.iterator($.allMatches(other, $.CONSTANT2.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.JsStringBuffer$("");
      $length = receiver.length;
      result.add$1(to);
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        result.add$1(receiver[i]);
        result.add$1(to);
      }
      return result.toString$0();
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
};

$.JsStringBuffer$ = function($content) {
  var t1 = $content;
  return new $.JsStringBuffer(t1);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, completer, values, i, i0;
  t1 = {};
  t2 = $.getInterceptor$JSArrayJSString(futures);
  if (t2.get$isEmpty(futures) === true)
    return $._FutureImpl$immediate($.CONSTANT39);
  completer = $._CompleterImpl$();
  t1.remaining_0 = t2.get$length(futures);
  values = $.List_List$fixedLength(t2.get$length(futures), null);
  t1.completed_1 = false;
  for (t2 = t2.get$iterator(futures), i = 0; t2.moveNext$0() === true; i = i0) {
    i0 = i + 1;
    t2.get$current().then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, completer, values, i)).catchError$1(new $._FutureImpl__FutureImpl$wait_anon0(t1, completer));
  }
  return completer.future;
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._WhenFuture$ = function(_action) {
  return new $._WhenFuture(_action, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$.StreamController$ = function(onPauseStateChange, onSubscriptionStateChange) {
  return new $.StreamController($._SingleControllerStream$(onSubscriptionStateChange, onPauseStateChange));
};

$._SingleControllerStream$ = function(_subscriptionHandler, _pauseHandler) {
  return new $._SingleControllerStream(_subscriptionHandler, _pauseHandler, null, 0, null);
};

$._StreamSubscriptionImpl$ = function(source, _onData, _onError, _onDone, _unsubscribeOnError) {
  var t1 = new $._StreamSubscriptionImpl(_unsubscribeOnError, _onData, _onError, _onDone, source, 0, null, null);
  t1._InternalLink$0();
  return t1;
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  error.throwDelayed$0();
};

$._nullDoneHandler = function() {
};

$._DelayedData$ = function(value) {
  return new $._DelayedData(value, null);
};

$._DelayedError$ = function(error) {
  return new $._DelayedError(error, null);
};

$._InternalLink_unlink = function(element) {
  var next, previous;
  next = element.get$_nextLink();
  previous = element.get$_previousLink();
  next.set$_previousLink(previous);
  previous.set$_nextLink(next);
  element.set$_previousLink(element);
  element.set$_nextLink(element);
};

$._InternalLinkList_add = function(list, element) {
  var t1, listEnd;
  t1 = element.get$_nextLink();
  if (!(element == null ? t1 == null : element === t1))
    $._InternalLink_unlink(element);
  listEnd = list._previousLink;
  listEnd.set$_nextLink(element);
  list._previousLink = element;
  element.set$_previousLink(listEnd);
  element.set$_nextLink(list);
};

$._InternalLinkList_isEmpty = function(list) {
  return list === list._nextLink;
};

$._StreamImplEvents$ = function() {
  return new $._StreamImplEvents(null, null, null);
};

$._DoneSubscription$ = function(_handler) {
  var t1 = new $._DoneSubscription(_handler, null, 0);
  t1._DoneSubscription$1(_handler);
  return t1;
};

$._SingleStreamMultiplexer$ = function(_source) {
  var t1 = new $._SingleStreamMultiplexer(_source, null, null, null, 0, null);
  t1._MultiStreamImpl$0();
  return t1;
};

$.Timer_Timer = function(duration, callback) {
  var t1, t2, milliseconds, zeroArgumentCallback;
  t1 = {};
  t2 = callback != null && !!callback.$is_TimerCallback0;
  if (!t2 && !(callback != null && !!callback.$is_TimerCallback1))
    throw $.$$throw($.ArgumentError$(callback));
  milliseconds = duration.inMilliseconds;
  if ($.$$lt(milliseconds, 0) === true)
    milliseconds = 0;
  t1.timer_0 = null;
  zeroArgumentCallback = t2 ? callback : new $.Timer_Timer_anon(t1, callback);
  t1.timer_0 = $.TimerImpl$(milliseconds, zeroArgumentCallback);
  return t1.timer_0;
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !src.$isJavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = $.getInterceptor$JSArrayJSString(src); i >= srcStart; --i, --j)
      $.CONSTANT1.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t1 = $.getInterceptor$JSArrayJSString(src), j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j)
      $.CONSTANT1.$indexSet(dst, j, t1.$index(src, i));
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$._HashMapTable$ = function() {
  var t1 = new $._HashMapTable(null, 8, 0, 0, 0, null);
  t1._HashTable$1(8);
  return t1;
};

$.HashMap$ = function() {
  var t1 = new $.HashMap($._HashMapTable$());
  t1.HashMap$0();
  return t1;
};

$._HashTableKeyIterable$ = function(hashTable) {
  return new $._HashTableKeyIterable(hashTable);
};

$._HashTableKeyIterator$ = function(hashTable) {
  return new $._HashTableKeyIterator(hashTable, hashTable._modificationCount, 0, null);
};

$._HashTableValueIterable$ = function(hashTable, _entryIndex) {
  return new $._HashTableValueIterable(_entryIndex, hashTable);
};

$._HashTableValueIterator$ = function(hashTable, _entryIndex) {
  return new $._HashTableValueIterator(_entryIndex, hashTable, hashTable.get$_modificationCount(), 0, null);
};

$._LinkedHashMapTable$ = function() {
  var t1 = new $._LinkedHashMapTable(null, 8, 0, 0, 0, null);
  t1._HashTable$1(8);
  return t1;
};

$.LinkedHashMap$ = function() {
  var t1 = new $.LinkedHashMap($._LinkedHashMapTable$());
  t1.LinkedHashMap$0();
  return t1;
};

$._LinkedHashTableKeyIterable$ = function(_table) {
  return new $._LinkedHashTableKeyIterable(_table);
};

$._LinkedHashTableKeyIterator$ = function(hashTable) {
  return new $._LinkedHashTableKeyIterator(hashTable, hashTable.get$_modificationCount(), hashTable._next$1(0), null);
};

$._LinkedHashTableValueIterable$ = function(_hashTable, _valueIndex) {
  return new $._LinkedHashTableValueIterable(_hashTable, _valueIndex);
};

$._LinkedHashTableValueIterator$ = function(hashTable, _valueIndex) {
  return new $._LinkedHashTableValueIterator(_valueIndex, hashTable, hashTable.get$_modificationCount(), hashTable._next$1(0), null);
};

$.Queue_Queue = function() {
  return $.ListQueue$(null);
};

$.ListQueue$ = function(initialCapacity) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  t1.ListQueue$1(initialCapacity);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  var t1 = $.getInterceptor$JSNumber(number);
  return t1.$and(number, t1.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var number0, nextNumber;
  number0 = $.$$sub($.$$shl(number, 2), 1);
  if (number0 !== (number0 | 0))
    return $.ListQueue__nextPowerOf2$bailout(1, number0);
  for (number = number0; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$.ListQueue__nextPowerOf2$bailout = function(state0, number0) {
  var number, t1, nextNumber;
  for (number = number0; true; number = nextNumber) {
    t1 = $.getInterceptor$JSNumber(number);
    nextNumber = t1.$and(number, t1.$sub(number, 1));
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue) {
  return new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
};

$.DateTime$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.DateTime$_now = function() {
  var t1 = new $.DateTime($.Primitives_dateNow(), false);
  t1.DateTime$_now$0();
  return t1;
};

$.Duration$ = function(days, hours, milliseconds, minutes, seconds) {
  return new $.Duration($.$$add($.$$add($.$$add($.$$add($.$$mul(days, 86400000), $.$$mul(hours, 3600000)), $.$$mul(minutes, 60000)), $.$$mul(seconds, 1000)), milliseconds));
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString(object);
  if (typeof object === "string")
    return "\"" + $.S($.replaceAll($.replaceAll($.replaceAll($.CONSTANT2.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"")) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.IllegalJSRegExpException$ = function(pattern, errmsg) {
  return new $.IllegalJSRegExpException("Illegal pattern: " + $.S(pattern) + ", " + errmsg);
};

$.IntegerDivisionByZeroException$ = function() {
  return new $.IntegerDivisionByZeroException();
};

$.List_List = function($length) {
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return new Array($length);
};

$.List_List$fixedLength = function($length, fill) {
  var result, t1, i;
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = $.Primitives_newFixedList($length);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.$isJavaScriptIndexingBehavior())
    return $.List_List$fixedLength$bailout(1, $length, fill, result);
  if ($.$$eq($length, 0) !== true && !(fill == null))
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$fixedLength$bailout = function(state0, $length, fill, result) {
  var t1, i;
  if ($.$$eq($length, 0) !== true && !(fill == null))
    for (t1 = $.getInterceptor$JSArrayJSString(result), i = 0; $.CONSTANT.$lt(i, t1.get$length(result)); ++i)
      t1.$indexSet(result, i, fill);
  return result;
};

$.List_List$from = function(other) {
  var list, t1;
  list = $.List_List(0);
  for (t1 = $.iterator(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  return list;
};

$.Map_Map = function() {
  return $.HashMap$();
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.String_String$fromCharCodes = function(charCodes) {
  if (!charCodes.constructor === Array)
    charCodes = $.List_List$from(charCodes);
  return $.Primitives_stringFromCharCodes(charCodes);
};

$.window = function() {
  return window;
};

$.CanvasElement_CanvasElement = function(height, width) {
  var e = document.$$dom_createElement$1("canvas");
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = "-moz-";
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = "-ms-";
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = "-o-";
    else
      $._cachedBrowserPrefix = "-webkit-";
  return $._cachedBrowserPrefix;
};

$.Element__determineMouseWheelEventType = function(e) {
  if (e.onwheel !== undefined)
    return "wheel";
  else if (e.onmousewheel !== undefined)
    return "mousewheel";
  else
    return "DOMMouseScroll";
};

$.ImageElement_ImageElement = function(height, src, width) {
  var e = document.$$dom_createElement$1("img");
  if (!(src == null))
    e.set$src(src);
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  return $.contains($._Device_userAgent(), "Opera", 0);
};

$._Device_isIE = function() {
  return $._Device_isOpera() !== true && $.contains($._Device_userAgent(), "MSIE", 0) === true;
};

$._Device_isFirefox = function() {
  return $.contains($._Device_userAgent(), "Firefox", 0);
};

$._EventStream$ = function(_target, _eventType, _useCapture) {
  return new $._EventStream(_target, _eventType, _useCapture);
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$._TypedImageData$ = function(data, height, width) {
  return new $._TypedImageData(data, height, width);
};

$._convertNativeToDart_ImageData = function(nativeImageData) {
  0;
  if (typeof nativeImageData === "object" && nativeImageData !== null && nativeImageData.$isImageData())
    return nativeImageData;
  return $._TypedImageData$(nativeImageData.data, nativeImageData.height, nativeImageData.width);
};

$._convertDartToNative_ImageData = function(imageData) {
  if (typeof imageData === "object" && imageData !== null && !!imageData.$is_TypedImageData)
    return {data: imageData.data, height: imageData.height, width: imageData.width};
  return imageData;
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.length(array), -1, null);
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  $.forEach(dict, new $.convertDartToNative_Dictionary_anon(object));
  return object;
};

$.convertNativeToDart_SerializedScriptValue = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, true);
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$JSArrayJSString(a);
  t2 = $.getInterceptor$JSNumber(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)) === true)
    return -1;
  if (t2.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, endIndex) === true; i = t2.$add(i, 1))
    if ($.$$eq(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.min = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.CONSTANT8.get$isNegative(b) === true || $.CONSTANT8.get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if ($.CONSTANT8.get$isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.CONSTANT6.get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.sin = function(x) {
  return Math.sin($.checkNum(x));
};

$.cos = function(x) {
  return Math.cos($.checkNum(x));
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.main = function() {
  $.stage = $.Stage$("stage", document.query$1("#stage"));
  $.renderLoop = $.RenderLoop$();
  $.renderLoop.addStage$1($.stage);
  $.BitmapData_load("../common/images/king.png").then$1($.drawFilters);
};

$.drawFilters = function(kingBitmapData) {
  var kingRectangle, bitmapData, bitmap, filters, backgroundBitmapData, i, x, y, filter, $name, backgroundBitmap, textField;
  kingRectangle = $.Rectangle$(0, 0, kingBitmapData.get$width(), kingBitmapData.get$height());
  bitmapData = $.BitmapData$(940, 500, true, 0);
  bitmap = $.Bitmap$(bitmapData, "auto");
  $.stage.addChild$1(bitmap);
  filters = [$.makeLiteralMap(["name", "DropShadowFilter (black)", "filter", $.DropShadowFilter$(10, 0.7853981633974483, 4278190080, 0.8, 8, 8, 1, false, false, false)]), $.makeLiteralMap(["name", "GlowFilter (red)", "filter", $.GlowFilter$(4294901760, 1, 20, 20, 2, false, false, false)]), $.makeLiteralMap(["name", "ColorMatrixFilter (grayscale)", "filter", $.ColorMatrixFilter$grayscale()]), $.makeLiteralMap(["name", "ColorMatrixFilter (invert)", "filter", $.ColorMatrixFilter$invert()]), $.makeLiteralMap(["name", "BlurFilter (radius 1)", "filter", $.BlurFilter$(1, 1)]), $.makeLiteralMap(["name", "BlurFilter (radius 5)", "filter", $.BlurFilter$(5, 5)]), $.makeLiteralMap(["name", "BlurFilter (radius 10)", "filter", $.BlurFilter$(10, 10)]), $.makeLiteralMap(["name", "BlurFilter (radius 20)", "filter", $.BlurFilter$(20, 20)])];
  backgroundBitmapData = $.BitmapData$(230, 245, true, 4293980400);
  for (i = 0; i < filters.length; ++i) {
    x = 235 * $.CONSTANT.$mod(i, 4);
    y = 250 * $.CONSTANT.$tdiv(i, 4);
    filter = $.$$index(filters[i], "filter");
    if (i >= filters.length)
      throw $.ioore(i);
    $name = $.$$index(filters[i], "name");
    bitmapData.applyFilter$4(kingBitmapData, kingRectangle, $.Point$(x + 40, y + 45), filter);
    backgroundBitmap = $.Bitmap$(backgroundBitmapData, "auto");
    backgroundBitmap.set$x(x);
    backgroundBitmap.set$y(y);
    $.stage.addChildAt$2(backgroundBitmap, 0);
    textField = $.TextField$();
    textField.set$defaultTextFormat($.TextFormat$("Helvetica Neue, Helvetica, Arial", 14, 4278190080, "left", false, 0, false, 0, 0, 0, false));
    textField.set$x(x + 5);
    textField.set$y(y + 5);
    textField.set$width(200);
    textField.set$text($name);
    $.stage.addChild$1(textField);
  }
};

$.Juggler$ = function() {
  return new $.Juggler($.List_List(0), 0, 0);
};

$.Bitmap$ = function(bitmapData, pixelSnapping) {
  var t1 = new $.Bitmap(bitmapData, pixelSnapping, null, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, null, "", null, null, null, null);
  t1.DisplayObject$0();
  t1.Bitmap$2(bitmapData, pixelSnapping);
  return t1;
};

$.BitmapData$ = function(width, height, transparent, fillColor) {
  var t1 = new $.BitmapData(null, null, null, null, null, null, null, null, null, null, null, null);
  t1.BitmapData$4(width, height, transparent, fillColor);
  return t1;
};

$.BitmapData$fromImageElement = function(imageElement) {
  var t1 = new $.BitmapData(null, null, null, null, null, null, null, null, null, null, null, null);
  t1.BitmapData$fromImageElement$1(imageElement);
  return t1;
};

$.BitmapData_load = function(url) {
  var completer, image;
  completer = $._CompleterImpl$();
  image = $.ImageElement_ImageElement(null, null, null);
  image.get$onLoad().listen$1(new $.BitmapData_load_anon(completer, image));
  image.get$onError().listen$1(new $.BitmapData_load_anon0(completer));
  image.set$src(url);
  return completer.future;
};

$._MouseButton$ = function(mouseDownEventType, mouseUpEventType, mouseClickEventType, mouseDoubleClickEventType) {
  return new $._MouseButton(null, false, 0, 0, mouseDownEventType, mouseUpEventType, mouseClickEventType, mouseDoubleClickEventType);
};

$._Touch$ = function(target, primaryTouchPoint) {
  var t1 = $._Touch__globalTouchPointID;
  $._Touch__globalTouchPointID = $.$$add(t1, 1);
  return new $._Touch(t1, target, primaryTouchPoint);
};

$.Stage$ = function($name, canvas) {
  var t1 = new $.Stage(null, null, null, null, null, null, null, null, null, null, null, null, null, [], $.List_List(0), true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, null, "", null, null, null, null);
  t1.DisplayObject$0();
  t1.Stage$2($name, canvas);
  return t1;
};

$.RenderLoop$ = function() {
  var t1 = new $.RenderLoop(null, null, null, null, null);
  t1.RenderLoop$0();
  return t1;
};

$.RenderState$fromCanvasRenderingContext2D = function(context, matrix) {
  var t1 = new $.RenderState(context, $.List_List$fixedLength(100, null), $.List_List$fixedLength(100, null), 0);
  t1.RenderState$fromCanvasRenderingContext2D$2(context, matrix);
  return t1;
};

$.EnterFrameEvent$ = function(passedTime) {
  var t1 = new $.EnterFrameEvent(null, null, null, null, null, null, null, null);
  t1.Event$2("enterFrame", false);
  t1.EnterFrameEvent$1(passedTime);
  return t1;
};

$.Event$ = function(type, bubbles) {
  var t1 = new $.Event(null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  return t1;
};

$._EventStream$0 = function(_target, _eventType, _useCapture) {
  return new $._EventStream0(_target, _eventType, _useCapture, $.List_List(5), 0);
};

$._EventStreamIndex$ = function() {
  return new $._EventStreamIndex($.List_List(50), 0);
};

$._EventStreamSubscription$0 = function(_eventStream, _onData) {
  var t1 = new $._EventStreamSubscription0(_eventStream, _onData, null, null);
  t1._liblib2$_EventStreamSubscription$2(_eventStream, _onData);
  return t1;
};

$.KeyboardEvent$ = function(type, bubbles) {
  var t1 = new $.KeyboardEvent(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  t1.KeyboardEvent$2(type, bubbles);
  return t1;
};

$.MouseEvent$ = function(type, bubbles) {
  var t1 = new $.MouseEvent(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  t1.MouseEvent$2(type, bubbles);
  return t1;
};

$.TextEvent$ = function(type, bubbles) {
  var t1 = new $.TextEvent("", null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  return t1;
};

$.TouchEvent$ = function(type, bubbles) {
  var t1 = new $.TouchEvent(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  t1.TouchEvent$2(type, bubbles);
  return t1;
};

$.BlurFilter$ = function(blurX, blurY) {
  var t1 = new $.BlurFilter(blurX, blurY);
  t1.BlurFilter$2(blurX, blurY);
  return t1;
};

$.ColorMatrixFilter$grayscale = function() {
  return new $.ColorMatrixFilter([0.212671, 0.71516, 0.072169, 0, 0, 0.212671, 0.71516, 0.072169, 0, 0, 0.212671, 0.71516, 0.072169, 0, 0, 0, 0, 0, 1, 0]);
};

$.ColorMatrixFilter$invert = function() {
  return new $.ColorMatrixFilter([-1, 0, 0, 0, 255, 0, -1, 0, 0, 255, 0, 0, -1, 0, 255, 0, 0, 0, 1, 0]);
};

$.DropShadowFilter$ = function(distance, angle, color, alpha, blurX, blurY, strength, inner, knockout, hideObject) {
  var t1 = new $.DropShadowFilter(distance, angle, color, alpha, blurX, blurY, strength, inner, knockout, hideObject);
  t1.DropShadowFilter$10(distance, angle, color, alpha, blurX, blurY, strength, inner, knockout, hideObject);
  return t1;
};

$.GlowFilter$ = function(color, alpha, blurX, blurY, strength, inner, knockout, hideObject) {
  var t1 = new $.GlowFilter(color, alpha, blurX, blurY, strength, inner, knockout, hideObject);
  t1.GlowFilter$8(color, alpha, blurX, blurY, strength, inner, knockout, hideObject);
  return t1;
};

$.Matrix$fromIdentity = function() {
  return new $.Matrix(1, 0, 0, 1, 0, 0, 1);
};

$.Point$ = function(x, y) {
  return new $.Point(x, y);
};

$.Point$zero = function() {
  return new $.Point(0, 0);
};

$.Rectangle$ = function(x, y, width, height) {
  return new $.Rectangle(x, y, width, height);
};

$.Rectangle$zero = function() {
  return new $.Rectangle(0, 0, 0, 0);
};

$.TextField$ = function() {
  var t1 = new $.TextField("", 0, null, "none", "pixel", "dynamic", false, false, 0, false, 0, 0, 0, null, null, true, 100, 100, null, null, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, null, "", null, null, null, null);
  t1.DisplayObject$0();
  t1.TextField$0();
  return t1;
};

$.TextFormat$ = function(font, size, color, align, bold, indent, italic, leading, leftMargin, rightMargin, underline) {
  return new $.TextFormat(font, size, color, bold, italic, underline, align, leftMargin, rightMargin, indent, leading, 0, 0, false, false);
};

$.TextLineMetrics$ = function(x, width, height, ascent, descent, leading) {
  return new $.TextLineMetrics(ascent, descent, height, leading, width, x);
};

$.Mouse__getCssStyle = function(mouseCursor) {
  var cursor, style;
  cursor = $.$$eq($.Mouse__customCursor, "auto") !== true ? $.Mouse__customCursor : mouseCursor;
  style = "auto";
  switch (cursor) {
    case "auto":
      style = "auto";
      break;
    case "arrow":
      style = "default";
      break;
    case "button":
      style = "pointer";
      break;
    case "hand":
      style = "move";
      break;
    case "ibeam":
      style = "text";
      break;
    case "wait":
      style = "wait";
      break;
  }
  return $.Mouse__isCursorHidden === true ? "none" : style;
};

$.Multitouch__initialize = function() {
  var ua, t1;
  if ($.$$eq($.Multitouch__initialized, false) === true) {
    $.Multitouch__initialized = true;
    ua = window.navigator.userAgent;
    t1 = $.getInterceptor$JSArrayJSString(ua);
    if (t1.contains$1(ua, "iPhone") === true || t1.contains$1(ua, "iPad") === true || t1.contains$1(ua, "iPod") === true) {
      $.Multitouch__supportsTouchEvents = true;
      $.Multitouch__maxTouchPoints = 10;
    }
    if (t1.contains$1(ua, "Android") === true) {
      $.Multitouch__supportsTouchEvents = true;
      $.Multitouch__maxTouchPoints = 10;
    }
    if (t1.contains$1(ua, "IEMobile") === true) {
      $.Multitouch__supportsTouchEvents = true;
      $.Multitouch__maxTouchPoints = 10;
    }
  }
};

$._color2rgb = function(color) {
  var t1, r, g, b;
  t1 = $.getInterceptor$JSNumber(color);
  r = $.$$and(t1.$shr(color, 16), 255);
  g = $.$$and(t1.$shr(color, 8), 255);
  b = $.$$and(t1.$shr(color, 0), 255);
  return "rgb(" + $.S(r) + "," + $.S(g) + "," + $.S(b) + ")";
};

$._color2rgba = function(color) {
  var t1, a, r, g, b;
  t1 = $.getInterceptor$JSNumber(color);
  a = $.$$and(t1.$shr(color, 24), 255);
  r = $.$$and(t1.$shr(color, 16), 255);
  g = $.$$and(t1.$shr(color, 8), 255);
  b = $.$$and(t1.$shr(color, 0), 255);
  return "rgba(" + $.S(r) + "," + $.S(g) + "," + $.S(b) + "," + $.S(a / 255) + ")";
};

$._checkLittleEndianSystem = function() {
  var canvas = $.CanvasElement_CanvasElement(1, 1);
  canvas.get$context2d().set$fillStyle("#000000");
  canvas.get$context2d().fillRect$4(0, 0, 1, 1);
  return $.$$eq($.$$index(canvas.get$context2d().getImageData$4(0, 0, 1, 1).get$data(), 0), 0);
};

$._premultiplyAlpha = function(data) {
  var i, value, t1, t2, t3, t4;
  if (typeof data !== "object" || data === null || (data.constructor !== Array || !!data.immutable$list) && !data.$isJavaScriptIndexingBehavior())
    return $._premultiplyAlpha$bailout(1, data);
  if ($.get$_isLittleEndianSystem() === true)
    for (i = 0; i <= data.length - 4; i += 4) {
      value = data[i + 3];
      t1 = i + 0;
      t2 = $.$$tdiv($.$$mul(data[t1], value), 255);
      t3 = data.length;
      if (t1 >= t3)
        throw $.ioore(t1);
      data[t1] = t2;
      t2 = i + 1;
      if (t2 >= t3)
        throw $.ioore(t2);
      t1 = $.$$tdiv($.$$mul(data[t2], value), 255);
      t4 = data.length;
      if (t2 >= t4)
        throw $.ioore(t2);
      data[t2] = t1;
      t1 = i + 2;
      if (t1 >= t4)
        throw $.ioore(t1);
      t2 = $.$$tdiv($.$$mul(data[t1], value), 255);
      if (t1 >= data.length)
        throw $.ioore(t1);
      data[t1] = t2;
    }
  else
    for (i = 0; i <= data.length - 4; i += 4) {
      value = data[i + 0];
      t1 = i + 1;
      t2 = $.$$tdiv($.$$mul(data[t1], value), 255);
      t3 = data.length;
      if (t1 >= t3)
        throw $.ioore(t1);
      data[t1] = t2;
      t2 = i + 2;
      if (t2 >= t3)
        throw $.ioore(t2);
      t1 = $.$$tdiv($.$$mul(data[t2], value), 255);
      t4 = data.length;
      if (t2 >= t4)
        throw $.ioore(t2);
      data[t2] = t1;
      t1 = i + 3;
      if (t1 >= t4)
        throw $.ioore(t1);
      t2 = $.$$tdiv($.$$mul(data[t1], value), 255);
      if (t1 >= data.length)
        throw $.ioore(t1);
      data[t1] = t2;
    }
};

$._premultiplyAlpha$bailout = function(state0, data) {
  var t1, i, value, t2;
  if ($.get$_isLittleEndianSystem() === true)
    for (t1 = $.getInterceptor$JSArrayJSString(data), i = 0; $.CONSTANT.$le(i, $.$$sub(t1.get$length(data), 4)); i += 4) {
      value = t1.$index(data, i + 3);
      t2 = i + 0;
      t1.$indexSet(data, t2, $.$$tdiv($.$$mul(t1.$index(data, t2), value), 255));
      t2 = i + 1;
      t1.$indexSet(data, t2, $.$$tdiv($.$$mul(t1.$index(data, t2), value), 255));
      t2 = i + 2;
      t1.$indexSet(data, t2, $.$$tdiv($.$$mul(t1.$index(data, t2), value), 255));
    }
  else
    for (t1 = $.getInterceptor$JSArrayJSString(data), i = 0; $.CONSTANT.$le(i, $.$$sub(t1.get$length(data), 4)); i += 4) {
      value = t1.$index(data, i + 0);
      t2 = i + 1;
      t1.$indexSet(data, t2, $.$$tdiv($.$$mul(t1.$index(data, t2), value), 255));
      t2 = i + 2;
      t1.$indexSet(data, t2, $.$$tdiv($.$$mul(t1.$index(data, t2), value), 255));
      t2 = i + 3;
      t1.$indexSet(data, t2, $.$$tdiv($.$$mul(t1.$index(data, t2), value), 255));
    }
};

$._unpremultiplyAlpha = function(data) {
  var i, alpha, t1, t2, t3, t4;
  if (typeof data !== "object" || data === null || (data.constructor !== Array || !!data.immutable$list) && !data.$isJavaScriptIndexingBehavior())
    return $._unpremultiplyAlpha$bailout(1, data);
  if ($.get$_isLittleEndianSystem() === true)
    for (i = 0; i <= data.length - 4; i += 4) {
      alpha = data[i + 3];
      if ($.$$gt(alpha, 0) === true) {
        t1 = i + 0;
        if (t1 >= data.length)
          throw $.ioore(t1);
        t2 = $.$$tdiv($.$$mul(data[t1], 255), alpha);
        t3 = data.length;
        if (t1 >= t3)
          throw $.ioore(t1);
        data[t1] = t2;
        t2 = i + 1;
        if (t2 >= t3)
          throw $.ioore(t2);
        t1 = $.$$tdiv($.$$mul(data[t2], 255), alpha);
        t4 = data.length;
        if (t2 >= t4)
          throw $.ioore(t2);
        data[t2] = t1;
        t1 = i + 2;
        if (t1 >= t4)
          throw $.ioore(t1);
        t2 = $.$$tdiv($.$$mul(data[t1], 255), alpha);
        if (t1 >= data.length)
          throw $.ioore(t1);
        data[t1] = t2;
      }
    }
  else
    for (i = 0; i <= data.length - 4; i += 4) {
      alpha = data[i + 0];
      if ($.$$gt(alpha, 0) === true) {
        t1 = i + 1;
        if (t1 >= data.length)
          throw $.ioore(t1);
        t2 = $.$$tdiv($.$$mul(data[t1], 255), alpha);
        t3 = data.length;
        if (t1 >= t3)
          throw $.ioore(t1);
        data[t1] = t2;
        t2 = i + 2;
        if (t2 >= t3)
          throw $.ioore(t2);
        t1 = $.$$tdiv($.$$mul(data[t2], 255), alpha);
        t4 = data.length;
        if (t2 >= t4)
          throw $.ioore(t2);
        data[t2] = t1;
        t1 = i + 3;
        if (t1 >= t4)
          throw $.ioore(t1);
        t2 = $.$$tdiv($.$$mul(data[t1], 255), alpha);
        if (t1 >= data.length)
          throw $.ioore(t1);
        data[t1] = t2;
      }
    }
};

$._unpremultiplyAlpha$bailout = function(state0, data) {
  var t1, i, alpha, t2;
  if ($.get$_isLittleEndianSystem() === true)
    for (t1 = $.getInterceptor$JSArrayJSString(data), i = 0; $.CONSTANT.$le(i, $.$$sub(t1.get$length(data), 4)); i += 4) {
      alpha = t1.$index(data, i + 3);
      if ($.$$gt(alpha, 0) === true) {
        t2 = i + 0;
        t1.$indexSet(data, t2, $.$$tdiv($.$$mul(t1.$index(data, t2), 255), alpha));
        t2 = i + 1;
        t1.$indexSet(data, t2, $.$$tdiv($.$$mul(t1.$index(data, t2), 255), alpha));
        t2 = i + 2;
        t1.$indexSet(data, t2, $.$$tdiv($.$$mul(t1.$index(data, t2), 255), alpha));
      }
    }
  else
    for (t1 = $.getInterceptor$JSArrayJSString(data), i = 0; $.CONSTANT.$le(i, $.$$sub(t1.get$length(data), 4)); i += 4) {
      alpha = t1.$index(data, i + 0);
      if ($.$$gt(alpha, 0) === true) {
        t2 = i + 1;
        t1.$indexSet(data, t2, $.$$tdiv($.$$mul(t1.$index(data, t2), 255), alpha));
        t2 = i + 2;
        t1.$indexSet(data, t2, $.$$tdiv($.$$mul(t1.$index(data, t2), 255), alpha));
        t2 = i + 3;
        t1.$indexSet(data, t2, $.$$tdiv($.$$mul(t1.$index(data, t2), 255), alpha));
      }
    }
};

$._getBoundsTransformedHelper = function(matrix, width, height, returnRectangle) {
  var t1, x2, y2, t2, x3, y3, x4, y4, left, $top, right, bottom;
  t1 = $.getInterceptor$JSNumber(width);
  x2 = t1.$mul(width, matrix.get$a());
  y2 = t1.$mul(width, matrix.get$b());
  t2 = $.getInterceptor$JSNumber(height);
  x3 = $.$$add(t1.$mul(width, matrix.get$a()), t2.$mul(height, matrix.get$c()));
  y3 = $.$$add(t1.$mul(width, matrix.get$b()), t2.$mul(height, matrix.get$d()));
  x4 = t2.$mul(height, matrix.get$c());
  y4 = t2.$mul(height, matrix.get$d());
  left = $.CONSTANT.$gt(0, x2) ? x2 : 0;
  if ($.$$gt(left, x3) === true)
    left = x3;
  if ($.$$gt(left, x4) === true)
    left = x4;
  $top = $.CONSTANT.$gt(0, y2) ? y2 : 0;
  if ($.$$gt($top, y3) === true)
    $top = y3;
  if ($.$$gt($top, y4) === true)
    $top = y4;
  right = $.CONSTANT.$lt(0, x2) ? x2 : 0;
  if ($.$$lt(right, x3) === true)
    right = x3;
  if ($.$$lt(right, x4) === true)
    right = x4;
  bottom = $.CONSTANT.$lt(0, y2) ? y2 : 0;
  if ($.$$lt(bottom, y3) === true)
    bottom = y3;
  if ($.$$lt(bottom, y4) === true)
    bottom = y4;
  if (returnRectangle == null)
    returnRectangle = $.Rectangle$zero();
  returnRectangle.set$x($.$$add(matrix.get$tx(), left));
  returnRectangle.set$y($.$$add(matrix.get$ty(), $top));
  returnRectangle.set$width($.$$sub(right, left));
  returnRectangle.set$height($.$$sub(bottom, $top));
  return returnRectangle;
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.$$throw.$is_TimerCallback1 = true;
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.DartError_toStringWrapper.$is_TimerCallback0 = true;
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullDataHandler.$is_TimerCallback1 = true;
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
$._nullDoneHandler.$is_TimerCallback0 = true;
$.Element__determineMouseWheelEventType.call$1 = $.Element__determineMouseWheelEventType;
$.Element__determineMouseWheelEventType.$name = "Element__determineMouseWheelEventType";
$.drawFilters.call$1 = $.drawFilters;
$.drawFilters.$name = "drawFilters";
Isolate.$finishClasses($$);
$$ = {};
$.EntrySync = {builtin$cls: 'EntrySync'};
$.StyleSheet = {builtin$cls: 'StyleSheet'};
$.List = {builtin$cls: 'List'};
$.Map = {builtin$cls: 'Map'};
$.num = {builtin$cls: 'num'};
$.Entry = {builtin$cls: 'Entry'};
$.Match = {builtin$cls: 'Match'};
$.File = {builtin$cls: 'File'};
$.CssRule = {builtin$cls: 'CssRule'};
$.TextTrack = {builtin$cls: 'TextTrack'};
$.String = {builtin$cls: 'String'};
$.TextTrackCue = {builtin$cls: 'TextTrackCue'};
$.ReceivePort = {builtin$cls: 'ReceivePort'};
$.Touch = {builtin$cls: 'Touch'};
$.CssValue = {builtin$cls: 'CssValue'};
$.Animatable = {builtin$cls: 'Animatable'};
$.Gamepad = {builtin$cls: 'Gamepad'};
$.bool = {builtin$cls: 'bool'};
$.Transform = {builtin$cls: 'Transform'};
$.MediaStream = {builtin$cls: 'MediaStream'};
$.$double = {builtin$cls: '$double'};
$.Length = {builtin$cls: 'Length'};
$.Number = {builtin$cls: 'Number'};
$.SourceBuffer = {builtin$cls: 'SourceBuffer'};
$.PathSeg = {builtin$cls: 'PathSeg'};
$.DomPlugin = {builtin$cls: 'DomPlugin'};
$.SpeechGrammar = {builtin$cls: 'SpeechGrammar'};
$.DomMimeType = {builtin$cls: 'DomMimeType'};
$.Node = {builtin$cls: 'Node'};
$.SpeechRecognitionResult = {builtin$cls: 'SpeechRecognitionResult'};
$.SpeechInputResult = {builtin$cls: 'SpeechInputResult'};
$.ClientRect = {builtin$cls: 'ClientRect'};
$._ManagerStub = {builtin$cls: '_ManagerStub'};
$.$int = {builtin$cls: '$int'};
$.ElementInstance = {builtin$cls: 'ElementInstance'};
$.CONSTANT4 = new Isolate.$isolateProperties._NullKey();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT39 = Isolate.makeConstantList([]);
$.CONSTANT15 = new Isolate.$isolateProperties.EventStreamProvider("keydown");
$.CONSTANT24 = new Isolate.$isolateProperties.EventStreamProvider0("touchEnd");
$.CONSTANT38 = new Isolate.$isolateProperties.Object();
$.CONSTANT20 = new Isolate.$isolateProperties.EventStreamProvider("touchenter");
$.CONSTANT9 = new Isolate.$isolateProperties.EventStreamProvider("error");
$.CONSTANT7 = new Isolate.$isolateProperties._LinkedHashTableHeadMarker();
$.CONSTANT18 = new Isolate.$isolateProperties.EventStreamProvider0("touchCancel");
$.CONSTANT19 = new Isolate.$isolateProperties.EventStreamProvider("touchleave");
$.CONSTANT35 = new Isolate.$isolateProperties.EventStreamProvider0("mouseUp");
$.CONSTANT23 = new Isolate.$isolateProperties.EventStreamProvider("touchend");
$.CONSTANT13 = new Isolate.$isolateProperties.EventStreamProvider("keyup");
$.CONSTANT33 = new Isolate.$isolateProperties.EventStreamProvider0("mouseMove");
$.CONSTANT21 = new Isolate.$isolateProperties.EventStreamProvider("touchmove");
$.CONSTANT14 = new Isolate.$isolateProperties.EventStreamProvider0("keyUp");
$.CONSTANT17 = new Isolate.$isolateProperties.EventStreamProvider("touchcancel");
$.CONSTANT28 = new Isolate.$isolateProperties.EventStreamProvider("mousewheel");
$.CONSTANT16 = new Isolate.$isolateProperties.EventStreamProvider0("keyDown");
$.CONSTANT36 = new Isolate.$isolateProperties.EventStreamProvider("mousedown");
$.CONSTANT10 = new Isolate.$isolateProperties.Duration(0);
$.CONSTANT12 = new Isolate.$isolateProperties.EventStreamProvider("keypress");
$.CONSTANT5 = new Isolate.$isolateProperties.JSNull();
$.CONSTANT0 = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT1 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT = new Isolate.$isolateProperties.JSInt();
$.CONSTANT8 = new Isolate.$isolateProperties.JSDouble();
$.CONSTANT2 = new Isolate.$isolateProperties.JSString();
$.CONSTANT11 = new Isolate.$isolateProperties.EventStreamProvider("load");
$.CONSTANT6 = new Isolate.$isolateProperties.JSNumber();
$.CONSTANT37 = new Isolate.$isolateProperties.EventStreamProvider0("mouseDown");
$.CONSTANT25 = new Isolate.$isolateProperties.EventStreamProvider("touchstart");
$.CONSTANT34 = new Isolate.$isolateProperties.EventStreamProvider("mouseup");
$.CONSTANT22 = new Isolate.$isolateProperties.EventStreamProvider0("touchMove");
$.CONSTANT26 = new Isolate.$isolateProperties._DelayedDone();
$.CONSTANT27 = new Isolate.$isolateProperties._CustomEventStreamProvider(Isolate.$isolateProperties.Element__determineMouseWheelEventType);
$.CONSTANT29 = new Isolate.$isolateProperties.EventStreamProvider0("mouseWheel");
$.CONSTANT30 = new Isolate.$isolateProperties.EventStreamProvider("mouseout");
$.CONSTANT32 = new Isolate.$isolateProperties.EventStreamProvider("mousemove");
$.CONSTANT31 = new Isolate.$isolateProperties.EventStreamProvider0("mouseOut");
$.CONSTANT3 = new Isolate.$isolateProperties._DeadEntry();
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$._cachedBrowserPrefix = null;
$.stage = null;
$.renderLoop = null;
$._Touch__globalTouchPointID = 0;
$.Mouse__customCursor = "auto";
$.Mouse__isCursorHidden = false;
$.Multitouch__initialized = false;
$.Multitouch__supportsTouchEvents = false;
$.Multitouch__maxTouchPoints = 0;
$.Multitouch__inputMode = "none";
$.$$and = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$and(receiver, a0);
};
$.$$mul = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$mul(receiver, a0);
};
$.$$add = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$add(receiver, a0);
};
$.$$sub = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$sub(receiver, a0);
};
$.$$div = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$div(receiver, a0);
};
$.$$lt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$lt(receiver, a0);
};
$.$$shl = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$shl(receiver, a0);
};
$.$$le = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$le(receiver, a0);
};
$.$$eq = function(receiver, a0) {
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$$gt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$gt(receiver, a0);
};
$.$$ge = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$ge(receiver, a0);
};
$.$$shr = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$shr(receiver, a0);
};
$.abs = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).abs$0(receiver);
};
$.add = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).add$1(receiver, a0);
};
$.addLast = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).addLast$1(receiver, a0);
};
$.allMatches = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).allMatches$1(receiver, a0);
};
$.ceil = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).ceil$0(receiver);
};
$.contains = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).contains$2(receiver, a0, a1);
};
$.forEach = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).forEach$1(receiver, a0);
};
$.hashCode = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.indexOf = function(receiver, a0) {
  return $.getInterceptor$JSArrayJSString(receiver).indexOf$1(receiver, a0);
};
$.insertRange = function(receiver, a0, a1, a2) {
  return $.getInterceptor$JSArray(receiver).insertRange$3(receiver, a0, a1, a2);
};
$.isEmpty = function(receiver) {
  return $.getInterceptor$JSArrayJSString(receiver).get$isEmpty(receiver);
};
$.isEven = function(receiver) {
  return $.getInterceptor$JSInt(receiver).get$isEven(receiver);
};
$.isNaN = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).get$isNaN(receiver);
};
$.length = function(receiver) {
  return $.getInterceptor$JSArrayJSString(receiver).get$length(receiver);
};
$.remainder = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).remainder$1(receiver, a0);
};
$.remove = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).remove$1(receiver, a0);
};
$.removeAt = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).removeAt$1(receiver, a0);
};
$.replaceAll = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).replaceAll$2(receiver, a0, a1);
};
$.round = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).round$0(receiver);
};
$.split = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).split$1(receiver, a0);
};
$.substring = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).substring$2(receiver, a0, a1);
};
$.toInt = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).toInt$0(receiver);
};
$.toList = function(receiver) {
  return $.getInterceptor$JSArray(receiver).toList$0(receiver);
};
$.toString = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.$$index = function(receiver, a0) {
  return $.getInterceptor$JSArrayJSString(receiver).$index(receiver, a0);
};
$.$$indexSet = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).$indexSet(receiver, a0, a1);
};
$.$$xor = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$xor(receiver, a0);
};
$.iterator = function(receiver) {
  return $.getInterceptor$JSArray(receiver).get$iterator(receiver);
};
$.$$negate = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).$negate(receiver);
};
$.$$or = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$or(receiver, a0);
};
$.$$tdiv = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$tdiv(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArrayJSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSInt = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSNumber.prototype;
  }
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "quoteRegExp", "quoteRegExp", "get$quoteRegExp", function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
});
Isolate.$lazy($, "_isLittleEndianSystem", "_isLittleEndianSystem", "get$_isLittleEndianSystem", function() {
  return $._checkLittleEndianSystem();
});
Isolate.$lazy($, "enterFrame", "_EventStreamIndex_enterFrame", "get$_EventStreamIndex_enterFrame", function() {
  return $._EventStreamIndex$();
});
Isolate.$lazy($, "_mouseCursorChangedEvent", "Mouse__mouseCursorChangedEvent", "get$Mouse__mouseCursorChangedEvent", function() {
  return $.StreamController$(null, null);
});
Isolate.$lazy($, "_onMouseCursorChanged", "Mouse__onMouseCursorChanged", "get$Mouse__onMouseCursorChanged", function() {
  return $.get$Mouse__mouseCursorChangedEvent().get$stream().asBroadcastStream$0();
});
Isolate.$lazy($, "_inputModeChangedEvent", "Multitouch__inputModeChangedEvent", "get$Multitouch__inputModeChangedEvent", function() {
  return $.StreamController$(null, null);
});
Isolate.$lazy($, "_onInputModeChanged", "Multitouch__onInputModeChanged", "get$Multitouch__onInputModeChanged", function() {
  return $.get$Multitouch__inputModeChangedEvent().get$stream().asBroadcastStream$0();
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $isCollection: function() {
    return false;
  },
  $isList: function() {
    return false;
  },
  $isMap: function() {
    return false;
  },
  $isImageData: function() {
    return false;
  },
  toString$0: function() {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function() {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function() {
    return this.id;
  },
  set$id: function(i) {
    this.id = i;
  },
  set$onmessage: function(f) {
    this.onmessage = f;
  },
  postMessage$1: function(msg) {
    this.postMessage(msg);
  },
  terminate$0: function() {
    this.terminate();
  }
});

$.$defineNativeClass("HTMLAnchorElement", {"": "target=,type>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLAreaElement", {"": "target="});

$.$defineNativeClass("HTMLBaseElement", {"": "target="});

$.$defineNativeClass("Blob", {"": "size>,type>"});

$.$defineNativeClass("HTMLBodyElement", {
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  get$onLoad: function() {
    return $.CONSTANT11.forTarget$1(this);
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "type>"});

$.$defineNativeClass("HTMLCanvasElement", {"": "height=,width=",
  getContext$2: function(contextId, attrs) {
    var t1 = $ === attrs;
    if (t1)
      attrs = null;
    if (!t1)
      return this.getContext(contextId, $.convertDartToNative_Dictionary(attrs));
    return this.getContext(contextId);
  },
  getContext$1: function(contextId) {
    return this.getContext$2(contextId, $);
  },
  get$context2d: function() {
    return this.getContext$1("2d");
  }
});

$.$defineNativeClass("CanvasRenderingContext", {"": "canvas>"});

$.$defineNativeClass("CanvasRenderingContext2D", {"": "fillStyle<,font=,globalAlpha<,lineWidth<,strokeStyle<,textAlign<,textBaseline<",
  clearRect$4: function(x, y, width, height) {
    return this.clearRect(x,y,width,height);
  },
  createImageData$2: function(imagedata_OR_sw, sh) {
    var t1 = $ === sh;
    if (t1)
      sh = null;
    if ((typeof imagedata_OR_sw === "object" && imagedata_OR_sw !== null && imagedata_OR_sw.$isImageData() || imagedata_OR_sw == null) && t1)
      return $._convertNativeToDart_ImageData(this.createImageData($._convertDartToNative_ImageData(imagedata_OR_sw)));
    if (typeof imagedata_OR_sw === "number" || imagedata_OR_sw == null)
      return $._convertNativeToDart_ImageData(this.createImageData(imagedata_OR_sw, sh));
    throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
  },
  drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
    return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
  },
  drawImage$3: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y) {
    return this.drawImage(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y);
  },
  fillRect$4: function(x, y, width, height) {
    return this.fillRect(x,y,width,height);
  },
  fillText$4: function(text, x, y, maxWidth) {
    return this.fillText(text,x,y,maxWidth);
  },
  fillText$3: function(text, x, y) {
    return this.fillText(text, x, y);
  },
  getImageData$4: function(sx, sy, sw, sh) {
    return $._convertNativeToDart_ImageData(this.getImageData(sx, sy, sw, sh));
  },
  measureText$1: function(text) {
    return this.measureText(text);
  },
  putImageData$7: function(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
    var t1, t2, t3, t4;
    t1 = $ === dirtyX;
    if (t1)
      dirtyX = null;
    t2 = $ === dirtyY;
    if (t2)
      dirtyY = null;
    t3 = $ === dirtyWidth;
    if (t3)
      dirtyWidth = null;
    t4 = $ === dirtyHeight;
    if (t4)
      dirtyHeight = null;
    if (t1 && t2 && t3 && t4) {
      this.putImageData($._convertDartToNative_ImageData(imagedata), dx, dy);
      return;
    }
    this.putImageData($._convertDartToNative_ImageData(imagedata), dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);
    return;
  },
  putImageData$3: function(imagedata, dx, dy) {
    return this.putImageData$7(imagedata, dx, dy, $, $, $, $);
  },
  restore$0: function() {
    return this.restore();
  },
  save$0: function() {
    return this.save();
  },
  setTransform$6: function(m11, m12, m21, m22, dx, dy) {
    return this.setTransform(m11,m12,m21,m22,dx,dy);
  },
  strokeRect$5: function(x, y, width, height, lineWidth) {
    return this.strokeRect(x,y,width,height,lineWidth);
  },
  strokeRect$4: function(x, y, width, height) {
    return this.strokeRect(x, y, width, height);
  },
  transform$6: function(m11, m12, m21, m22, dx, dy) {
    return this.transform(m11,m12,m21,m22,dx,dy);
  }
});

$.$defineNativeClass("CharacterData", {"": "data>,length>"});

$.$defineNativeClass("ClientRect", {"": "bottom>,height>,left>,right>,top>,width>"});

$.$defineNativeClass("CompositionEvent", {"": "data>"});

$.$defineNativeClass("CSSFontFaceRule", {"": "style>"});

$.$defineNativeClass("WebKitCSSKeyframeRule", {"": "style>"});

$.$defineNativeClass("CSSPageRule", {"": "style>"});

$.$defineNativeClass("CSSRule", {"": "type>"});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length>",
  getPropertyValue$1: function(propertyName) {
    var propValue = this.getPropertyValue(propertyName);
    return !(propValue == null) ? propValue : "";
  },
  setProperty$3: function(propertyName, value, priority) {
    this.setProperty(propertyName, value, priority);
    if (!!this.setAttribute)
      this.setAttribute(propertyName, value);
  },
  get$bottom: function() {
    return this.getPropertyValue$1("bottom");
  },
  get$color: function() {
    return this.getPropertyValue$1("color");
  },
  set$cursor: function(value) {
    this.setProperty$3("cursor", value, "");
  },
  get$font: function() {
    return this.getPropertyValue$1("font");
  },
  set$font: function(value) {
    this.setProperty$3("font", value, "");
  },
  get$height: function() {
    return this.getPropertyValue$1("height");
  },
  set$height: function(value) {
    this.setProperty$3("height", value, "");
  },
  get$left: function() {
    return this.getPropertyValue$1("left");
  },
  get$mask: function() {
    return this.getPropertyValue$1($.S($._browserPrefix()) + "mask");
  },
  get$right: function() {
    return this.getPropertyValue$1("right");
  },
  get$size: function() {
    return this.getPropertyValue$1("size");
  },
  set$src: function(value) {
    this.setProperty$3("src", value, "");
  },
  set$textAlign: function(value) {
    this.setProperty$3("text-align", value, "");
  },
  get$top: function() {
    return this.getPropertyValue$1("top");
  },
  get$transform: function() {
    return this.getPropertyValue$1($.S($._browserPrefix()) + "transform");
  },
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.get$transform().call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  },
  get$width: function() {
    return this.getPropertyValue$1("width");
  },
  set$width: function(value) {
    this.setProperty$3("width", value, "");
  }
});

$.$defineNativeClass("CSSStyleRule", {"": "style>"});

$.$defineNativeClass("Document", {
  $$dom_createElement$1: function(tagName) {
    return this.createElement(tagName);
  },
  $$dom_getElementById$1: function(elementId) {
    return this.getElementById(elementId);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  get$onKeyDown: function() {
    return $.CONSTANT15.forTarget$1(this);
  },
  get$onKeyPress: function() {
    return $.CONSTANT12.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT13.forTarget$1(this);
  },
  get$onLoad: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  get$onMouseDown: function() {
    return $.CONSTANT36.forTarget$1(this);
  },
  get$onMouseMove: function() {
    return $.CONSTANT32.forTarget$1(this);
  },
  get$onMouseOut: function() {
    return $.CONSTANT30.forTarget$1(this);
  },
  get$onMouseUp: function() {
    return $.CONSTANT34.forTarget$1(this);
  },
  get$onMouseWheel: function() {
    return $.CONSTANT27.forTarget$1(this);
  },
  get$onTouchCancel: function() {
    return $.CONSTANT17.forTarget$1(this);
  },
  get$onTouchEnd: function() {
    return $.CONSTANT23.forTarget$1(this);
  },
  get$onTouchMove: function() {
    return $.CONSTANT21.forTarget$1(this);
  },
  get$onTouchStart: function() {
    return $.CONSTANT25.forTarget$1(this);
  },
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors))
      return this.$$dom_getElementById$1($.CONSTANT2.substring$1(selectors, 1));
    return this.$$dom_querySelector$1(selectors);
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("MimeType", {"": "type>"});

$.$defineNativeClass("MimeTypeArray", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.DomMimeType]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.DomMimeType]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Plugin", {"": "length>"});

$.$defineNativeClass("PluginArray", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.DomPlugin]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.DomPlugin]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("DOMStringList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.String]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.String]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Element", {"": "id>,style>",
  focus$0: function() {
    return this.focus();
  },
  getBoundingClientRect$0: function() {
    return this.getBoundingClientRect();
  },
  get$onError: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$onError")) {
      return $.CONSTANT9.forTarget$1(this);
    } else
      return Object.prototype.get$onError.call(this);
  },
  get$onKeyDown: function() {
    return $.CONSTANT15.forTarget$1(this);
  },
  get$onKeyPress: function() {
    return $.CONSTANT12.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT13.forTarget$1(this);
  },
  get$onLoad: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$onLoad")) {
      return $.CONSTANT11.forTarget$1(this);
    } else
      return Object.prototype.get$onLoad.call(this);
  },
  get$onMouseDown: function() {
    return $.CONSTANT36.forTarget$1(this);
  },
  get$onMouseMove: function() {
    return $.CONSTANT32.forTarget$1(this);
  },
  get$onMouseOut: function() {
    return $.CONSTANT30.forTarget$1(this);
  },
  get$onMouseUp: function() {
    return $.CONSTANT34.forTarget$1(this);
  },
  get$onMouseWheel: function() {
    return $.CONSTANT27.forTarget$1(this);
  },
  get$onTouchCancel: function() {
    return $.CONSTANT17.forTarget$1(this);
  },
  get$onTouchEnd: function() {
    return $.CONSTANT23.forTarget$1(this);
  },
  get$onTouchEnter: function() {
    return $.CONSTANT20.forTarget$1(this);
  },
  get$onTouchLeave: function() {
    return $.CONSTANT19.forTarget$1(this);
  },
  get$onTouchMove: function() {
    return $.CONSTANT21.forTarget$1(this);
  },
  get$onTouchStart: function() {
    return $.CONSTANT25.forTarget$1(this);
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "align>,height=,src<,type>,width="});

$.$defineNativeClass("Entry", {
  remove$2: function(successCallback, errorCallback) {
    return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
  },
  remove$1: function(successCallback) {
    successCallback = $.convertDartClosureToJS(successCallback, 0);
    return this.remove(successCallback);
  }
});

$.$defineNativeClass("Event", {"": "bubbles>,type>",
  get$target: function() {
    return $._convertNativeToDart_EventTarget(this.target);
  },
  preventDefault$0: function() {
    return this.preventDefault();
  }
});

$.$defineNativeClass("EventException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("EventTarget", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  },
  dispatchEvent$1: function($event) {
    if (Object.getPrototypeOf(this).hasOwnProperty("dispatchEvent$1")) {
      return this.dispatchEvent($event);
    } else
      return Object.prototype.dispatchEvent$1.call(this, $event);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
});

$.$defineNativeClass("HTMLFieldSetElement", {"": "type>"});

$.$defineNativeClass("FileException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("FileList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.File]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.File]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Float32Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.num]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.num]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Float64Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.num]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.num]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>,target=",
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("Gamepad", {"": "id>"});

$.$defineNativeClass("HTMLAllCollection", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLDocument", {
  register$2: function(tagName, elementClass) {
    throw $.$$throw($._ExceptionImplementation$("Not yet implemented"));
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height=,src<,width="});

$.$defineNativeClass("ImageData", {"": "data>,height>,width>",
  $isImageData: function() {
    return true;
  },
  $asImageData: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLImageElement", {"": "height=,naturalHeight>,naturalWidth>,src<,width=,x>,y>",
  complete$1: function(arg0) {
    return this.complete.call$1(arg0);
  }
});

$.$defineNativeClass("HTMLInputElement", {"": "height=,pattern>,size>,src<,type>,width="});

$.$defineNativeClass("Int16Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Int32Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Int8Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("KeyboardEvent", {"": "altKey>,ctrlKey>,keyLocation>,shiftKey>",
  get$keyCode: function() {
    return this.keyCode;
  },
  get$charCode: function() {
    return this.charCode;
  }
});

$.$defineNativeClass("HTMLKeygenElement", {"": "type>"});

$.$defineNativeClass("HTMLLIElement", {"": "type>"});

$.$defineNativeClass("HTMLLinkElement", {"": "type>"});

$.$defineNativeClass("HTMLMediaElement", {"": "error>,src<",
  pause$0: function() {
    return this.pause();
  }
});

$.$defineNativeClass("MediaStream", {"": "id>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function($event) {
    return this.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStreamEvent", {"": "stream>"});

$.$defineNativeClass("MessageEvent", {"": "ports>",
  get$data: function() {
    return $.convertNativeToDart_SerializedScriptValue(this.data);
  }
});

$.$defineNativeClass("MouseEvent", {"": "altKey>,button>,clientX>,clientY>,ctrlKey>,shiftKey>"});

$.$defineNativeClass("Navigator", {"": "userAgent>"});

$.$defineNativeClass("Node", {"": "parent:parentElement~",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function($event) {
    return this.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLOListElement", {"": "type>"});

$.$defineNativeClass("HTMLObjectElement", {"": "data>,height=,type>,width="});

$.$defineNativeClass("HTMLOutputElement", {"": "type>"});

$.$defineNativeClass("ProcessingInstruction", {"": "data>,target>"});

$.$defineNativeClass("RangeException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLScriptElement", {"": "src<,type>"});

$.$defineNativeClass("HTMLSelectElement", {"": "length>,size>,type>"});

$.$defineNativeClass("SourceBufferList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function($event) {
    return this.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SourceBuffer]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SourceBuffer]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLSourceElement", {"": "src<,type>"});

$.$defineNativeClass("SpeechGrammar", {"": "src<"});

$.$defineNativeClass("SpeechGrammarList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SpeechGrammar]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SpeechGrammar]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SpeechRecognitionError", {"": "error>"});

$.$defineNativeClass("SpeechRecognitionResult", {"": "length>"});

$.$defineNativeClass("SQLResultSetRowList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Map]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Map]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Storage", {
  containsKey$1: function(key) {
    return !(this.getItem(key) == null);
  },
  $index: function(key) {
    return this.getItem(key);
  },
  $indexSet: function(key, value) {
    this.setItem(key, value);
  },
  remove$1: function(key) {
    var value = this.$index(key);
    this.removeItem(key);
    return value;
  },
  forEach$1: function(f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = this.key(i);
      if (key == null)
        return;
      f.call$2(key, this.$index(key));
    }
  },
  get$keys: function() {
    var keys = [];
    this.forEach$1(new $.Storage_keys_anon(keys));
    return keys;
  },
  get$values: function() {
    var values = [];
    this.forEach$1(new $.Storage_values_anon(values));
    return values;
  },
  get$length: function() {
    return this.length;
  },
  get$isEmpty: function() {
    return this.key(0) == null;
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return function () { return [$.String, $.String]; };
  }
});

$.$defineNativeClass("HTMLStyleElement", {"": "type>"});

$.$defineNativeClass("StyleSheet", {"": "type>"});

$.$defineNativeClass("HTMLTextAreaElement", {"": "type>"});

$.$defineNativeClass("TextEvent", {"": "data>"});

$.$defineNativeClass("TextMetrics", {"": "width>"});

$.$defineNativeClass("TextTrack", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCue", {"": "align>,id>,size>",
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCueList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.TextTrackCue]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.TextTrackCue]; };
  }
});

$.$defineNativeClass("TextTrackList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.TextTrack]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.TextTrack]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Touch", {"": "clientX>,clientY>,identifier>",
  get$target: function() {
    return $._convertNativeToDart_EventTarget(this.target);
  }
});

$.$defineNativeClass("TouchEvent", {"": "altKey>,changedTouches>,ctrlKey>,shiftKey>"});

$.$defineNativeClass("TouchList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Touch]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Touch]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLTrackElement", {"": "src<"});

$.$defineNativeClass("Uint16Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint32Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint8Array", {
  get$length: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return this.length;
    } else
      return Object.prototype.get$length.call(this);
  },
  $index: function(index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$index")) {
      return this[index];
    } else
      return Object.prototype.$index.call(this, index);
  },
  $indexSet: function(index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$indexSet")) {
      this[index] = value;
    } else
      return Object.prototype.$indexSet.call(this, index, value);
  },
  get$iterator: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(this);
    } else
      return Object.prototype.get$iterator.call(this);
  },
  forEach$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, f);
  },
  toList$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$0")) {
      return $.List_List$from(this);
    } else
      return Object.prototype.toList$0.call(this);
  },
  get$isEmpty: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return $.$$eq(this.get$length(), 0);
    } else
      return Object.prototype.get$isEmpty.call(this);
  },
  add$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, value);
  },
  addLast$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addLast$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addLast$1.call(this, value);
  },
  indexOf$2: function(element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(this, element, start, this.get$length());
    } else
      return Object.prototype.indexOf$2.call(this, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeAt$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeAt$1.call(this, pos);
  },
  removeLast$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this);
  },
  remove$1: function(object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, object);
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    if (Object.getPrototypeOf(this).hasOwnProperty("insertRange$3")) {
      throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
    } else
      return Object.prototype.insertRange$3.call(this, start, rangeLength, initialValue);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height=,width="});

$.$defineNativeClass("WebKitCSSFilterRule", {"": "style>"});

$.$defineNativeClass("DOMWindow", {"": "navigator>",
  requestAnimationFrame$1: function(callback) {
    this._ensureRequestAnimationFrame$0();
    return this._requestAnimationFrame$1(callback);
  },
  _requestAnimationFrame$1: function(callback) {
    return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function() {
    if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
  },
  get$parent: function() {
    return $._convertNativeToDart_Window(this.parent);
  },
  get$top: function() {
    return $._convertNativeToDart_Window(this.top);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  dispatchEvent$1: function(evt) {
    return this.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  get$onKeyDown: function() {
    return $.CONSTANT15.forTarget$1(this);
  },
  get$onKeyPress: function() {
    return $.CONSTANT12.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT13.forTarget$1(this);
  },
  get$onLoad: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  get$onMouseDown: function() {
    return $.CONSTANT36.forTarget$1(this);
  },
  get$onMouseMove: function() {
    return $.CONSTANT32.forTarget$1(this);
  },
  get$onMouseOut: function() {
    return $.CONSTANT30.forTarget$1(this);
  },
  get$onMouseUp: function() {
    return $.CONSTANT34.forTarget$1(this);
  },
  get$onMouseWheel: function() {
    return $.CONSTANT27.forTarget$1(this);
  },
  get$onTouchCancel: function() {
    return $.CONSTANT17.forTarget$1(this);
  },
  get$onTouchEnd: function() {
    return $.CONSTANT23.forTarget$1(this);
  },
  get$onTouchMove: function() {
    return $.CONSTANT21.forTarget$1(this);
  },
  get$onTouchStart: function() {
    return $.CONSTANT25.forTarget$1(this);
  }
});

$.$defineNativeClass("XPathException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("ClientRectList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.ClientRect]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.ClientRect]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("CSSRuleList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.CssRule]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.CssRule]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("CSSValueList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.CssValue]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.CssValue]; };
  }
});

$.$defineNativeClass("EntryArray", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Entry]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Entry]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("EntryArraySync", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.EntrySync]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.EntrySync]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("GamepadList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Gamepad]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Gamepad]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("MediaStreamList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.MediaStream]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.MediaStream]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SpeechInputResultList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SpeechInputResult]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SpeechInputResult]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SpeechRecognitionResultList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SpeechRecognitionResult]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SpeechRecognitionResult]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("StyleSheetList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.StyleSheet]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.StyleSheet]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGAElement", {"": "target>",
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGCircleElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGClipPathElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGDefsElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGElementInstance", {
  get$onError: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  get$onKeyDown: function() {
    return $.CONSTANT15.forTarget$1(this);
  },
  get$onKeyPress: function() {
    return $.CONSTANT12.forTarget$1(this);
  },
  get$onKeyUp: function() {
    return $.CONSTANT13.forTarget$1(this);
  },
  get$onLoad: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  get$onMouseDown: function() {
    return $.CONSTANT36.forTarget$1(this);
  },
  get$onMouseMove: function() {
    return $.CONSTANT32.forTarget$1(this);
  },
  get$onMouseOut: function() {
    return $.CONSTANT30.forTarget$1(this);
  },
  get$onMouseUp: function() {
    return $.CONSTANT34.forTarget$1(this);
  },
  get$onMouseWheel: function() {
    return $.CONSTANT28.forTarget$1(this);
  }
});

$.$defineNativeClass("SVGEllipseElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "type>,height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFECompositeElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEFloodElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEImageElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEMergeElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEPointLightElement", {"": "x>,y>"});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFESpotLightElement", {"": "x>,y>"});

$.$defineNativeClass("SVGFETileElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "type>,height>,width>,x>,y>"});

$.$defineNativeClass("SVGFilterElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height>,width>,x>,y>",
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGGElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGImageElement", {"": "height>,width>,x>,y>",
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGLengthList", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Length]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Length]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGLineElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGMaskElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGMatrix", {"": "a>,b>,c>,d>"});

$.$defineNativeClass("SVGNumberList", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Number]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Number]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGPathElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGPathSegArcAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegArcRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoCubicAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoCubicRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoCubicSmoothAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoCubicSmoothRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoQuadraticAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoQuadraticRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoQuadraticSmoothAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegCurvetoQuadraticSmoothRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegLinetoAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegLinetoHorizontalAbs", {"": "x="});

$.$defineNativeClass("SVGPathSegLinetoHorizontalRel", {"": "x="});

$.$defineNativeClass("SVGPathSegLinetoRel", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegLinetoVerticalAbs", {"": "y="});

$.$defineNativeClass("SVGPathSegLinetoVerticalRel", {"": "y="});

$.$defineNativeClass("SVGPathSegList", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.PathSeg]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.PathSeg]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGPathSegMovetoAbs", {"": "x=,y="});

$.$defineNativeClass("SVGPathSegMovetoRel", {"": "x=,y="});

$.$defineNativeClass("SVGPatternElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGPolygonElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGPolylineElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGRectElement", {"": "height>,width>,x>,y>",
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGScriptElement", {"": "type>"});

$.$defineNativeClass("SVGStringList", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.String]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.String]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGStyleElement", {"": "type>"});

$.$defineNativeClass("SVGElement", {
  get$id: function() {
    return this.id;
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height>,width>,x>,y>",
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGSwitchElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGTextElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGTextPositioningElement", {"": "x>,y>"});

$.$defineNativeClass("SVGTransform", {"": "type>"});

$.$defineNativeClass("SVGTransformList", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  get$length: function() {
    return this.numberOfItems;
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Transform]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Transform]; };
  }
});

$.$defineNativeClass("SVGUseElement", {"": "height>,width>,x>,y>",
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGElementInstanceList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeAt$1: function(pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  insertRange$3: function(start, rangeLength, initialValue) {
    throw $.$$throw($.UnsupportedError$("Cannot insertRange on immutable List."));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.ElementInstance]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.ElementInstance]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGComponentTransferFunctionElement", {"": "type>"});

$.$defineNativeClass("SVGCursorElement", {"": "x>,y>"});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGGlyphRefElement", {"": "x=,y="});

// 183 dynamic classes.
// 327 classes
// 29 !leaf
(function() {
  var v0_TextPositioningElement = "SVGTextPositioningElement|SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTRefElement", v1__SVGComponentTransferFunctionElement = "SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement", v2_MediaElement = "HTMLMediaElement|HTMLVideoElement|HTMLAudioElement", v3_SvgElement = [v0_TextPositioningElement, v1__SVGComponentTransferFunctionElement, "SVGElement|SVGStyledElement|SVGAElement|SVGTextContentElement|SVGTextPathElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFESpecularLightingElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGForeignObjectElement|SVGGElement|SVGImageElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGMarkerElement|SVGMaskElement|SVGLineElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGStopElement|SVGSymbolElement|SVGSVGElement|SVGSwitchElement|SVGTitleElement|SVGUseElement|SVGFEDropShadowElement|SVGGlyphRefElement|SVGMissingGlyphElement|SVGAnimationElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGAnimateColorElement|SVGFEDistantLightElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGMetadataElement|SVGScriptElement|SVGStyleElement|SVGViewElement|SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGCursorElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMPathElement|SVGVKernElement"].join("|"), v4_MouseEvent = "MouseEvent|WheelEvent", v5_Element = [v2_MediaElement, v3_SvgElement, "Element|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement"].join("|"), v6_CharacterData = "CharacterData|Text|CDATASection|Comment", v7_Document = "Document|SVGDocument|HTMLDocument", v8_Node = [v5_Element, v6_CharacterData, v7_Document, "Node|ProcessingInstruction|DocumentFragment|ShadowRoot|Attr|DocumentType|EntityReference|Notation"].join("|"), v9_MediaStream = "MediaStream|LocalMediaStream";
  $.dynamicSetMetadata([["Blob", "Blob|File"], ["CanvasRenderingContext", "CanvasRenderingContext|WebGLRenderingContext|CanvasRenderingContext2D"], ["CharacterData", v6_CharacterData], ["StyleSheet", "StyleSheet|CSSStyleSheet"], ["CSSRule", "CSSRule|WebKitCSSFilterRule|CSSImportRule|WebKitCSSKeyframeRule|CSSFontFaceRule|CSSCharsetRule|WebKitCSSKeyframesRule|CSSMediaRule|CSSStyleRule|CSSUnknownRule|CSSHostRule|CSSPageRule"], ["Uint8Array", "Uint8Array|Uint8ClampedArray"], ["Document", v7_Document], ["SVGTextPositioningElement", v0_TextPositioningElement], ["SVGComponentTransferFunctionElement", v1__SVGComponentTransferFunctionElement], ["SVGElement", v3_SvgElement], ["HTMLMediaElement", v2_MediaElement], ["Element", v5_Element], ["Entry", "Entry|FileEntry|DirectoryEntry"], ["MouseEvent", v4_MouseEvent], ["Event", [v4_MouseEvent, "Event|OverflowEvent|PageTransitionEvent|OfflineAudioCompletionEvent|PopStateEvent|ProgressEvent|XMLHttpRequestProgressEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|UIEvent|TextEvent|TouchEvent|CompositionEvent|KeyboardEvent|SVGZoomEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitTransitionEvent|IDBVersionChangeEvent|ErrorEvent|BeforeLoadEvent|AudioProcessingEvent|DeviceMotionEvent|DeviceOrientationEvent|CustomEvent|MediaKeyEvent|HashChangeEvent|WebKitAnimationEvent|MediaStreamTrackEvent|MediaStreamEvent|CloseEvent|MessageEvent|MutationEvent"].join("|")], ["Node", v8_Node], ["MediaStream", v9_MediaStream], ["EventTarget", [v8_Node, v9_MediaStream, "EventTarget|SourceBufferList|TextTrack|TextTrackCue|TextTrackList|DOMWindow|SVGElementInstance"].join("|")], ["CSSValueList", "CSSValueList|WebKitCSSFilterValue|WebKitCSSMixFunctionValue|WebKitCSSTransformValue"], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["NodeList", "NodeList|RadioNodeList"]]);
})();

$.main.call$0 = $.main;

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field;
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses) {
    var isolateProperties = Isolate.$isolateProperties;
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[''], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass)
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + "}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    return newIsolate;
  };
}
//@ sourceMappingURL=filter.dart.js.map
