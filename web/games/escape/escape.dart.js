// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.HashMapImplementation = {"": ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.CTC);
  t1 = $.get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  hash = (t1 & this._keys.length - 1) >>> 0;
  for (numberOfProbes = 1, insertionIndex = -1; true;) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && $.CTC1 === existingKey)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, this._keys.length);
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForAdding$1$bailout: function(state0, key, t1) {
  var hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  hash = $.and(t1, this._keys.length - 1);
  for (numberOfProbes = 1, insertionIndex = -1; true;) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && $.CTC1 === existingKey)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, this._keys.length);
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForLookup$1: function(key) {
  var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.CTC);
  hash = $.and($.get$hashCode(key), this._keys.length - 1);
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true;) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, this._keys.length);
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, t1, existingKey, numberOfProbes0;
  for (numberOfProbes = 1; true;) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, this._keys.length);
    numberOfProbes = numberOfProbes0;
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, capacity, numberOfFreeOrDeleted, t1;
  newNumberOfEntries = this._numberOfEntries + 1;
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1(this._keys.length * 2);
    return;
  }
  capacity = this._keys.length;
  numberOfFreeOrDeleted = capacity - newNumberOfEntries;
  t1 = this._numberOfDeleted;
  if (t1 > numberOfFreeOrDeleted - t1)
    this._grow$1(capacity);
},
 _grow$1: function(newCapacity) {
  var capacity, oldKeys, oldValues, t1, t2, i, key, value, newIndex, t3;
  capacity = this._keys.length;
  this._loadLimit = $.tdiv(newCapacity * 3, 4);
  oldKeys = this._keys;
  oldValues = this._values;
  this._keys = $._ListImpl_List(newCapacity);
  this._values = $._ListImpl_List(newCapacity);
  for (t1 = oldKeys.length, t2 = oldValues.length, i = 0; i < capacity; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CTC1)
      continue;
    if (i >= t2)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    t3 = this._keys;
    if (newIndex !== (newIndex | 0))
      throw $.iae(newIndex);
    if (newIndex < 0 || newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = key;
    t3 = this._values;
    if (newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = value;
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  var t1, length$, t2, t3, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = t1.length;
  for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
    t1[i] = null;
    if (i >= t3)
      throw $.ioore(i);
    t2[i] = null;
  }
},
 operator$indexSet$2: function(key, value) {
  var index, t1;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  t1 = this._keys;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1 = t1[index];
  if (t1 == null || t1 === $.CTC1)
    this._numberOfEntries = this._numberOfEntries + 1;
  t1 = this._keys;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$index$1: function(key) {
  var index, t1;
  index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 remove$1: function(key) {
  var index, t1, value;
  index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    this._numberOfEntries = this._numberOfEntries - 1;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    value = t1[index];
    t1[index] = null;
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = $.CTC1;
    this._numberOfDeleted = this._numberOfDeleted + 1;
    return value;
  }
  return;
},
 get$isEmpty: function() {
  return this._numberOfEntries === 0;
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$, i, t1, key;
  length$ = this._keys.length;
  for (i = 0; i < length$; ++i) {
    t1 = this._keys;
    if (i >= t1.length)
      throw $.ioore(i);
    key = t1[i];
    if (!(key == null) && !(key === $.CTC1)) {
      t1 = this._values;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$2(key, t1[i]);
    }
  }
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List($.get$length(this));
  t1.i_11 = 0;
  this.forEach$1(new $.HashMapImplementation_keys__(list, t1));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List($.get$length(this));
  t1.i_10 = 0;
  this.forEach$1(new $.HashMapImplementation_values__(t1, list));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 HashMapImplementation$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $.HashMapImplementation__computeLoadLimit(8);
  this._keys = $._ListImpl_List(8);
  this._values = $._ListImpl_List(8);
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {"": [],
 "super": "Object"
};

$$.KeyValuePair = {"": ["key?", "value="],
 "super": "Object"
};

$$.LinkedHashMapImplementation = {"": ["_lib0_list", "_map"],
 "super": "Object",
 operator$indexSet$2: function(key, value) {
  if (this._map.containsKey$1(key) === true)
    this._map.operator$index$1(key).get$element().set$value(value);
  else {
    this._lib0_list.addLast$1($.KeyValuePair$(key, value));
    this._map.operator$indexSet$2(key, this._lib0_list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = this._map.operator$index$1(key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List($.get$length(this));
  t1.index_10 = 0;
  this._lib0_list.forEach$1(new $.LinkedHashMapImplementation_keys__(t1, list));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List($.get$length(this));
  t1.index_1 = 0;
  this._lib0_list.forEach$1(new $.LinkedHashMapImplementation_values__(t1, list));
  return list;
},
 forEach$1: function(f) {
  this._lib0_list.forEach$1(new $.LinkedHashMapImplementation_forEach__(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  return $.get$length(this._map);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 clear$0: function() {
  this._map.clear$0();
  this._lib0_list.clear$0();
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 LinkedHashMapImplementation$0: function() {
  this._map = $.HashMapImplementation$();
  this._lib0_list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.JSSyntaxRegExp = {"": ["_lib0_pattern", "_multiLine", "_ignoreCase"],
 "super": "Object",
 firstMatch$1: function(str) {
  var m, matchStart, t1, matchEnd;
  m = $.regExpExec(this, $.checkString(str));
  if (m == null)
    return;
  matchStart = $.regExpMatchStart(m);
  t1 = $.get$length($.index(m, 0));
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  matchEnd = matchStart + t1;
  return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
},
 allMatches$1: function(str) {
  $.checkString(str);
  return $._AllMatchesIterable$(this, str);
},
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 get$pattern: function() {
  return this._lib0_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true
};

$$._MatchImplementation = {"": ["pattern?", "str", "start", "end", "_groups"],
 "super": "Object",
 start$0: function() { return this.start.call$0(); },
 start$1: function(arg0) { return this.start.call$1(arg0); },
 group$1: function(index) {
  return $.index(this._groups, index);
},
 operator$index$1: function(index) {
  return $.index(this._groups, index);
}
};

$$._AllMatchesIterable = {"": ["_re", "_str"],
 "super": "Object",
 iterator$0: function() {
  return $._AllMatchesIterator$(this._re, this._str);
}
};

$$._AllMatchesIterator = {"": ["_re", "_str", "_lib0_next=", "_done"],
 "super": "Object",
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var next = this._lib0_next;
  this._lib0_next = null;
  return next;
},
 get$hasNext: function() {
  if (this._done)
    return false;
  else if (!(this._lib0_next == null))
    return true;
  this._lib0_next = this._re.firstMatch$1(this._str);
  if (this._lib0_next == null) {
    this._done = true;
    return false;
  } else
    return true;
}
};

$$._DateImpl = {"": ["millisecondsSinceEpoch?", "isUtc"],
 "super": "Object",
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Date))
    return false;
  return $.eq(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$lt$1: function(other) {
  return $.lt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$le$1: function(other) {
  return $.le(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$gt$1: function(other) {
  return $.gt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$ge$1: function(other) {
  return $.ge(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 get$hashCode: function() {
  return this.millisecondsSinceEpoch;
},
 toString$0: function() {
  var t1, t2, t3, y, m, d, h, min, sec, ms;
  t1 = new $._DateImpl_toString_fourDigits();
  t2 = new $._DateImpl_toString_threeDigits();
  t3 = new $._DateImpl_toString_twoDigits();
  y = t1.call$1(this.get$year());
  m = t3.call$1(this.get$month());
  d = t3.call$1(this.get$day());
  h = t3.call$1(this.get$hour());
  min = t3.call$1(this.get$minute());
  sec = t3.call$1(this.get$second());
  ms = t2.call$1(this.get$millisecond());
  if (this.isUtc === true)
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms) + 'Z';
  else
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms);
},
 add$1: function(duration) {
  return $.Date_Date$fromMillisecondsSinceEpoch($.add(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
},
 get$year: function() {
  return $.Primitives_getYear(this);
},
 get$month: function() {
  return $.Primitives_getMonth(this);
},
 get$day: function() {
  return $.Primitives_getDay(this);
},
 get$hour: function() {
  return $.Primitives_getHours(this);
},
 get$minute: function() {
  return $.Primitives_getMinutes(this);
},
 get$second: function() {
  return $.Primitives_getSeconds(this);
},
 get$millisecond: function() {
  return $.Primitives_getMilliseconds(this);
},
 _DateImpl$fromMillisecondsSinceEpoch$2: function(millisecondsSinceEpoch, isUtc) {
  var t1 = this.millisecondsSinceEpoch;
  if ($.gtB($.abs(t1), 8640000000000000))
    throw $.$$throw($.ArgumentError$(t1));
  t1 = this.isUtc;
  if (t1 == null)
    throw $.$$throw($.ArgumentError$(t1));
},
 _DateImpl$now$0: function() {
  $.Primitives_lazyAsJsDate(this);
},
 is$Date: true
};

$$.ArgumentError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return 'Illegal argument(s): ' + $.S(t1);
  return 'Illegal argument(s)';
}
};

$$.RangeError = {"": ["message"],
 "super": "ArgumentError",
 toString$0: function() {
  return 'RangeError: ' + $.S(this.message);
},
 is$Exception: true
};

$$.NoSuchMethodError = {"": ["_receiver", "_memberName", "_arguments", "_namedArguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3, t4, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_1 = $.StringBuffer_StringBuffer('');
  t1.i_2 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_2, t2.length); t1.i_2 = $.add(t1.i_2, 1)) {
    if ($.gtB(t1.i_2, 0))
      $.add$1(t1.sb_1, ', ');
    t3 = t1.sb_1;
    t4 = t1.i_2;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= t2.length)
      throw $.ioore(t4);
    $.add$1(t3, $.NoSuchMethodError_safeToString(t2[t4]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, t1, t2);
  actualParameters = $.toString(t1.sb_1);
  t1.sb_1 = $.StringBuffer_StringBuffer('');
  for (i = 0; i < t2.length; ++i) {
    if (i > 0)
      $.add$1(t1.sb_1, ', ');
    t3 = t1.sb_1;
    if (i >= t2.length)
      throw $.ioore(i);
    $.add$1(t3, t2[i]);
  }
  formalParameters = $.toString(t1.sb_1);
  t2 = this._memberName;
  return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t2) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t2) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t2) + '(' + $.S(formalParameters) + ')';
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      t2 = env1;
      break;
    case 2:
      t1 = env0;
      t2 = env1;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_1 = $.StringBuffer_StringBuffer('');
      t1.i_2 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (; $.ltB(t1.i_2, $.get$length(t2)); t1.i_2 = $.add(t1.i_2, 1)) {
          if ($.gtB(t1.i_2, 0))
            $.add$1(t1.sb_1, ', ');
          $.add$1(t1.sb_1, $.NoSuchMethodError_safeToString($.index(t2, t1.i_2)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return 'NoSuchMethodError : method not found: \'' + $.S(this._memberName) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Arguments: [' + $.S(t1.sb_1) + ']';
      else {
        actualParameters = $.toString(t1.sb_1);
        t1.sb_1 = $.StringBuffer_StringBuffer('');
        for (i = 0; $.ltB(i, $.get$length(t2)); ++i) {
          if (i > 0)
            $.add$1(t1.sb_1, ', ');
          $.add$1(t1.sb_1, $.index(t2, i));
        }
        formalParameters = $.toString(t1.sb_1);
        t2 = this._memberName;
        return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t2) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t2) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t2) + '(' + $.S(formalParameters) + ')';
      }
  }
}
};

$$.UnsupportedError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  return 'Unsupported operation: ' + $.S(this.get$message());
}
};

$$.UnimplementedError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? 'UnimplementedError: ' + $.S(t1) : 'UnimplementedError';
},
 is$Exception: true
};

$$.StateError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  return 'Bad state: ' + this.message;
}
};

$$.StackOverflowError = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
}
};

$$._ExceptionImplementation = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return t1 == null ? 'Exception' : 'Exception: ' + $.S(t1);
},
 is$Exception: true
};

$$.FormatException = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  return 'FormatException: ' + $.S(this.message);
},
 is$Exception: true
};

$$.NullPointerException = {"": ["functionName", "arguments"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.functionName;
  if (t1 == null)
    return this.get$exceptionName();
  else
    return $.S(this.get$exceptionName()) + ' : method: \'' + $.S(t1) + '\'\n' + 'Receiver: null\n' + 'Arguments: ' + $.S(this.arguments);
},
 get$exceptionName: function() {
  return 'NullPointerException';
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"": ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return 'IllegalJSRegExpException: \'' + $.S(this._pattern) + '\' \'' + this._errmsg + '\'';
},
 is$Exception: true
};

$$.RuntimeError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  return 'RuntimeError: ' + this.message;
},
 is$Exception: true
};

$$.FutureNotCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true
};

$$.FutureUnhandledException = {"": ["source", "stackTrace?"],
 "super": "Object",
 toString$0: function() {
  return 'FutureUnhandledException: exception while executing Future\n  ' + $.S($.replaceAll($.toString(this.source), '\n', '\n  ')) + '\n' + 'original stack trace:\n  ' + $.S($.replaceAll($.toString(this.stackTrace), '\n', '\n  '));
},
 is$Exception: true
};

$$._FutureImpl = {"": ["_isComplete", "_value", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$exception: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._exception;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true)
    this._successListeners.push(onSuccess);
  else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  var t1;
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else
    this._exceptionHandlers.push(onException);
},
 _complete$0: function() {
  var t1, handler, listener, listener0;
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (t1 = $.iterator(this._exceptionHandlers); t1.get$hasNext() === true;) {
        handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = $.iterator(this._successListeners); t1.get$hasNext() === true;) {
        listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._successListeners.length > 0)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = $.iterator(this._completionListeners); t1.get$hasNext() === true;) {
      listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
}
};

$$._CompleterImpl = {"": ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
}
};

$$.Object = {"": [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
}
};

$$.DoubleLinkedQueueEntry = {"": ["_previous!", "_next=", "_element?"],
 "super": "Object",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"": ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"": ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 removeLast$0: function() {
  return this._sentinel._previous.remove$0();
},
 removeFirst$0: function() {
  return this._sentinel._next.remove$0();
},
 get$last: function() {
  return this._sentinel._previous.get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length__(t1));
  return t1.counter_1;
},
 get$isEmpty: function() {
  var t1 = this._sentinel;
  return t1._next === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1._next = t1;
  t1 = this._sentinel;
  t1._previous = t1;
},
 forEach$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel);) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
    entry = nextEntry;
  }
},
 filter$1: function(f) {
  var other, entry, nextEntry;
  other = $.Queue_Queue();
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel);) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) === true)
      $.addLast(other, entry.get$_element());
    entry = nextEntry;
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"": ["_sentinel", "_currentEntry"],
 "super": "Object",
 get$hasNext: function() {
  return !(this._currentEntry.get$_next() === this._sentinel);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$._StringBufferImpl = {"": ["_buffer=", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return this._length === 0;
},
 add$1: function(obj) {
  var str = $.toString(obj);
  if (str == null || $.get$isEmpty(str) === true)
    return this;
  $.add$1(this._buffer, str);
  this._length = $.add(this._length, $.get$length(str));
  return this;
},
 clear$0: function() {
  this._buffer = $._ListImpl_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  if ($.get$length(this._buffer) === 0)
    return '';
  if ($.get$length(this._buffer) === 1)
    return $.index(this._buffer, 0);
  var result = $.stringJoinUnchecked($._StringImpl__toJsStringArray(this._buffer), '');
  $.clear(this._buffer);
  $.add$1(this._buffer, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ListIterator = {"": ["i", "list"],
 "super": "Object",
 get$hasNext: function() {
  return this.i < this.list.length;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var value = this.list[this.i];
  this.i = this.i + 1;
  return value;
}
};

$$.StackTrace = {"": ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
}
};

$$.CastErrorImplementation = {"": ["actualType", "expectedType"],
 "super": "Object",
 toString$0: function() {
  return 'CastError: Casting value of type ' + $.S(this.actualType) + ' to' + ' incompatible type ' + $.S(this.expectedType);
}
};

$$.ConstantMap = {"": ["length?", "_jsObject", "_lib3_keys"],
 "super": "Object",
 containsKey$1: function(key) {
  if ($.eqB(key, '__proto__'))
    return false;
  return this._jsObject.hasOwnProperty(key);
},
 operator$index$1: function(key) {
  if (this.containsKey$1(key) !== true)
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  $.forEach(this._lib3_keys, new $.ConstantMap_forEach_anon(f, this));
},
 get$keys: function() {
  return this._lib3_keys;
},
 get$values: function() {
  var result = [];
  $.forEach(this._lib3_keys, new $.ConstantMap_values_anon(this, result));
  return result;
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwUnmodifiable$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot modify unmodifiable Map'));
},
 operator$indexSet$2: function(key, val) {
  return this._throwUnmodifiable$0();
},
 remove$1: function(key) {
  return this._throwUnmodifiable$0();
},
 clear$0: function() {
  return this._throwUnmodifiable$0();
},
 is$Map: function() { return true; }
};

$$.MetaInfo = {"": ["_tag?", "_tags", "_set?"],
 "super": "Object"
};

$$.StringMatch = {"": ["start", "str", "pattern?"],
 "super": "Object",
 operator$index$1: function(g) {
  return this.group$1(g);
},
 group$1: function(group_) {
  if (!$.eqB(group_, 0))
    throw $.$$throw($.RangeError$value(group_));
  return this.pattern;
},
 start$0: function() { return this.start.call$0(); },
 start$1: function(arg0) { return this.start.call$1(arg0); }
};

$$.Alarm = {"": ["_alarmBitmapDatas?", "_alarmBitmap?", "_warning", "_warningChannel", "_transition", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 start$0: function() {
  this._warningChannel = this._warning.play$0();
  $.renderJuggler.remove$1(this._transition);
  this._transition = $.Transition$(0, 80, 9, $.Transitions_linear);
  var t1 = new $.Alarm_start_anon(this);
  this._transition.set$onUpdate(t1);
  $.add$1($.renderJuggler, this._transition);
},
 stop$0: function() {
  var t1 = this._warningChannel;
  if (!(t1 == null)) {
    t1.stop$0();
    this._warningChannel = null;
  }
  $.renderJuggler.remove$1(this._transition);
  t1 = $.index(this._alarmBitmapDatas, 0);
  this._alarmBitmap.set$bitmapData(t1);
},
 Alarm$0: function() {
  this._warning = $.Sounds_resource.getSound$1('Warning');
  this._warningChannel = null;
  this._alarmBitmapDatas = $.Grafix_getAlarms();
  this._alarmBitmap = $.Bitmap$($.index(this._alarmBitmapDatas, 0), 'auto');
  this.addChild$1(this._alarmBitmap);
}
};

$$.Board = {"": ["_levelChains", "_levelLocks", "_levelJokers", "_levelBlocks", "_levelDoubles", "_levelQuints", "_levelColors", "_random", "_status", "_colors", "_queue", "_fields", "_locks?", "_mouseBuffer?", "_animationRunning!", "_chainLayer?", "_linkLayer?", "_specialLayer?", "_lockLayer", "_explosionLayer?", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 updateStatus$1: function(status$) {
  if (status$ === 2)
    this._status = status$;
  if (status$ === 3 && $.eqB(this._status, 1)) {
    this._status = status$;
    if ($.eqB(this._animationRunning, false))
      this.dispatchEvent$1($.BoardEvent$('Timeouted', null, false));
  }
},
 dropFields$0: function() {
  var y, t1, t2, x, field, transition;
  this.mask = $.Mask$rectangle(0, 0, 500, 500);
  for (y = 0; y < 10; ++y)
    for (t1 = y * 10, t2 = 500 + y * 50 + 25, x = 0; x < 10; ++x) {
      field = $.index(this._fields, x + t1);
      field.set$linked(false);
      field.set$linkedJoker(false);
      field.set$special('None');
      field.updateDisplayObjects$3(this._chainLayer, this._linkLayer, this._specialLayer);
      transition = $.Transition$(field.get$y(), t2, 0.5, $.Transitions_easeOutCubic);
      transition.set$delay(x * 0.1);
      transition.set$onUpdate(new $.Board_dropFields_anon(field));
      $.add$1($.renderJuggler, transition);
    }
},
 initLocks$0: function() {
  var l, lock, t1, t2, t3;
  this._locks = $._ListImpl_List(null);
  for (l = 0; $.ltB(l, this._levelLocks); ++l) {
    lock = $.Lock$(l);
    lock.set$rotation($.div($.mul($.sub(this._random.nextInt$1(30), 15), 3.141592653589793), 180));
    t1 = this._levelLocks;
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    t2 = 300 - 90 * t1 / 2 + l * 90;
    t3 = this._random.nextInt$1(20);
    if (typeof t3 !== 'number')
      throw $.iae(t3);
    lock.set$x(t2 + t3 - 10);
    lock.set$y(550);
    $.add$1(this._locks, lock);
    this._lockLayer.addChild$1(lock);
  }
},
 countLinks$2: function(x, y) {
  var t1, t3, t4, field, fieldWest, fieldEast, linkCount, fieldNorth, fieldSouth;
  t1 = this._fields;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.countLinks$2$bailout(1, x, y, t1);
  t3 = y * 10;
  t4 = x + t3;
  if (t4 < 0 || t4 >= t1.length)
    throw $.ioore(t4);
  field = t1[t4];
  t1 = field.get$direction();
  if (typeof t1 !== 'number')
    return this.countLinks$2$bailout(2, x, y, t3, field, t1);
  if (t1 === 0) {
    if (x > 0) {
      t1 = this._fields;
      if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.countLinks$2$bailout(3, x, t3, field, t1);
      t4 = x - 1 + t3;
      if (t4 < 0 || t4 >= t1.length)
        throw $.ioore(t4);
      fieldWest = t1[t4];
    } else
      fieldWest = null;
    if (x < 9) {
      t1 = this._fields;
      if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.countLinks$2$bailout(4, x, t1, t3, field, fieldWest);
      t3 = x + 1 + t3;
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      fieldEast = t1[t3];
    } else
      fieldEast = null;
    linkCount = field.canLinkHorizontal$1(fieldWest) === true ? 1 : 0;
    if (field.canLinkHorizontal$1(fieldEast) === true)
      ++linkCount;
  } else {
    if (y > 0) {
      t1 = this._fields;
      if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.countLinks$2$bailout(5, x, y, t1, field);
      t3 = x + (y - 1) * 10;
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      fieldNorth = t1[t3];
    } else
      fieldNorth = null;
    if (y < 9) {
      t1 = this._fields;
      if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.countLinks$2$bailout(6, x, y, fieldNorth, field, t1);
      t3 = x + (y + 1) * 10;
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      fieldSouth = t1[t3];
    } else
      fieldSouth = null;
    linkCount = field.canLinkVertical$1(fieldNorth) === true ? 1 : 0;
    if (field.canLinkVertical$1(fieldSouth) === true)
      ++linkCount;
  }
  return linkCount;
},
 countLinks$2$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      x = env0;
      y = env1;
      t1 = env2;
      break;
    case 2:
      x = env0;
      y = env1;
      t3 = env2;
      field = env3;
      t1 = env4;
      break;
    case 3:
      x = env0;
      t3 = env1;
      field = env2;
      t1 = env3;
      break;
    case 4:
      x = env0;
      t1 = env1;
      t3 = env2;
      field = env3;
      fieldWest = env4;
      break;
    case 5:
      x = env0;
      y = env1;
      t1 = env2;
      field = env3;
      break;
    case 6:
      x = env0;
      y = env1;
      fieldNorth = env2;
      field = env3;
      t1 = env4;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._fields;
    case 1:
      state0 = 0;
      t3 = y * 10;
      field = $.index(t1, x + t3);
      t1 = field.get$direction();
    case 2:
      state0 = 0;
    default:
      var t1, x, y, t3, field, fieldWest, fieldEast, linkCount, fieldNorth, fieldSouth;
      if (state0 === 4 || state0 === 3 || state0 === 0 && $.eqB(t1, 0))
        switch (state0) {
          case 0:
          case 3:
            if (state0 === 3 || state0 === 0 && x > 0)
              switch (state0) {
                case 0:
                  t1 = this._fields;
                case 3:
                  state0 = 0;
                  fieldWest = $.index(t1, x - 1 + t3);
              }
            else
              fieldWest = null;
          case 4:
            if (state0 === 4 || state0 === 0 && x < 9)
              switch (state0) {
                case 0:
                  t1 = this._fields;
                case 4:
                  state0 = 0;
                  fieldEast = $.index(t1, x + 1 + t3);
              }
            else
              fieldEast = null;
            linkCount = field.canLinkHorizontal$1(fieldWest) === true ? 1 : 0;
            if (field.canLinkHorizontal$1(fieldEast) === true)
              ++linkCount;
        }
      else
        switch (state0) {
          case 0:
          case 5:
            if (state0 === 5 || state0 === 0 && y > 0)
              switch (state0) {
                case 0:
                  t1 = this._fields;
                case 5:
                  state0 = 0;
                  fieldNorth = $.index(t1, x + (y - 1) * 10);
              }
            else
              fieldNorth = null;
          case 6:
            if (state0 === 6 || state0 === 0 && y < 9)
              switch (state0) {
                case 0:
                  t1 = this._fields;
                case 6:
                  state0 = 0;
                  fieldSouth = $.index(t1, x + (y + 1) * 10);
              }
            else
              fieldSouth = null;
            linkCount = field.canLinkVertical$1(fieldNorth) === true ? 1 : 0;
            if (field.canLinkVertical$1(fieldSouth) === true)
              ++linkCount;
        }
      return linkCount;
  }
},
 clearCombinations$0: function() {
  var y, t1, x, t2, t4, field, retry, ci, colorIndex, t3, t5, rebuild;
  for (y = 0; y < 10; ++y)
    for (t1 = y * 10, x = 0; x < 10; ++x) {
      t2 = this._fields;
      if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
        return this.clearCombinations$0$bailout(1, x, t2, y, t1);
      t4 = x + t1;
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      field = t2[t4];
      t4 = this._levelColors;
      if (typeof t4 !== 'number')
        return this.clearCombinations$0$bailout(2, field, x, t1, y, t4);
      retry = t4 * 2;
      while (true) {
        t2 = this.countLinks$2(x, y);
        if (typeof t2 !== 'number')
          return this.clearCombinations$0$bailout(3, field, x, y, retry, t2, t1);
        if (!(t2 === 2 && retry > 0))
          break;
        if ($.mod(retry, 2) === 0) {
          t2 = field.get$direction();
          if (typeof t2 !== 'number')
            throw $.iae(t2);
          field.set$direction(1 - t2);
          --retry;
        } else {
          ci = 0;
          colorIndex = 0;
          while (true) {
            t2 = $.get$length(this._colors);
            if (typeof t2 !== 'number')
              return this.clearCombinations$0$bailout(4, field, x, colorIndex, y, t2, retry, ci);
            if (!(ci < t2))
              break;
            t2 = field.get$color();
            t3 = this._colors;
            if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
              return this.clearCombinations$0$bailout(5, t2, field, x, colorIndex, y, retry, t3, ci);
            if (ci >= t3.length)
              throw $.ioore(ci);
            if ($.eqB(t2, t3[ci]))
              colorIndex = ci;
            ++ci;
          }
          t2 = this._colors;
          if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
            return this.clearCombinations$0$bailout(6, field, x, colorIndex, y, retry, t2);
          t4 = colorIndex + 1;
          t5 = t2.length;
          t4 = $.mod(t4, t5);
          if (t4 < 0 || t4 >= t5)
            throw $.ioore(t4);
          field.set$color(t2[t4]);
          --retry;
        }
      }
    }
  for (rebuild = false, y = 0; y < 10; ++y)
    for (x = 0; x < 10; ++x)
      if (!rebuild) {
        t1 = this.countLinks$2(x, y);
        if (typeof t1 !== 'number')
          return this.clearCombinations$0$bailout(7, x, t1, y);
        rebuild = t1 === 2;
      } else
        rebuild = true;
  return rebuild;
},
 clearCombinations$0$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state0) {
    case 1:
      x = env0;
      t2 = env1;
      y = env2;
      t1 = env3;
      break;
    case 2:
      field = env0;
      x = env1;
      t1 = env2;
      y = env3;
      t2 = env4;
      break;
    case 3:
      field = env0;
      x = env1;
      y = env2;
      retry = env3;
      t2 = env4;
      t1 = env5;
      break;
    case 4:
      field = env0;
      x = env1;
      colorIndex = env2;
      y = env3;
      t2 = env4;
      retry = env5;
      ci = env6;
      break;
    case 5:
      t2 = env0;
      field = env1;
      x = env2;
      colorIndex = env3;
      y = env4;
      retry = env5;
      t3 = env6;
      ci = env7;
      break;
    case 6:
      field = env0;
      x = env1;
      colorIndex = env2;
      y = env3;
      retry = env4;
      t2 = env5;
      break;
    case 7:
      x = env0;
      t1 = env1;
      y = env2;
      break;
  }
  switch (state0) {
    case 0:
      y = 0;
    default:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(y < 10))
                break L0;
              t1 = y * 10;
              x = 0;
            default:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!(x < 10))
                        break L1;
                      t2 = this._fields;
                    case 1:
                      state0 = 0;
                      field = $.index(t2, x + t1);
                      t2 = this._levelColors;
                    case 2:
                      state0 = 0;
                      retry = $.mul(t2, 2);
                    default:
                      L2:
                        while (true)
                          switch (state0) {
                            case 0:
                              t2 = this.countLinks$2(x, y);
                            case 3:
                              state0 = 0;
                              if (!($.eqB(t2, 2) && $.gtB(retry, 0)))
                                break L2;
                            default:
                              if (state0 === 0 && $.eqB($.mod(retry, 2), 0)) {
                                t2 = field.get$direction();
                                if (typeof t2 !== 'number')
                                  throw $.iae(t2);
                                field.set$direction(1 - t2);
                                retry = $.sub(retry, 1);
                              } else
                                switch (state0) {
                                  case 0:
                                    ci = 0;
                                    colorIndex = 0;
                                  default:
                                    L3:
                                      while (true)
                                        switch (state0) {
                                          case 0:
                                            t2 = $.get$length(this._colors);
                                          case 4:
                                            state0 = 0;
                                            if (!$.ltB(ci, t2))
                                              break L3;
                                            t2 = field.get$color();
                                            t3 = this._colors;
                                          case 5:
                                            state0 = 0;
                                            if ($.eqB(t2, $.index(t3, ci)))
                                              colorIndex = ci;
                                            ++ci;
                                        }
                                    t2 = this._colors;
                                  case 6:
                                    state0 = 0;
                                    t4 = colorIndex + 1;
                                    t5 = $.get$length(t2);
                                    if (typeof t5 !== 'number')
                                      throw $.iae(t5);
                                    field.set$color($.index(t2, $.mod(t4, t5)));
                                    retry = $.sub(retry, 1);
                                }
                          }
                      ++x;
                  }
              ++y;
          }
      rebuild = false;
      y = 0;
    case 7:
      var y, t1, x, t2, field, retry, ci, colorIndex, t3, t4, t5, rebuild;
      L4:
        while (true)
          switch (state0) {
            case 0:
              if (!(y < 10))
                break L4;
              x = 0;
            case 7:
              L5:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!(x < 10))
                        break L5;
                    case 7:
                      if (state0 === 7 || state0 === 0 && !rebuild)
                        switch (state0) {
                          case 0:
                            t1 = this.countLinks$2(x, y);
                          case 7:
                            state0 = 0;
                            rebuild = $.eqB(t1, 2);
                        }
                      else
                        rebuild = true;
                      ++x;
                  }
              ++y;
          }
      return rebuild;
  }
},
 possibleCombinations$0: function() {
  var y, t1, x, t2, t4, t5, t6, t3;
  for (y = 0; y < 10; ++y)
    for (t1 = y * 10, x = 1; x < 9; ++x) {
      t2 = this._fields;
      if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
        return this.possibleCombinations$0$bailout(1, t2, x, t1, y);
      t4 = x - 1 + t1;
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t4 = t2[t4];
      t5 = x + t1;
      if (t5 < 0 || t5 >= t2.length)
        throw $.ioore(t5);
      if (t4.couldLink$1(t2[t5]) === true) {
        t2 = this._fields;
        if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
          return this.possibleCombinations$0$bailout(3, x, t2, t5, t1, y);
        if (t5 >= t2.length)
          throw $.ioore(t5);
        t5 = t2[t5];
        t4 = x + 1 + t1;
        if (t4 < 0 || t4 >= t2.length)
          throw $.ioore(t4);
        t6 = t5.couldLink$1(t2[t4]) === true;
        t2 = t6;
      } else
        t2 = false;
      if (t2)
        return true;
    }
  for (x = 0; x < 10; ++x)
    for (y = 1; y < 9; ++y) {
      t1 = this._fields;
      if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.possibleCombinations$0$bailout(5, x, y, t1);
      t3 = x + (y - 1) * 10;
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      t3 = t1[t3];
      t4 = x + y * 10;
      if (t4 < 0 || t4 >= t1.length)
        throw $.ioore(t4);
      if (t3.couldLink$1(t1[t4]) === true) {
        t1 = this._fields;
        if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
          return this.possibleCombinations$0$bailout(7, t4, t1, x, y);
        if (t4 >= t1.length)
          throw $.ioore(t4);
        t4 = t1[t4];
        t3 = x + (y + 1) * 10;
        if (t3 < 0 || t3 >= t1.length)
          throw $.ioore(t3);
        t5 = t4.couldLink$1(t1[t3]) === true;
        t1 = t5;
      } else
        t1 = false;
      if (t1)
        return true;
    }
  return false;
},
 possibleCombinations$0$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t2 = env0;
      x = env1;
      t1 = env2;
      y = env3;
      break;
    case 2:
      y = env0;
      x = env1;
      t4 = env2;
      t1 = env3;
      t2 = env4;
      break;
    case 3:
      x = env0;
      t2 = env1;
      t6 = env2;
      t1 = env3;
      y = env4;
      break;
    case 4:
      t6 = env0;
      x = env1;
      t2 = env2;
      t1 = env3;
      y = env4;
      break;
    case 5:
      x = env0;
      y = env1;
      t1 = env2;
      break;
    case 6:
      t3 = env0;
      t1 = env1;
      x = env2;
      y = env3;
      break;
    case 7:
      t5 = env0;
      t1 = env1;
      x = env2;
      y = env3;
      break;
    case 8:
      t1 = env0;
      t5 = env1;
      x = env2;
      y = env3;
      break;
  }
  switch (state0) {
    case 0:
      y = 0;
    default:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(y < 10))
                break L0;
              t1 = y * 10;
              x = 1;
            default:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!(x < 9))
                        break L1;
                      t2 = this._fields;
                    case 1:
                      state0 = 0;
                      t2 = $.index(t2, x - 1 + t1);
                      t4 = this._fields;
                    case 2:
                      state0 = 0;
                      t6 = x + t1;
                    default:
                      if (state0 === 4 || state0 === 3 || state0 === 0 && t2.couldLink$1($.index(t4, t6)) === true)
                        switch (state0) {
                          case 0:
                            t2 = this._fields;
                          case 3:
                            state0 = 0;
                            t6 = $.index(t2, t6);
                            t2 = this._fields;
                          case 4:
                            state0 = 0;
                            t5 = t6.couldLink$1($.index(t2, x + 1 + t1)) === true;
                            t2 = t5;
                        }
                      else
                        t2 = false;
                      if (t2)
                        return true;
                      ++x;
                  }
              ++y;
          }
      x = 0;
    case 5:
    case 6:
    case 7:
    case 8:
      var y, t1, x, t2, t4, t6, t5, t3;
      L2:
        while (true)
          switch (state0) {
            case 0:
              if (!(x < 10))
                break L2;
              y = 1;
            default:
              L3:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!(y < 9))
                        break L3;
                      t1 = this._fields;
                    case 5:
                      state0 = 0;
                      t1 = $.index(t1, x + (y - 1) * 10);
                      t3 = this._fields;
                    case 6:
                      state0 = 0;
                      t5 = x + y * 10;
                    default:
                      if (state0 === 8 || state0 === 7 || state0 === 0 && t1.couldLink$1($.index(t3, t5)) === true)
                        switch (state0) {
                          case 0:
                            t1 = this._fields;
                          case 7:
                            state0 = 0;
                            t5 = $.index(t1, t5);
                            t1 = this._fields;
                          case 8:
                            state0 = 0;
                            t4 = t5.couldLink$1($.index(t1, x + (y + 1) * 10)) === true;
                            t1 = t4;
                        }
                      else
                        t1 = false;
                      if (t1)
                        return true;
                      ++y;
                  }
              ++x;
          }
      return false;
  }
},
 _initQueuePlaceSpecial$3: function(special, current, maximum) {
  var retry, t1, range, t3, index;
  if (typeof maximum !== 'number')
    return this._initQueuePlaceSpecial$3$bailout(1, special, current, maximum);
  for (retry = 0; retry < 20; ++retry) {
    t1 = this._levelChains;
    if (typeof t1 !== 'number')
      return this._initQueuePlaceSpecial$3$bailout(2, special, current, maximum, t1, retry);
    range = $.tdiv(t1, maximum);
    t1 = current * range;
    t3 = this._random.nextInt$1(range);
    if (typeof t3 !== 'number')
      throw $.iae(t3);
    index = t1 + t3;
    t1 = this._queue;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this._initQueuePlaceSpecial$3$bailout(3, special, current, maximum, retry, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t3 = t1[index].get$special();
    if (typeof t3 !== 'string')
      return this._initQueuePlaceSpecial$3$bailout(4, special, current, t3, maximum, retry, index);
    if (t3 === 'None') {
      t1 = this._queue;
      if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this._initQueuePlaceSpecial$3$bailout(5, special, t1, index);
      if (index >= t1.length)
        throw $.ioore(index);
      t1[index].set$special(special);
      return;
    }
  }
},
 _initQueuePlaceSpecial$3$bailout: function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      special = env0;
      current = env1;
      maximum = env2;
      break;
    case 2:
      special = env0;
      current = env1;
      maximum = env2;
      t1 = env3;
      retry = env4;
      break;
    case 3:
      special = env0;
      current = env1;
      maximum = env2;
      retry = env3;
      t1 = env4;
      index = env5;
      break;
    case 4:
      special = env0;
      current = env1;
      t3 = env2;
      maximum = env3;
      retry = env4;
      index = env5;
      break;
    case 5:
      special = env0;
      t1 = env1;
      index = env2;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      retry = 0;
    default:
      var special, current, maximum, retry, t1, range, t3, index;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(retry < 20))
                break L0;
              t1 = this._levelChains;
            case 2:
              state0 = 0;
              range = $.tdiv(t1, maximum);
              if (typeof range !== 'number')
                throw $.iae(range);
              t1 = current * range;
              t3 = this._random.nextInt$1(range);
              if (typeof t3 !== 'number')
                throw $.iae(t3);
              index = t1 + t3;
              t1 = this._queue;
            case 3:
              state0 = 0;
              t3 = $.index(t1, index).get$special();
            case 4:
              state0 = 0;
            case 5:
              if (state0 === 5 || state0 === 0 && $.eqB(t3, 'None'))
                switch (state0) {
                  case 0:
                    t1 = this._queue;
                  case 5:
                    state0 = 0;
                    $.index(t1, index).set$special(special);
                    return;
                }
              ++retry;
          }
  }
},
 initQueue$0: function() {
  var i, t1, color, direction;
  this._queue = $._ListImpl_List(null);
  for (i = 0; $.ltB(i, this._levelChains); ++i) {
    t1 = this._colors;
    color = $.index(t1, this._random.nextInt$1($.get$length(t1)));
    direction = this._random.nextInt$1(2);
    $.add$1(this._queue, $.Field$(color, direction));
  }
  for (i = 0; $.ltB(i, $.mul(this._levelLocks, 2)); ++i) {
    t1 = this._levelLocks;
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    this._initQueuePlaceSpecial$3('Lock' + $.S($.mod(i, t1) + 1), i, $.mul(this._levelLocks, 2));
  }
  for (i = 0; $.ltB(i, this._levelJokers); ++i)
    this._initQueuePlaceSpecial$3('Joker', i, this._levelJokers);
  for (i = 0; $.ltB(i, this._levelBlocks); ++i)
    this._initQueuePlaceSpecial$3('Block', i, this._levelBlocks);
  for (i = 0; $.ltB(i, this._levelDoubles); ++i)
    this._initQueuePlaceSpecial$3('Double', i, this._levelDoubles);
  for (i = 0; $.ltB(i, this._levelQuints); ++i)
    this._initQueuePlaceSpecial$3('Quint', i, this._levelQuints);
},
 initField$0: function() {
  var rebuild, f, t1, color, direction;
  this._fields = $._ListImpl_List(null);
  for (rebuild = true; rebuild === true;) {
    $.clear(this._fields);
    for (f = 0; f < 100; ++f) {
      t1 = this._colors;
      color = $.index(t1, this._random.nextInt$1($.get$length(t1)));
      direction = this._random.nextInt$1(2);
      $.add$1(this._fields, $.Field$(color, direction));
    }
    rebuild = this.clearCombinations$0();
  }
},
 shuffleField$0: function() {
  var rebuild, f, field, t1, completeCounter, x, y, transition;
  if (this._animationRunning === true || !$.eqB(this._status, 1))
    return false;
  this._animationRunning = true;
  for (rebuild = true; rebuild;) {
    for (f = 0; $.ltB(f, $.get$length(this._fields)); ++f) {
      field = $.index(this._fields, f);
      field.set$linked(false);
      field.set$linkedJoker(false);
      field.updateDisplayObjects$3(this._chainLayer, this._linkLayer, this._specialLayer);
      t1 = this._colors;
      field.set$color($.index(t1, this._random.nextInt$1($.get$length(t1))));
      field.set$direction(this._random.nextInt$1(2));
    }
    rebuild = this.clearCombinations$0() === true || $.eqB(this.possibleCombinations$0(), false);
  }
  $.Sounds_resource.getSound$1('BonusUniversal').play$0();
  completeCounter = $.ValueCounter$();
  for (x = 0; x < 10; ++x)
    for (t1 = x * 0.06, y = 0; y < 10; ++y) {
      field = $.index(this._fields, x + y * 10);
      field.set$sinScale(0);
      transition = $.Transition$(0, 1, 0.2, $.Transitions_linear);
      transition.set$delay(t1);
      transition.set$onUpdate(new $.Board_shuffleField_anon(field));
      transition.set$onStart(new $.Board_shuffleField_anon0(this, field));
      transition.set$onComplete(new $.Board_shuffleField_anon1(this, completeCounter));
      $.add$1($.renderJuggler, transition);
    }
  return true;
},
 _updateLinks$0: function() {
  var y, t1, t2, t3, x, field, fieldEast, fieldSouth, linkedJoker, linked;
  for (y = 0; y < 10; ++y)
    for (t1 = (y + 1) * 10, t2 = y < 9, t3 = y * 10, x = 0; x < 10; ++x) {
      field = $.index(this._fields, x + t3);
      fieldEast = x < 9 ? $.index(this._fields, x + 1 + t3) : null;
      fieldSouth = t2 ? $.index(this._fields, x + t1) : null;
      if (field.canLinkHorizontal$1(fieldEast) === true) {
        linkedJoker = $.eqB(field.get$special(), 'Joker') || $.eqB(fieldEast.get$special(), 'Joker');
        linked = true;
      } else {
        linkedJoker = false;
        linked = false;
      }
      if (field.canLinkVertical$1(fieldSouth) === true) {
        linkedJoker = $.eqB(field.get$special(), 'Joker') || $.eqB(fieldSouth.get$special(), 'Joker');
        linked = true;
      }
      if (!$.eqB(field.get$linked(), linked) || !$.eqB(field.get$linkedJoker(), linkedJoker)) {
        field.set$linked(linked);
        field.set$linkedJoker(linkedJoker);
        field.updateDisplayObjects$3(this._chainLayer, this._linkLayer, this._specialLayer);
      }
    }
},
 _processCombinationsExplosion$6: function(animationCounter, x, y, length$, dx, dy) {
  var factor, l, t1, t3, t4, t5, field;
  this._animationRunning = true;
  animationCounter.increment$1(length$);
  for (factor = 1, l = 0; l < length$; ++l) {
    t1 = this._fields;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this._processCombinationsExplosion$6$bailout(1, animationCounter, factor, l, y, x, dy, length$, dx, t1);
    t3 = x + l * dx;
    t4 = y + l * dy;
    t5 = t3 + t4 * 10;
    if (t5 < 0 || t5 >= t1.length)
      throw $.ioore(t5);
    field = t1[t5];
    t1 = field.get$special();
    if (typeof t1 !== 'string')
      return this._processCombinationsExplosion$6$bailout(2, animationCounter, x, y, t3, length$, dy, t4, dx, field, t1, factor, l);
    if (t1 === 'Double')
      factor *= 2;
    t1 = field.get$special();
    if (typeof t1 !== 'string')
      return this._processCombinationsExplosion$6$bailout(3, animationCounter, x, y, t3, length$, dy, t4, dx, field, l, factor, t1);
    if (t1 === 'Quint')
      factor *= 5;
    $.renderJuggler.delayCall$2(new $.Board__processCombinationsExplosion_anon(t4, t3, animationCounter, field, this), 0.1 + l * 0.1);
  }
  this.dispatchEvent$1($.BoardEvent$('Explosion', $.makeLiteralMap(['Length', length$, 'Factor', factor]), false));
},
 _processCombinationsExplosion$6$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11) {
  switch (state0) {
    case 1:
      animationCounter = env0;
      factor = env1;
      l = env2;
      y = env3;
      x = env4;
      dy = env5;
      length$ = env6;
      dx = env7;
      t1 = env8;
      break;
    case 2:
      animationCounter = env0;
      x = env1;
      y = env2;
      t3 = env3;
      length$ = env4;
      dy = env5;
      t4 = env6;
      dx = env7;
      field = env8;
      t1 = env9;
      factor = env10;
      l = env11;
      break;
    case 3:
      animationCounter = env0;
      x = env1;
      y = env2;
      t3 = env3;
      length$ = env4;
      dy = env5;
      t4 = env6;
      dx = env7;
      field = env8;
      l = env9;
      factor = env10;
      t1 = env11;
      break;
  }
  switch (state0) {
    case 0:
      this._animationRunning = true;
      animationCounter.increment$1(length$);
      factor = 1;
      l = 0;
    default:
      var factor, l, t1, animationCounter, y, x, dy, length$, dx, t3, t4, field;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(l < length$))
                break L0;
              t1 = this._fields;
            case 1:
              state0 = 0;
              t3 = x + l * dx;
              t4 = y + l * dy;
              field = $.index(t1, t3 + t4 * 10);
              t1 = field.get$special();
            case 2:
              state0 = 0;
              if ($.eqB(t1, 'Double'))
                factor *= 2;
              t1 = field.get$special();
            case 3:
              state0 = 0;
              if ($.eqB(t1, 'Quint'))
                factor *= 5;
              $.renderJuggler.delayCall$2(new $.Board__processCombinationsExplosion_anon(t4, t3, animationCounter, field, this), 0.1 + l * 0.1);
              ++l;
          }
      this.dispatchEvent$1($.BoardEvent$('Explosion', $.makeLiteralMap(['Length', length$, 'Factor', factor]), false));
  }
},
 _processCombinations$0: function() {
  var animationCounter, y, t1, x, length$, x0, t2, t4, t5, t6, y0, t3;
  this._animationRunning = false;
  animationCounter = $.ValueCounter$();
  for (y = 0; y < 10; ++y)
    for (t1 = y * 10, x = 0; x < 10;) {
      length$ = 1;
      while (true) {
        x0 = x + length$;
        if (x0 < 10) {
          t2 = this._fields;
          if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
            return this._processCombinations$0$bailout(1, t2, animationCounter, length$, t1, x, x0, y);
          t4 = x0 - 1 + t1;
          if (t4 < 0 || t4 >= t2.length)
            throw $.ioore(t4);
          t4 = t2[t4];
          t5 = x0 + t1;
          if (t5 < 0 || t5 >= t2.length)
            throw $.ioore(t5);
          t6 = t4.canLinkHorizontal$1(t2[t5]) === true;
          t2 = t6;
        } else
          t2 = false;
        if (!t2)
          break;
        ++length$;
      }
      if (length$ >= 3)
        this._processCombinationsExplosion$6(animationCounter, x, y, length$, 1, 0);
      x = x0;
    }
  for (x = 0; x < 10; ++x)
    for (y = 0; y < 10;) {
      length$ = 1;
      while (true) {
        y0 = y + length$;
        if (y0 < 10) {
          t1 = this._fields;
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this._processCombinations$0$bailout(3, y0, x, animationCounter, t1, length$, y);
          t3 = x + (y0 - 1) * 10;
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          t3 = t1[t3];
          t4 = x + y0 * 10;
          if (t4 < 0 || t4 >= t1.length)
            throw $.ioore(t4);
          t5 = t3.canLinkVertical$1(t1[t4]) === true;
          t1 = t5;
        } else
          t1 = false;
        if (!t1)
          break;
        ++length$;
      }
      if (length$ >= 3)
        this._processCombinationsExplosion$6(animationCounter, x, y, length$, 0, 1);
      y = y0;
    }
  t1 = animationCounter.value;
  if (typeof t1 !== 'number')
    return this._processCombinations$0$bailout(5, t1);
  if (t1 === 0) {
    t1 = this._status;
    if (typeof t1 !== 'number')
      return this._processCombinations$0$bailout(6, t1);
    if (t1 === 2)
      this.dispatchEvent$1($.BoardEvent$('Finalized', null, false));
    t1 = this._status;
    if (typeof t1 !== 'number')
      return this._processCombinations$0$bailout(7, t1);
    if (t1 === 3)
      this.dispatchEvent$1($.BoardEvent$('Timeouted', null, false));
    t1 = this._status;
    if (typeof t1 !== 'number')
      return this._processCombinations$0$bailout(8, t1);
    if (t1 === 1) {
      t1 = this.possibleCombinations$0();
      if (typeof t1 !== 'boolean')
        return this._processCombinations$0$bailout(9, t1);
      t1 = !t1;
    } else
      t1 = false;
    if (t1)
      this.shuffleField$0();
  }
},
 _processCombinations$0$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state0) {
    case 1:
      t2 = env0;
      animationCounter = env1;
      length$ = env2;
      t1 = env3;
      x = env4;
      x0 = env5;
      y = env6;
      break;
    case 2:
      t4 = env0;
      animationCounter = env1;
      length$ = env2;
      t1 = env3;
      x = env4;
      x0 = env5;
      y = env6;
      t2 = env7;
      break;
    case 3:
      y0 = env0;
      x = env1;
      animationCounter = env2;
      t1 = env3;
      length$ = env4;
      y = env5;
      break;
    case 4:
      y0 = env0;
      t1 = env1;
      x = env2;
      animationCounter = env3;
      t3 = env4;
      length$ = env5;
      y = env6;
      break;
    case 5:
      t1 = env0;
      break;
    case 6:
      t1 = env0;
      break;
    case 7:
      t1 = env0;
      break;
    case 8:
      t1 = env0;
      break;
    case 9:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      this._animationRunning = false;
      animationCounter = $.ValueCounter$();
      y = 0;
    default:
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(y < 10))
                break L0;
              t1 = y * 10;
              x = 0;
            default:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!(x < 10))
                        break L1;
                      length$ = 1;
                    default:
                      L2:
                        while (true)
                          switch (state0) {
                            case 0:
                              x0 = x + length$;
                            default:
                              if (state0 === 2 || state0 === 1 || state0 === 0 && x0 < 10)
                                switch (state0) {
                                  case 0:
                                    t2 = this._fields;
                                  case 1:
                                    state0 = 0;
                                    t2 = $.index(t2, x0 - 1 + t1);
                                    t4 = this._fields;
                                  case 2:
                                    state0 = 0;
                                    t6 = t2.canLinkHorizontal$1($.index(t4, x0 + t1)) === true;
                                    t2 = t6;
                                }
                              else
                                t2 = false;
                              if (!t2)
                                break L2;
                              ++length$;
                          }
                      if (length$ >= 3)
                        this._processCombinationsExplosion$6(animationCounter, x, y, length$, 1, 0);
                      x = x0;
                  }
              ++y;
          }
      x = 0;
    case 3:
    case 4:
      L3:
        while (true)
          switch (state0) {
            case 0:
              if (!(x < 10))
                break L3;
              y = 0;
            default:
              L4:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!(y < 10))
                        break L4;
                      length$ = 1;
                    default:
                      L5:
                        while (true)
                          switch (state0) {
                            case 0:
                              y0 = y + length$;
                            default:
                              if (state0 === 4 || state0 === 3 || state0 === 0 && y0 < 10)
                                switch (state0) {
                                  case 0:
                                    t1 = this._fields;
                                  case 3:
                                    state0 = 0;
                                    t1 = $.index(t1, x + (y0 - 1) * 10);
                                    t3 = this._fields;
                                  case 4:
                                    state0 = 0;
                                    t5 = t1.canLinkVertical$1($.index(t3, x + y0 * 10)) === true;
                                    t1 = t5;
                                }
                              else
                                t1 = false;
                              if (!t1)
                                break L5;
                              ++length$;
                          }
                      if (length$ >= 3)
                        this._processCombinationsExplosion$6(animationCounter, x, y, length$, 0, 1);
                      y = y0;
                  }
              ++x;
          }
      t1 = animationCounter.value;
    case 5:
      state0 = 0;
    case 6:
    case 7:
    case 8:
    case 9:
      var animationCounter, y, t1, x, length$, x0, t2, t4, t6, y0, t3, t5;
      if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && $.eqB(t1, 0))
        switch (state0) {
          case 0:
            t1 = this._status;
          case 6:
            state0 = 0;
            if ($.eqB(t1, 2))
              this.dispatchEvent$1($.BoardEvent$('Finalized', null, false));
            t1 = this._status;
          case 7:
            state0 = 0;
            if ($.eqB(t1, 3))
              this.dispatchEvent$1($.BoardEvent$('Timeouted', null, false));
            t1 = this._status;
          case 8:
            state0 = 0;
          case 9:
            if (state0 === 9 || state0 === 0 && $.eqB(t1, 1))
              switch (state0) {
                case 0:
                  t1 = this.possibleCombinations$0();
                case 9:
                  state0 = 0;
                  t1 = $.eqB(t1, false);
              }
            else
              t1 = false;
            if (t1)
              this.shuffleField$0();
        }
  }
},
 processSpecial$1: function(field) {
  var lockNumber, lock, special, tween;
  if ($.eqB($.indexOf$1(field.get$special(), 'Lock'), 0)) {
    lockNumber = $.sub($.int_parse($.substring$2(field.get$special(), 4, 5)), 1);
    lock = $.index(this._locks, lockNumber);
    special = $.Grafix_getSpecial(field.get$special());
    special.set$x(field.get$x());
    special.set$y(field.get$y());
    this.addChild$1(special);
    tween = $.Tween$(special, 0.5, $.Transitions_easeOutCubic);
    tween.animate$2('x', lock.get$x());
    tween.animate$2('y', $.sub(lock.get$y(), 10));
    tween.set$onComplete(new $.Board_processSpecial_anon(this, special));
    $.add$1($.renderJuggler, tween);
    $.renderJuggler.delayCall$2(new $.Board_processSpecial_anon0(lockNumber, this), 0.5);
  }
},
 openLock$1: function(lockNumber) {
  var lock, boardEvent, allUnlocked, i, box_0, box_00;
  lock = $.index(this._locks, lockNumber);
  if (lock.get$locked() === true) {
    boardEvent = $.BoardEvent$('Unlocked', $.makeLiteralMap(['Type', 'SingleLocked', 'Position', $.Point$($.add(lock.get$x(), 20), lock.get$y())]), false);
    $.Sounds_resource.getSound$1('Unlock').play$0();
  } else
    boardEvent = $.BoardEvent$('Unlocked', $.makeLiteralMap(['Type', 'SingleUnlocked', 'Position', $.Point$($.add(lock.get$x(), 20), lock.get$y())]), false);
  this.dispatchEvent$1(boardEvent);
  lock.set$locked(false);
  lock.showLocked$1(false);
  for (allUnlocked = true, i = 0; $.ltB(i, $.get$length(this._locks)); ++i)
    allUnlocked = allUnlocked && $.eqB($.index(this._locks, i).get$locked(), false);
  if (allUnlocked) {
    $.Sounds_resource.getSound$1('BonusAllUnlock').play$0();
    box_0 = {};
    for (box_0.i_1 = 0; $.ltB(box_0.i_1, $.get$length(this._locks)); box_00 = {}, box_00.i_1 = box_0.i_1, box_00.i_1 = $.add(box_00.i_1, 1), box_0 = box_00) {
      $.index(this._locks, box_0.i_1).set$locked(true);
      $.renderJuggler.delayCall$2(new $.Board_openLock_anon(lockNumber, box_0, this), $.mul(box_0.i_1, 0.2));
    }
    $.renderJuggler.delayCall$2(new $.Board_openLock_anon0(this), 0.75);
  }
},
 _fillEmptyFields$0: function() {
  var animationCounter, x, t1, t2, t3, target, source, t4, t5, t6, fieldSource, fieldSourceWest, transition;
  animationCounter = $.ValueCounter$();
  for (x = 0; x < 10; ++x)
    for (t1 = 50 * x + 25, t2 = x - 1, t3 = x > 0, target = 9, source = 8; target >= 0;) {
      t4 = {};
      while (true) {
        t5 = target >= 0;
        if (!(t5 && $.eqB($.index(this._fields, x + target * 10).get$empty(), false)))
          break;
        --target;
        --source;
      }
      while (true) {
        t6 = source >= 0;
        if (!(t6 && $.eqB($.index(this._fields, x + source * 10).get$empty(), true)))
          break;
        --source;
      }
      if (t5) {
        t4.fieldTarget_1 = null;
        if (t6) {
          t5 = this._fields;
          t6 = source * 10;
          fieldSource = $.index(t5, x + t6);
          if (t3) {
            fieldSourceWest = $.index(this._fields, t2 + t6);
            if (fieldSource.canLinkHorizontal$1(fieldSourceWest) === true) {
              fieldSourceWest.set$linked(false);
              fieldSourceWest.updateDisplayObjects$3(this._chainLayer, this._linkLayer, this._specialLayer);
            }
          }
          fieldSource.set$linked(false);
          fieldSource.set$empty(true);
          fieldSource.updateDisplayObjects$3(this._chainLayer, this._linkLayer, this._specialLayer);
        } else if ($.gtB($.get$length(this._queue), 0)) {
          fieldSource = $.index(this._queue, 0);
          $.removeRange(this._queue, 0, 1);
        } else {
          t5 = this._colors;
          fieldSource = $.Field$($.index(t5, this._random.nextInt$1($.get$length(t5))), this._random.nextInt$1(2));
        }
        t4.fieldTarget_1 = $.index(this._fields, x + target * 10);
        t5 = fieldSource.get$color();
        t4.fieldTarget_1.set$color(t5);
        t5 = fieldSource.get$direction();
        t4.fieldTarget_1.set$direction(t5);
        t5 = fieldSource.get$special();
        t4.fieldTarget_1.set$special(t5);
        t4.fieldTarget_1.set$linked(false);
        t4.fieldTarget_1.set$empty(false);
        t4.fieldTarget_1.set$x(t1);
        t5 = 50 * source + 25;
        t4.fieldTarget_1.set$y(t5);
        t4.fieldTarget_1.updateDisplayObjects$3(this._chainLayer, this._linkLayer, this._specialLayer);
        animationCounter.increment$0();
        transition = $.Transition$(t4.fieldTarget_1.get$y(), 50 * target + 25, 0.1, $.Transitions_linear);
        transition.set$onUpdate(new $.Board__fillEmptyFields_anon(t4));
        transition.set$onComplete(new $.Board__fillEmptyFields_anon0(animationCounter, this));
        $.add$1($.renderJuggler, transition);
      }
    }
},
 _onMouseDown$1: function(me) {
  var p;
  if ($.eqB(me.get$target(), this._chainLayer) && this.mouseEnabled === true) {
    p = $.Point$($.toInt($.min($.div(me.get$localX(), 50), 9)), $.toInt($.min($.div(me.get$localY(), 50), 9)));
    $.add$1(this._mouseBuffer, p);
    this._checkMouseBuffer$0();
  }
},
 get$_onMouseDown: function() { return new $.BoundClosure(this, '_onMouseDown$1'); },
 _checkMouseBuffer$0: function() {
  var p, x, y, field, fieldWest, fieldEast, fieldNorth, fieldSouth, t1, playChainLink;
  while (true) {
    if (!($.eqB(this._status, 1) && $.eqB(this._animationRunning, false) && $.gtB($.get$length(this._mouseBuffer), 0)))
      break;
    c$0: {
      p = $.index(this._mouseBuffer, 0);
      $.removeRange(this._mouseBuffer, 0, 1);
      x = $.toInt(p.get$x());
      y = $.toInt(p.get$y());
      field = $.index(this._fields, $.add(x, $.mul(y, 10)));
      fieldWest = $.gtB(x, 0) ? $.index(this._fields, $.add($.sub(x, 1), $.mul(y, 10))) : null;
      fieldEast = $.ltB(x, 9) ? $.index(this._fields, $.add($.add(x, 1), $.mul(y, 10))) : null;
      fieldNorth = $.gtB(y, 0) ? $.index(this._fields, $.add(x, $.mul($.sub(y, 1), 10))) : null;
      fieldSouth = $.ltB(y, 9) ? $.index(this._fields, $.add(x, $.mul($.add(y, 1), 10))) : null;
      if ($.eqB(field.get$special(), 'Block')) {
        $.Sounds_resource.getSound$1('ChainError').play$0();
        break c$0;
      }
      if (field.canLinkVertical$1(fieldNorth) === true) {
        fieldNorth.set$linked(false);
        fieldNorth.updateDisplayObjects$3(this._chainLayer, this._linkLayer, this._specialLayer);
      }
      if (field.canLinkHorizontal$1(fieldWest) === true) {
        fieldWest.set$linked(false);
        fieldWest.updateDisplayObjects$3(this._chainLayer, this._linkLayer, this._specialLayer);
      }
      t1 = field.get$direction();
      if (typeof t1 !== 'number')
        throw $.iae(t1);
      field.set$direction(1 - t1);
      field.set$linked(false);
      field.set$linkedJoker(false);
      $.Sounds_resource.getSound$1('ChainRotate').play$0();
      if (field.canLinkHorizontal$1(fieldEast) === true) {
        field.set$linked(true);
        field.set$linkedJoker($.eqB(field.get$special(), 'Joker') || $.eqB(fieldEast.get$special(), 'Joker'));
      }
      if (field.canLinkVertical$1(fieldSouth) === true) {
        field.set$linked(true);
        field.set$linkedJoker($.eqB(field.get$special(), 'Joker') || $.eqB(fieldSouth.get$special(), 'Joker'));
      }
      field.updateDisplayObjects$3(this._chainLayer, this._linkLayer, this._specialLayer);
      playChainLink = field.get$linked() === true;
      if (field.canLinkVertical$1(fieldNorth) === true) {
        fieldNorth.set$linked(true);
        fieldNorth.set$linkedJoker($.eqB(field.get$special(), 'Joker') || $.eqB(fieldNorth.get$special(), 'Joker'));
        fieldNorth.updateDisplayObjects$3(this._chainLayer, this._linkLayer, this._specialLayer);
        playChainLink = true;
      }
      if (field.canLinkHorizontal$1(fieldWest) === true) {
        fieldWest.set$linked(true);
        fieldWest.set$linkedJoker($.eqB(field.get$special(), 'Joker') || $.eqB(fieldWest.get$special(), 'Joker'));
        fieldWest.updateDisplayObjects$3(this._chainLayer, this._linkLayer, this._specialLayer);
        playChainLink = true;
      }
      if (playChainLink)
        $.Sounds_resource.getSound$1('ChainLink').play$0();
      this._processCombinations$0();
    }
  }
},
 Board$7: function(chains, locks, jokers, blocks, doubles, quints, colors) {
  var completeCounter, x, t1, t2, y, field, t3, transition;
  this._random = $.Random_Random(null);
  this._status = 1;
  this._colors = colors;
  this._levelChains = chains;
  this._levelLocks = locks;
  this._levelJokers = jokers;
  this._levelBlocks = blocks;
  this._levelDoubles = doubles;
  this._levelQuints = quints;
  this._levelColors = $.get$length(colors);
  this._mouseBuffer = $._ListImpl_List(null);
  this._chainLayer = $.Sprite$();
  this._linkLayer = $.Sprite$();
  this._specialLayer = $.Sprite$();
  this._lockLayer = $.Sprite$();
  this._explosionLayer = $.Sprite$();
  this.addChild$1(this._chainLayer);
  this.addChild$1(this._linkLayer);
  this.addChild$1(this._specialLayer);
  this.addChild$1(this._lockLayer);
  this.addChild$1(this._explosionLayer);
  this._linkLayer.set$mouseEnabled(false);
  this._specialLayer.set$mouseEnabled(false);
  this._lockLayer.set$mouseEnabled(false);
  this._explosionLayer.set$mouseEnabled(false);
  this.initLocks$0();
  this.initQueue$0();
  this.initField$0();
  this._animationRunning = true;
  completeCounter = $.ValueCounter$();
  this.mask = $.Mask$rectangle(0, 0, 500, 500);
  for (x = 0; x < 10; ++x)
    for (t1 = x * 50 + 25, t2 = x * 0.03, y = 0; y < 10; ++y) {
      field = $.index(this._fields, x + y * 10);
      field.set$x(t1);
      t3 = y * 50 + 25;
      field.set$y(t3 - 550);
      field.updateDisplayObjects$3(this._chainLayer, this._linkLayer, this._specialLayer);
      transition = $.Transition$(field.get$y(), t3, 0.4, $.Transitions_easeOutCubic);
      transition.set$delay(t2);
      transition.set$onUpdate(new $.anon(field));
      transition.set$onComplete(new $.anon0(completeCounter, this));
      $.add$1($.renderJuggler, transition);
    }
  this.addEventListener$2('mouseDown', this.get$_onMouseDown());
}
};

$$.BoardEvent = {"": ["_info", "_lib1_type", "_bubbles", "_eventPhase", "_target", "_currentTarget", "_stopsPropagation", "_stopsImmediatePropagation"],
 "super": "Event",
 get$info: function() {
  return this._info;
},
 BoardEvent$3: function(type, info, bubbles) {
  this._info = info;
}
};

$$.Bonus = {"": ["_textFieldContainer?", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 Bonus$1: function(points) {
  var textField, transition;
  textField = $.TextField$();
  textField.set$defaultTextFormat($.TextFormat$('Arial', 30, 16777215, 'center', true, 0, false, 0, 0, 0, false));
  textField.set$width(110);
  textField.set$height(36);
  textField.set$wordWrap(false);
  textField.set$x(646);
  textField.set$y(130);
  textField.mouseEnabled = false;
  textField.set$text($.toString(points));
  textField.set$x($.div($.neg(textField.get$width()), 2));
  textField.set$y($.div($.neg(textField.get$height()), 2));
  this._textFieldContainer = $.Sprite$();
  this._textFieldContainer.addChild$1(textField);
  this.addChild$1(this._textFieldContainer);
  transition = $.Transition$(0, 1, 1.5, $.Transitions_easeOutCubic);
  transition.set$onUpdate(new $.anon7(this));
  transition.set$onComplete(new $.anon8(this));
  $.add$1($.renderJuggler, transition);
}
};

$$.ExitBox = {"": ["_timeGauge?", "_yesButton", "_noButton", "_doneFunction", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 _doneFunction$0: function() { return this._doneFunction.call$0(); },
 _doneFunction$1: function(arg0) { return this._doneFunction.call$1(arg0); },
 _onExit$1: function(exit) {
  if (!(this._doneFunction == null)) {
    this._doneFunction$1(exit);
    this._doneFunction = null;
  }
},
 _onYesButtonClicked$1: function(me) {
  this._onExit$1(true);
},
 get$_onYesButtonClicked: function() { return new $.BoundClosure(this, '_onYesButtonClicked$1'); },
 _onNoButtonClicked$1: function(me) {
  this._onExit$1(false);
},
 get$_onNoButtonClicked: function() { return new $.BoundClosure(this, '_onNoButtonClicked$1'); },
 _onTimeOver$1: function(e) {
  this._onExit$1(false);
},
 get$_onTimeOver: function() { return new $.BoundClosure(this, '_onTimeOver$1'); },
 show$1: function(doneFunction) {
  this._doneFunction = doneFunction;
},
 ExitBox$0: function() {
  var textField, t1, exitYesButtonNormal, exitYesButtonPressed, exitNoButtonNormal, exitNoButtonPressed;
  this.addChild$1($.Bitmap$($.Grafix_resource.getBitmapData$1('ExitBox'), 'auto'));
  textField = $.TextField$();
  textField.set$defaultTextFormat($.TextFormat$('Arial', 24, 16777215, 'center', true, 0, false, 0, 0, 0, false));
  textField.set$width(240);
  textField.set$height(100);
  textField.set$wordWrap(true);
  textField.set$text($.Texts_resource.getText$1('GENexitquery'));
  textField.set$x(47);
  t1 = $.div(textField.get$textHeight(), 2);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  textField.set$y(150 - t1);
  textField.mouseEnabled = false;
  this.addChild$1(textField);
  this._timeGauge = $.TimeGauge$(7, $.Grafix_resource.getBitmapData$1('ExitGauge'), 'DIRECTION_DOWN');
  this._timeGauge.set$x(268);
  this._timeGauge.set$y(25);
  this._timeGauge.addEventListener$2('TimeOver', this.get$_onTimeOver());
  this.addChild$1(this._timeGauge);
  this._timeGauge.addAlarm$2('TimeOver', 0);
  this._timeGauge.start$0();
  exitYesButtonNormal = $.Bitmap$($.Grafix_resource.getBitmapData$1('ExitYesButtonNormal'), 'auto');
  exitYesButtonPressed = $.Bitmap$($.Grafix_resource.getBitmapData$1('ExitYesButtonPressed'), 'auto');
  this._yesButton = $.SimpleButton$(exitYesButtonNormal, exitYesButtonNormal, exitYesButtonPressed, exitYesButtonPressed);
  this._yesButton.set$x(68);
  this._yesButton.set$y(239);
  this._yesButton.addEventListener$2('click', this.get$_onYesButtonClicked());
  this.addChild$1(this._yesButton);
  exitNoButtonNormal = $.Bitmap$($.Grafix_resource.getBitmapData$1('ExitNoButtonNormal'), 'auto');
  exitNoButtonPressed = $.Bitmap$($.Grafix_resource.getBitmapData$1('ExitNoButtonPressed'), 'auto');
  this._noButton = $.SimpleButton$(exitNoButtonNormal, exitNoButtonNormal, exitNoButtonPressed, exitNoButtonPressed);
  this._noButton.set$x(173);
  this._noButton.set$y(232);
  this._noButton.addEventListener$2('click', this.get$_onNoButtonClicked());
  this.addChild$1(this._noButton);
  this.addEventListener$2('addedToStage', new $.anon9(this));
  this.addEventListener$2('removedFromStage', new $.anon10(this));
}
};

$$.ExplosionParticle = {"": ["bitmap?", "startX?", "startY?", "angle?", "velocity?", "rotation="],
 "super": "Object"
};

$$.Explosion = {"": ["_particles", "_lib2_currentTime", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 advanceTime$1: function(time) {
  var t1, i, particle, bitmap, angle, velocity, rotation, t3, t5, t7, posX, t9, t11, t12, posY;
  if (typeof time !== 'number')
    return this.advanceTime$1$bailout(1, time);
  t1 = this._lib2_currentTime;
  if (typeof t1 !== 'number')
    return this.advanceTime$1$bailout(2, time, t1);
  this._lib2_currentTime = $.min(0.8, t1 + time);
  i = 0;
  while (true) {
    t1 = $.get$length(this._particles);
    if (typeof t1 !== 'number')
      return this.advanceTime$1$bailout(3, i, t1);
    if (!(i < t1))
      break;
    t1 = this._particles;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.advanceTime$1$bailout(4, i, t1);
    if (i >= t1.length)
      throw $.ioore(i);
    particle = t1[i];
    bitmap = particle.get$bitmap();
    angle = particle.get$angle();
    velocity = particle.get$velocity();
    rotation = particle.get$rotation();
    if (typeof rotation !== 'number')
      return this.advanceTime$1$bailout(5, i, angle, rotation, velocity, particle, bitmap);
    t3 = particle.get$startX();
    if (typeof t3 !== 'number')
      return this.advanceTime$1$bailout(6, i, angle, rotation, t3, velocity, particle, bitmap);
    t5 = this._lib2_currentTime;
    if (typeof t5 !== 'number')
      return this.advanceTime$1$bailout(7, i, angle, rotation, t3, velocity, bitmap, particle, t5);
    t7 = $.cos(angle);
    if (typeof velocity !== 'number')
      throw $.iae(velocity);
    posX = t3 + t5 * (t7 * velocity);
    t3 = particle.get$startY();
    if (typeof t3 !== 'number')
      return this.advanceTime$1$bailout(8, i, angle, rotation, velocity, posX, t3, bitmap);
    t9 = this._lib2_currentTime;
    if (typeof t9 !== 'number')
      return this.advanceTime$1$bailout(9, i, t9, rotation, angle, velocity, posX, t3, bitmap);
    t11 = $.sin(angle) * velocity;
    t12 = this._lib2_currentTime;
    if (typeof t12 !== 'number')
      return this.advanceTime$1$bailout(10, i, t9, rotation, t11, t12, posX, t3, bitmap);
    posY = t3 + t9 * (t11 + t12 * 981 * 0.5);
    bitmap.set$x(posX);
    bitmap.set$y(posY);
    t3 = this._lib2_currentTime;
    if (typeof t3 !== 'number')
      return this.advanceTime$1$bailout(11, i, t3, rotation, bitmap);
    bitmap.set$rotation(t3 * rotation);
    ++i;
  }
  t1 = this._lib2_currentTime;
  if (typeof t1 !== 'number')
    return this.advanceTime$1$bailout(12, t1);
  if (t1 >= 0.6)
    this.set$alpha((0.8 - t1) / 0.2);
  t1 = this._lib2_currentTime;
  if (typeof t1 !== 'number')
    return this.advanceTime$1$bailout(13, t1);
  if (t1 >= 0.8)
    this.removeFromParent$0();
  t1 = this._lib2_currentTime;
  if (typeof t1 !== 'number')
    return this.advanceTime$1$bailout(14, t1);
  return t1 < 0.8;
},
 advanceTime$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state0) {
    case 1:
      time = env0;
      break;
    case 2:
      time = env0;
      t1 = env1;
      break;
    case 3:
      i = env0;
      t1 = env1;
      break;
    case 4:
      i = env0;
      t1 = env1;
      break;
    case 5:
      i = env0;
      angle = env1;
      rotation = env2;
      velocity = env3;
      particle = env4;
      bitmap = env5;
      break;
    case 6:
      i = env0;
      angle = env1;
      rotation = env2;
      t3 = env3;
      velocity = env4;
      particle = env5;
      bitmap = env6;
      break;
    case 7:
      i = env0;
      angle = env1;
      rotation = env2;
      t3 = env3;
      velocity = env4;
      bitmap = env5;
      particle = env6;
      t5 = env7;
      break;
    case 8:
      i = env0;
      angle = env1;
      rotation = env2;
      velocity = env3;
      posX = env4;
      t3 = env5;
      bitmap = env6;
      break;
    case 9:
      i = env0;
      t9 = env1;
      rotation = env2;
      angle = env3;
      velocity = env4;
      posX = env5;
      t3 = env6;
      bitmap = env7;
      break;
    case 10:
      i = env0;
      t9 = env1;
      rotation = env2;
      t11 = env3;
      t12 = env4;
      posX = env5;
      t3 = env6;
      bitmap = env7;
      break;
    case 11:
      i = env0;
      t3 = env1;
      rotation = env2;
      bitmap = env3;
      break;
    case 12:
      t1 = env0;
      break;
    case 13:
      t1 = env0;
      break;
    case 14:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = this._lib2_currentTime;
    case 2:
      state0 = 0;
      this._lib2_currentTime = $.min(0.8, $.add(t1, time));
      i = 0;
    default:
      L0:
        while (true)
          switch (state0) {
            case 0:
              t1 = $.get$length(this._particles);
            case 3:
              state0 = 0;
              if (!$.ltB(i, t1))
                break L0;
              t1 = this._particles;
            case 4:
              state0 = 0;
              particle = $.index(t1, i);
              bitmap = particle.get$bitmap();
              angle = particle.get$angle();
              velocity = particle.get$velocity();
              rotation = particle.get$rotation();
            case 5:
              state0 = 0;
              t3 = particle.get$startX();
            case 6:
              state0 = 0;
              t5 = this._lib2_currentTime;
            case 7:
              state0 = 0;
              t7 = $.cos(angle);
              if (typeof velocity !== 'number')
                throw $.iae(velocity);
              posX = $.add(t3, $.mul(t5, t7 * velocity));
              t3 = particle.get$startY();
            case 8:
              state0 = 0;
              t9 = this._lib2_currentTime;
            case 9:
              state0 = 0;
              t11 = $.sin(angle) * velocity;
              t12 = this._lib2_currentTime;
            case 10:
              state0 = 0;
              t14 = $.mul($.mul(t12, 981), 0.5);
              if (typeof t14 !== 'number')
                throw $.iae(t14);
              posY = $.add(t3, $.mul(t9, t11 + t14));
              bitmap.set$x(posX);
              bitmap.set$y(posY);
              t3 = this._lib2_currentTime;
            case 11:
              state0 = 0;
              bitmap.set$rotation($.mul(t3, rotation));
              ++i;
          }
      t1 = this._lib2_currentTime;
    case 12:
      state0 = 0;
      if ($.geB(t1, 0.6)) {
        t1 = this._lib2_currentTime;
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        this.set$alpha((0.8 - t1) / 0.2);
      }
      t1 = this._lib2_currentTime;
    case 13:
      state0 = 0;
      if ($.geB(t1, 0.8))
        this.removeFromParent$0();
      t1 = this._lib2_currentTime;
    case 14:
      var time, t1, i, particle, bitmap, angle, velocity, rotation, t3, t5, t7, posX, t9, t11, t12, t14, posY;
      state0 = 0;
      return $.lt(t1, 0.8);
  }
},
 Explosion$2: function(color, direction) {
  var chain, random, angle, velocity, y, t1, t2, t3, t4, t5, x, t6, t7, bitmap, t8, particle;
  this._particles = $._ListImpl_List(null);
  this._lib2_currentTime = 0;
  this.mouseEnabled = false;
  chain = $.Grafix_getChain(color, direction);
  random = $.Random_Random(null);
  for (angle = null, velocity = null, y = 0; y <= 1; ++y)
    for (t1 = y * 25, t2 = 12.5 + t1, t3 = t1 + 12.5, t4 = y === 1, t5 = y === 0, x = 0; x <= 1; ++x) {
      t6 = x === 0;
      if (t6 && t5) {
        this.set$rotation(-6.283185307179586);
        angle = 3.6128315516282616;
      }
      t7 = x === 1;
      if (t7 && t5) {
        this.set$rotation(6.283185307179586);
        angle = 5.811946409141117;
      }
      if (t7 && t4) {
        this.set$rotation(6.283185307179586);
        angle = 0.47123889803846897;
      }
      if (t6 && t4) {
        this.set$rotation(-6.283185307179586);
        angle = 2.670353755551324;
      }
      t6 = random.nextDouble$0();
      if (typeof t6 !== 'number')
        throw $.iae(t6);
      angle = $.add(angle, 0.6283185307179586 * t6);
      t7 = random.nextDouble$0();
      if (typeof t7 !== 'number')
        throw $.iae(t7);
      velocity = 80 + 40 * t7;
      bitmap = $.Bitmap$(chain.bitmapData, 'auto');
      t8 = x * 25;
      bitmap.clipRectangle = $.Rectangle$(t8, t1, 25, 25);
      bitmap.set$pivotX(12.5 + t8);
      bitmap.set$pivotY(t2);
      bitmap.set$x(t8);
      bitmap.set$y(t1);
      this.addChild$1(bitmap);
      particle = $.ExplosionParticle$();
      particle.bitmap = bitmap;
      particle.startX = t8 + 12.5;
      particle.startY = t3;
      particle.angle = angle;
      particle.velocity = velocity;
      particle.rotation = this.get$rotation();
      $.add$1(this._particles, particle);
    }
}
};

$$.Field = {"": ["_color", "_direction", "_special", "_lib2_x", "_lib2_y", "_linked", "_linkedJoker", "_empty", "_chainDisplayObject", "_linkDisplayObject", "_specialDisplayObject"],
 "super": "Object",
 get$color: function() {
  return this._color;
},
 set$color: function(value) {
  this._color = value;
},
 get$direction: function() {
  return this._direction;
},
 set$direction: function(value) {
  this._direction = value;
},
 get$special: function() {
  return this._special;
},
 set$special: function(value) {
  this._special = value;
},
 get$linked: function() {
  return this._linked;
},
 set$linked: function(value) {
  this._linked = value;
},
 get$linkedJoker: function() {
  return this._linkedJoker;
},
 set$linkedJoker: function(value) {
  this._linkedJoker = value;
},
 get$empty: function() {
  return this._empty;
},
 set$empty: function(value) {
  this._empty = value;
},
 couldLink$1: function(field) {
  var t1, t3, link;
  if (!(field == null)) {
    if (!$.eqB(field.get$color(), this._color)) {
      t1 = field.get$special();
      if (typeof t1 !== 'string')
        return this.couldLink$1$bailout(1, field, t1);
      if (!(t1 === 'Joker')) {
        t1 = this._special;
        if (typeof t1 !== 'string')
          return this.couldLink$1$bailout(2, field, t1);
        t1 = t1 === 'Joker';
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1) {
      t1 = field.get$special();
      if (typeof t1 !== 'string')
        return this.couldLink$1$bailout(3, t1);
      if (!(t1 === 'Block')) {
        t1 = this._special;
        if (typeof t1 !== 'string')
          return this.couldLink$1$bailout(4, t1);
        t3 = !(t1 === 'Block');
        t1 = t3;
      } else
        t1 = false;
      link = t1;
    } else
      link = false;
  } else
    link = false;
  return link;
},
 couldLink$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      field = env0;
      t1 = env1;
      break;
    case 2:
      field = env0;
      t1 = env1;
      break;
    case 3:
      t1 = env0;
      break;
    case 4:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      var t1, field, t3, link;
      if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && !(field == null))
        switch (state0) {
          case 0:
          default:
            if (state0 === 2 || state0 === 1 || state0 === 0 && !$.eqB(field.get$color(), this._color))
              switch (state0) {
                case 0:
                  t1 = field.get$special();
                case 1:
                  state0 = 0;
                case 2:
                  if (state0 === 2 || state0 === 0 && !$.eqB(t1, 'Joker'))
                    switch (state0) {
                      case 0:
                        t1 = this._special;
                      case 2:
                        state0 = 0;
                        t1 = $.eqB(t1, 'Joker');
                    }
                  else
                    t1 = true;
              }
            else
              t1 = true;
          case 3:
          case 4:
            if (state0 === 4 || state0 === 3 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t1 = field.get$special();
                case 3:
                  state0 = 0;
                case 4:
                  if (state0 === 4 || state0 === 0 && !$.eqB(t1, 'Block'))
                    switch (state0) {
                      case 0:
                        t1 = this._special;
                      case 4:
                        state0 = 0;
                        t3 = !$.eqB(t1, 'Block');
                        t1 = t3;
                    }
                  else
                    t1 = false;
                  link = t1;
              }
            else
              link = false;
        }
      else
        link = false;
      return link;
  }
},
 canLinkHorizontal$1: function(field) {
  var t1, t3, link;
  if (!(field == null)) {
    if (!$.eqB(field.get$color(), this._color)) {
      t1 = field.get$special();
      if (typeof t1 !== 'string')
        return this.canLinkHorizontal$1$bailout(1, field, t1);
      if (!(t1 === 'Joker')) {
        t1 = this._special;
        if (typeof t1 !== 'string')
          return this.canLinkHorizontal$1$bailout(2, field, t1);
        t1 = t1 === 'Joker';
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1) {
      t1 = field.get$direction();
      if (typeof t1 !== 'number')
        return this.canLinkHorizontal$1$bailout(3, field, t1);
      if (t1 === 0) {
        t1 = this._direction;
        if (typeof t1 !== 'number')
          return this.canLinkHorizontal$1$bailout(4, field, t1);
        if (t1 === 0) {
          t1 = field.get$special();
          if (typeof t1 !== 'string')
            return this.canLinkHorizontal$1$bailout(5, t1);
          if (!(t1 === 'Block')) {
            t1 = this._special;
            if (typeof t1 !== 'string')
              return this.canLinkHorizontal$1$bailout(6, t1);
            t3 = !(t1 === 'Block');
            t1 = t3;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      link = t1;
    } else
      link = false;
  } else
    link = false;
  return link;
},
 canLinkHorizontal$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      field = env0;
      t1 = env1;
      break;
    case 2:
      field = env0;
      t1 = env1;
      break;
    case 3:
      field = env0;
      t1 = env1;
      break;
    case 4:
      field = env0;
      t1 = env1;
      break;
    case 5:
      t1 = env0;
      break;
    case 6:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      var t1, field, t3, link;
      if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && !(field == null))
        switch (state0) {
          case 0:
          default:
            if (state0 === 2 || state0 === 1 || state0 === 0 && !$.eqB(field.get$color(), this._color))
              switch (state0) {
                case 0:
                  t1 = field.get$special();
                case 1:
                  state0 = 0;
                case 2:
                  if (state0 === 2 || state0 === 0 && !$.eqB(t1, 'Joker'))
                    switch (state0) {
                      case 0:
                        t1 = this._special;
                      case 2:
                        state0 = 0;
                        t1 = $.eqB(t1, 'Joker');
                    }
                  else
                    t1 = true;
              }
            else
              t1 = true;
          case 3:
          case 4:
          case 5:
          case 6:
            if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t1 = field.get$direction();
                case 3:
                  state0 = 0;
                default:
                  if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && $.eqB(t1, 0))
                    switch (state0) {
                      case 0:
                        t1 = this._direction;
                      case 4:
                        state0 = 0;
                      default:
                        if (state0 === 6 || state0 === 5 || state0 === 0 && $.eqB(t1, 0))
                          switch (state0) {
                            case 0:
                              t1 = field.get$special();
                            case 5:
                              state0 = 0;
                            case 6:
                              if (state0 === 6 || state0 === 0 && !$.eqB(t1, 'Block'))
                                switch (state0) {
                                  case 0:
                                    t1 = this._special;
                                  case 6:
                                    state0 = 0;
                                    t3 = !$.eqB(t1, 'Block');
                                    t1 = t3;
                                }
                              else
                                t1 = false;
                          }
                        else
                          t1 = false;
                    }
                  else
                    t1 = false;
                  link = t1;
              }
            else
              link = false;
        }
      else
        link = false;
      return link;
  }
},
 canLinkVertical$1: function(field) {
  var t1, t3, link;
  if (!(field == null)) {
    if (!$.eqB(field.get$color(), this._color)) {
      t1 = field.get$special();
      if (typeof t1 !== 'string')
        return this.canLinkVertical$1$bailout(1, field, t1);
      if (!(t1 === 'Joker')) {
        t1 = this._special;
        if (typeof t1 !== 'string')
          return this.canLinkVertical$1$bailout(2, field, t1);
        t1 = t1 === 'Joker';
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1) {
      t1 = field.get$direction();
      if (typeof t1 !== 'number')
        return this.canLinkVertical$1$bailout(3, field, t1);
      if (t1 === 1) {
        t1 = this._direction;
        if (typeof t1 !== 'number')
          return this.canLinkVertical$1$bailout(4, field, t1);
        if (t1 === 1) {
          t1 = field.get$special();
          if (typeof t1 !== 'string')
            return this.canLinkVertical$1$bailout(5, t1);
          if (!(t1 === 'Block')) {
            t1 = this._special;
            if (typeof t1 !== 'string')
              return this.canLinkVertical$1$bailout(6, t1);
            t3 = !(t1 === 'Block');
            t1 = t3;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      link = t1;
    } else
      link = false;
  } else
    link = false;
  return link;
},
 canLinkVertical$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      field = env0;
      t1 = env1;
      break;
    case 2:
      field = env0;
      t1 = env1;
      break;
    case 3:
      field = env0;
      t1 = env1;
      break;
    case 4:
      field = env0;
      t1 = env1;
      break;
    case 5:
      t1 = env0;
      break;
    case 6:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      var t1, field, t3, link;
      if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && !(field == null))
        switch (state0) {
          case 0:
          default:
            if (state0 === 2 || state0 === 1 || state0 === 0 && !$.eqB(field.get$color(), this._color))
              switch (state0) {
                case 0:
                  t1 = field.get$special();
                case 1:
                  state0 = 0;
                case 2:
                  if (state0 === 2 || state0 === 0 && !$.eqB(t1, 'Joker'))
                    switch (state0) {
                      case 0:
                        t1 = this._special;
                      case 2:
                        state0 = 0;
                        t1 = $.eqB(t1, 'Joker');
                    }
                  else
                    t1 = true;
              }
            else
              t1 = true;
          case 3:
          case 4:
          case 5:
          case 6:
            if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t1 = field.get$direction();
                case 3:
                  state0 = 0;
                default:
                  if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && $.eqB(t1, 1))
                    switch (state0) {
                      case 0:
                        t1 = this._direction;
                      case 4:
                        state0 = 0;
                      default:
                        if (state0 === 6 || state0 === 5 || state0 === 0 && $.eqB(t1, 1))
                          switch (state0) {
                            case 0:
                              t1 = field.get$special();
                            case 5:
                              state0 = 0;
                            case 6:
                              if (state0 === 6 || state0 === 0 && !$.eqB(t1, 'Block'))
                                switch (state0) {
                                  case 0:
                                    t1 = this._special;
                                  case 6:
                                    state0 = 0;
                                    t3 = !$.eqB(t1, 'Block');
                                    t1 = t3;
                                }
                              else
                                t1 = false;
                          }
                        else
                          t1 = false;
                    }
                  else
                    t1 = false;
                  link = t1;
              }
            else
              link = false;
        }
      else
        link = false;
      return link;
  }
},
 get$x: function() {
  return this._lib2_x;
},
 set$x: function(value) {
  var t1;
  this._lib2_x = value;
  t1 = this._chainDisplayObject;
  if (!(t1 == null))
    t1.set$x(value);
  t1 = this._linkDisplayObject;
  if (!(t1 == null))
    t1.set$x(value);
  t1 = this._specialDisplayObject;
  if (!(t1 == null))
    t1.set$x(value);
},
 get$y: function() {
  return this._lib2_y;
},
 set$y: function(value) {
  var t1;
  this._lib2_y = value;
  t1 = this._chainDisplayObject;
  if (!(t1 == null))
    t1.set$y(value);
  t1 = this._linkDisplayObject;
  if (!(t1 == null))
    t1.set$y(value);
  t1 = this._specialDisplayObject;
  if (!(t1 == null))
    t1.set$y(value);
},
 set$sinScale: function(n) {
  var s;
  if (!(this._chainDisplayObject == null)) {
    s = 1 + 0.3 * $.sin($.mul(n, 3.141592653589793));
    this._chainDisplayObject.set$scaleX(s);
    this._chainDisplayObject.set$scaleY(s);
  }
},
 updateDisplayObjects$3: function(chainLayer, linkLayer, specialLayer) {
  var t1, t2;
  t1 = this._chainDisplayObject;
  if (!(t1 == null)) {
    t1.get$parent().removeChild$1(this._chainDisplayObject);
    this._chainDisplayObject = null;
  }
  t1 = this._linkDisplayObject;
  if (!(t1 == null)) {
    t1.get$parent().removeChild$1(this._linkDisplayObject);
    this._linkDisplayObject = null;
  }
  t1 = this._specialDisplayObject;
  if (!(t1 == null)) {
    t1.get$parent().removeChild$1(this._specialDisplayObject);
    this._specialDisplayObject = null;
  }
  if ($.eqB(this.get$empty(), false)) {
    switch (this._special) {
      case 'Joker':
        this._chainDisplayObject = $.SpecialJokerChain$(this._direction);
        t1 = this._lib2_x;
        this._chainDisplayObject.set$x(t1);
        t1 = this._lib2_y;
        this._chainDisplayObject.set$y(t1);
        chainLayer.addChild$1(this._chainDisplayObject);
        break;
      case 'Block':
        this._chainDisplayObject = $.Grafix_getSpecial('Block');
        t1 = this._lib2_x;
        this._chainDisplayObject.set$x(t1);
        t1 = this._lib2_y;
        this._chainDisplayObject.set$y(t1);
        chainLayer.addChild$1(this._chainDisplayObject);
        break;
      default:
        this._chainDisplayObject = $.Grafix_getChain(this._color, this._direction);
        t1 = this._lib2_x;
        this._chainDisplayObject.set$x(t1);
        t1 = this._lib2_y;
        this._chainDisplayObject.set$y(t1);
        chainLayer.addChild$1(this._chainDisplayObject);
        break;
    }
    if (this._linked === true) {
      t1 = this._linkedJoker === true;
      t2 = this._direction;
      this._linkDisplayObject = t1 ? $.SpecialJokerLink$(t2) : $.Grafix_getLink(this._color, t2);
      t1 = this._lib2_x;
      t2 = $.eqB(this._direction, 0) ? 25 : 0;
      t2 = $.add(t1, t2);
      this._linkDisplayObject.set$x(t2);
      t2 = this._lib2_y;
      t1 = $.add(t2, $.eqB(this._direction, 1) ? 25 : 0);
      this._linkDisplayObject.set$y(t1);
      linkLayer.addChild$1(this._linkDisplayObject);
    }
    t1 = this._special;
    switch (t1) {
      case 'None':
        break;
      case 'Block':
        break;
      case 'Joker':
        break;
      default:
        this._specialDisplayObject = $.SpecialWobble$(t1);
        t2 = this._lib2_x;
        this._specialDisplayObject.set$x(t2);
        t2 = this._lib2_y;
        this._specialDisplayObject.set$y(t2);
        specialLayer.addChild$1(this._specialDisplayObject);
        break;
    }
  }
},
 Field$2: function(color, direction) {
  this._color = color;
  this._direction = direction;
  this._special = 'None';
  this._lib2_x = -1000;
  this._lib2_y = -1000;
  this._linked = false;
  this._linkedJoker = false;
  this._empty = false;
  this._chainDisplayObject = null;
  this._linkDisplayObject = null;
  this._specialDisplayObject = null;
}
};

$$.Game = {"": ["_infoBox?", "_shuffleButton", "_exitButton", "_board?", "_timeGauge?", "_head?", "_alarm", "_pointsTextField?", "_shufflesTextField", "_level=", "_lives", "_shuffles", "_chainCount", "_points=", "_gameLayer?", "_messageLayer", "_exitLayer?", "_introSound=", "_introSoundChannel?", "_exitCalled", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 start$0: function() {
  this._level = 1;
  this._lives = 1;
  this._points = 0;
  this._shuffles = 3;
  var messageBox = $.MessageBox$($.Texts_resource.getText$1('ESCStartText'));
  this._messageLayer.addChild$1(messageBox);
  $.renderJuggler.delayCall$2(new $.Game_start_anon(this), 1);
  messageBox.show$1(new $.Game_start_anon0(this));
},
 _nextLevel$0: function() {
  var t1, level, chainCount, time, tween, messageBox;
  t1 = this._board;
  if (!(t1 == null) && this.contains$1(t1) === true)
    this._gameLayer.removeChild$1(this._board);
  level = this._level;
  switch (level) {
    case 1:
      this._board = $.Board$(40, 3, 0, 0, 0, 0, [0, 1, 2]);
      chainCount = 40;
      time = 50;
      break;
    case 2:
      this._board = $.Board$(45, 3, 1, 0, 0, 0, [2, 3, 4]);
      chainCount = 45;
      time = 45;
      break;
    case 3:
      this._board = $.Board$(50, 4, 2, 2, 1, 0, [5, 6, 7]);
      chainCount = 50;
      time = 40;
      break;
    case 4:
      this._board = $.Board$(55, 4, 3, 3, 2, 0, [0, 2, 6]);
      chainCount = 55;
      time = 35;
      break;
    case 5:
      this._board = $.Board$(60, 5, 4, 4, 2, 1, [1, 3, 5]);
      chainCount = 60;
      time = 30;
      break;
    case 6:
      this._board = $.Board$(60, 5, 5, 5, 3, 2, [1, 2, 4, 7]);
      chainCount = 60;
      time = 34;
      break;
    case 7:
      this._board = $.Board$(65, 5, 5, 6, 3, 2, [0, 1, 2, 3]);
      chainCount = 65;
      time = 33;
      break;
    case 8:
      this._board = $.Board$(70, 5, 5, 6, 3, 2, [0, 2, 5, 6]);
      chainCount = 70;
      time = 32;
      break;
    case 9:
      this._board = $.Board$(75, 5, 5, 6, 3, 2, [1, 4, 5, 7]);
      chainCount = 75;
      time = 31;
      break;
    default:
      t1 = $.mul($.sub(level, 10), 5);
      if (typeof t1 !== 'number')
        throw $.iae(t1);
      chainCount = 80 + t1;
      this._board = $.Board$(chainCount, 5, 5, 6, 3, 2, [0, 1, 2, 3]);
      time = 30;
      break;
  }
  this._chainCount = chainCount;
  if ($.ltB(this._shuffles, 3)) {
    this._shuffles = $.add(this._shuffles, 1);
    t1 = $.S(this._shuffles) + 'x';
    this._shufflesTextField.set$text(t1);
  }
  this._board.addEventListener$2('Explosion', this.get$_onBoardEventExplosion());
  this._board.addEventListener$2('Unlocked', this.get$_onBoardEventUnlocked());
  this._board.addEventListener$2('Finalized', this.get$_onBoardEventFinalized());
  this._board.addEventListener$2('Timeouted', this.get$_onBoardEventTimeouted());
  this._board.set$x(20);
  this._board.set$y(16);
  this._board.set$mouseEnabled(false);
  this._gameLayer.addChild$1(this._board);
  this._timeGauge.reset$1(time);
  this._timeGauge.addAlarm$2('TimeShort', 9);
  this._timeGauge.addAlarm$2('TimeOver', 0);
  this._timeGauge.pause$0();
  this._infoBox.set$level(level);
  this._infoBox.set$chains(chainCount);
  this._infoBox.set$y(-210);
  tween = $.Tween$(this._infoBox, 0.4, $.Transitions_easeOutCubic);
  tween.animate$2('y', -90);
  $.add$1($.renderJuggler, tween);
  messageBox = $.MessageBox$($.replaceAll($.Texts_resource.getText$1('ESCLevelBoxText'), '{0}', $.S(chainCount)));
  this._messageLayer.addChild$1(messageBox);
  messageBox.show$1(new $.Game__nextLevel_anon(this));
},
 _onTimeShort$1: function(e) {
  this._alarm.start$0();
},
 get$_onTimeShort: function() { return new $.BoundClosure(this, '_onTimeShort$1'); },
 _onTimeOver$1: function(e) {
  this._board.updateStatus$1(3);
},
 get$_onTimeOver: function() { return new $.BoundClosure(this, '_onTimeOver$1'); },
 _onBoardEventUnlocked$1: function(be) {
  var position, type, unlockPoints, bonus, t1;
  position = $.index(be.get$info(), 'Position');
  type = $.index(be.get$info(), 'Type');
  unlockPoints = $.eqB(type, 'SingleLocked') ? 3000 : 0;
  if ($.eqB(type, 'SingleUnlocked'))
    unlockPoints = 1000;
  if ($.eqB(type, 'All'))
    unlockPoints = 10000;
  bonus = $.Bonus$(unlockPoints);
  bonus.set$x(position.get$x());
  bonus.set$y(position.get$y());
  this._gameLayer.addChild$1(bonus);
  this._points = $.add(this._points, unlockPoints);
  t1 = $.S(this._points);
  this._pointsTextField.set$text(t1);
},
 get$_onBoardEventUnlocked: function() { return new $.BoundClosure(this, '_onBoardEventUnlocked$1'); },
 _onBoardEventExplosion$1: function(be) {
  var chainCount, chainLength, chainFactor, chainPoints, t1, t2;
  chainCount = this._chainCount;
  chainLength = $.index(be.get$info(), 'Length');
  chainFactor = $.index(be.get$info(), 'Factor');
  chainCount = $.gtB(chainCount, chainLength) ? $.sub(chainCount, chainLength) : 0;
  this._chainCount = chainCount;
  this._infoBox.set$chains(chainCount);
  if ($.eqB(chainCount, 0))
    this._board.updateStatus$1(2);
  switch (chainLength) {
    case 3:
      chainPoints = 1000;
      break;
    case 4:
      chainPoints = 2000;
      break;
    case 5:
      chainPoints = 5000;
      break;
    default:
      chainPoints = 5000;
  }
  t1 = this._points;
  if (typeof chainFactor !== 'number')
    throw $.iae(chainFactor);
  this._points = $.add(t1, chainPoints * chainFactor);
  t2 = $.S(this._points);
  this._pointsTextField.set$text(t2);
},
 get$_onBoardEventExplosion: function() { return new $.BoundClosure(this, '_onBoardEventExplosion$1'); },
 _onBoardEventFinalized$1: function(be) {
  var laugh, levelUp, levelUpAnimation, tween;
  this._timeGauge.pause$0();
  this._alarm.stop$0();
  laugh = $.Sounds_resource.getSound$1('Laugh');
  levelUp = $.Sounds_resource.getSound$1('LevelUp');
  laugh.play$0();
  this._head.nod$1(3);
  levelUpAnimation = $.Grafix_getLevelUpAnimation();
  levelUpAnimation.set$x(55);
  levelUpAnimation.set$y(260);
  this._gameLayer.addChild$1(levelUpAnimation);
  $.renderJuggler.delayCall$2(new $.Game__onBoardEventFinalized_anon(levelUp, this), 2);
  $.renderJuggler.delayCall$2(new $.Game__onBoardEventFinalized_anon0(this), 2.5);
  tween = $.Tween$(this._infoBox, 0.5, $.Transitions_easeOutCubic);
  tween.animate$2('y', -210);
  tween.set$delay(3);
  $.add$1($.renderJuggler, tween);
  $.renderJuggler.delayCall$2(new $.Game__onBoardEventFinalized_anon1(levelUpAnimation, this), 3.5);
  $.renderJuggler.delayCall$2(new $.Game__onBoardEventFinalized_anon2(this), 4);
},
 get$_onBoardEventFinalized: function() { return new $.BoundClosure(this, '_onBoardEventFinalized$1'); },
 _onBoardEventTimeouted$1: function(be) {
  this._alarm.stop$0();
  this._board.dropFields$0();
  if ($.gtB(this._lives, 0)) {
    this._lives = $.sub(this._lives, 1);
    var messageBox = $.MessageBox$($.Texts_resource.getText$1('GEN2ndchancetime'));
    this._messageLayer.addChild$1(messageBox);
    $.Sounds_resource.getSound$1('LevelUp').play$0();
    messageBox.show$1(new $.Game__onBoardEventTimeouted_anon(this));
  } else {
    messageBox = $.MessageBox$($.Texts_resource.getText$1('GENtimeup'));
    this._messageLayer.addChild$1(messageBox);
    $.Sounds_resource.getSound$1('GameOver').play$0();
    messageBox.show$1(new $.Game__onBoardEventTimeouted_anon0(this));
  }
},
 get$_onBoardEventTimeouted: function() { return new $.BoundClosure(this, '_onBoardEventTimeouted$1'); },
 _onShuffleButtonClick$1: function(me) {
  if (!(this._board == null) && $.gtB(this._shuffles, 0))
    if (this._board.shuffleField$0() === true) {
      this._shuffles = $.sub(this._shuffles, 1);
      var t1 = $.S(this._shuffles) + 'x';
      this._shufflesTextField.set$text(t1);
    }
},
 get$_onShuffleButtonClick: function() { return new $.BoundClosure(this, '_onShuffleButtonClick$1'); },
 _onExitButtonClick$1: function(me) {
  var dark, exitBox;
  dark = $.Sprite$();
  dark.addChild$1($.Bitmap$($.BitmapData$(800, 600, false, 0), 'auto'));
  dark.set$alpha(0.6);
  this._exitLayer.addChild$1(dark);
  exitBox = $.ExitBox$();
  exitBox.set$x(235);
  exitBox.set$y(150);
  this._exitLayer.addChild$1(exitBox);
  exitBox.show$1(new $.Game__onExitButtonClick_anon(dark, exitBox, this));
},
 get$_onExitButtonClick: function() { return new $.BoundClosure(this, '_onExitButtonClick$1'); },
 _gameOver$0: function() {
  var gameOverBox, textField, t1, laugh, tween;
  gameOverBox = $.Sprite$();
  gameOverBox.addChild$1($.Bitmap$($.Grafix_resource.getBitmapData$1('ExitBox'), 'auto'));
  textField = $.TextField$();
  textField.set$defaultTextFormat($.TextFormat$('Arial', 30, 16777215, 'center', true, 0, false, 0, 0, 0, false));
  textField.set$width(240);
  textField.set$height(200);
  textField.set$wordWrap(true);
  textField.set$text($.Texts_resource.getText$1('GENgameover'));
  textField.set$x(47);
  t1 = $.div($.sub(textField.get$height(), textField.get$textHeight()), 2);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  textField.set$y(30 + t1);
  textField.mouseEnabled = false;
  gameOverBox.addChild$1(textField);
  gameOverBox.set$x(110);
  gameOverBox.set$y($.neg(gameOverBox.get$height()));
  this._messageLayer.addChild$1(gameOverBox);
  laugh = $.Sounds_resource.getSound$1('Laugh');
  $.renderJuggler.delayCall$2(new $.Game__gameOver_anon(laugh), 0.3);
  tween = $.Tween$(gameOverBox, 0.3, $.Transitions_easeOutCubic);
  tween.animate$2('y', 150);
  $.add$1($.renderJuggler, tween);
  $.renderJuggler.delayCall$2(new $.Game__gameOver_anon0(this), 5);
  gameOverBox.addEventListener$2('click', new $.Game__gameOver_anon1(this));
},
 _exitGame$1: function(gameEnded) {
  this._timeGauge.pause$0();
  if (!this._exitCalled)
    this._exitCalled = true;
},
 Game$0: function() {
  var shuffleButtonNormal, shuffleButtonPressed, exitButtonNormal, exitButtonPressed, t1;
  shuffleButtonNormal = $.Bitmap$($.Grafix_resource.getBitmapData$1('ShuffleButtonNormal'), 'auto');
  shuffleButtonPressed = $.Bitmap$($.Grafix_resource.getBitmapData$1('ShuffleButtonPressed'), 'auto');
  this._shuffleButton = $.SimpleButton$(shuffleButtonNormal, shuffleButtonNormal, shuffleButtonPressed, shuffleButtonPressed);
  this._shuffleButton.addEventListener$2('click', this.get$_onShuffleButtonClick());
  this._shuffleButton.set$x(530);
  this._shuffleButton.set$y(525);
  this.addChild$1(this._shuffleButton);
  exitButtonNormal = $.Bitmap$($.Grafix_resource.getBitmapData$1('ExitButtonNormal'), 'auto');
  exitButtonPressed = $.Bitmap$($.Grafix_resource.getBitmapData$1('ExitButtonPressed'), 'auto');
  this._exitButton = $.SimpleButton$(exitButtonNormal, exitButtonNormal, exitButtonPressed, exitButtonPressed);
  this._exitButton.addEventListener$2('click', this.get$_onExitButtonClick());
  this._exitButton.set$x(700);
  this._exitButton.set$y(500);
  this.addChild$1(this._exitButton);
  this._infoBox = $.InfoBox$();
  this._infoBox.set$x(540);
  this._infoBox.set$y(-1000);
  this.addChild$1(this._infoBox);
  this._timeGauge = $.TimeGauge$(10, $.Grafix_resource.getBitmapData$1('TimeGauge'), 'DIRECTION_UP');
  this._timeGauge.set$x(659);
  this._timeGauge.set$y(244);
  this._timeGauge.addEventListener$2('TimeShort', this.get$_onTimeShort());
  this._timeGauge.addEventListener$2('TimeOver', this.get$_onTimeOver());
  this.addChild$1(this._timeGauge);
  $.add$1($.renderJuggler, this._timeGauge);
  this._head = $.Head$();
  this._head.set$x(640);
  this._head.set$y(230);
  this.addChild$1(this._head);
  this._alarm = $.Alarm$();
  this._alarm.set$x(665);
  this._alarm.set$y(160);
  this.addChild$1(this._alarm);
  this._pointsTextField = $.TextField$();
  t1 = $.TextFormat$('Arial', 30, 13684944, 'center', true, 0, false, 0, 0, 0, false);
  this._pointsTextField.set$defaultTextFormat(t1);
  this._pointsTextField.set$width(140);
  this._pointsTextField.set$height(36);
  this._pointsTextField.set$wordWrap(false);
  this._pointsTextField.set$x(646);
  this._pointsTextField.set$y(130);
  this._pointsTextField.set$mouseEnabled(false);
  this._pointsTextField.set$text('0');
  this._pointsTextField.set$scaleX(0.9);
  this.addChild$1(this._pointsTextField);
  this._shufflesTextField = $.TextField$();
  t1 = $.TextFormat$('Arial', 20, 16777215, 'center', true, 0, false, 0, 0, 0, false);
  this._shufflesTextField.set$defaultTextFormat(t1);
  this._shufflesTextField.set$width(44);
  this._shufflesTextField.set$height(30);
  this._shufflesTextField.set$wordWrap(false);
  this._shufflesTextField.set$x(610);
  this._shufflesTextField.set$y(559);
  this._shufflesTextField.set$mouseEnabled(false);
  this._shufflesTextField.set$text('3x');
  this.addChild$1(this._shufflesTextField);
  this._gameLayer = $.Sprite$();
  this.addChild$1(this._gameLayer);
  this._messageLayer = $.Sprite$();
  this.addChild$1(this._messageLayer);
  this._exitLayer = $.Sprite$();
  this.addChild$1(this._exitLayer);
  this._introSound = $.Sounds_resource.getSound$1('Intro');
  this._introSoundChannel = this._introSound.play$0();
}
};

$$.Head = {"": ["_headBitmapDatas?", "_headBitmap?", "_nodTransition", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 nod$1: function(count) {
  var t1;
  $.renderJuggler.remove$1(this._nodTransition);
  this._nodTransition = $.Transition$(0, count, 0.5 * count, $.Transitions_linear);
  t1 = new $.Head_nod_anon(this);
  this._nodTransition.set$onUpdate(t1);
  $.add$1($.renderJuggler, this._nodTransition);
},
 nodStop$0: function() {
  $.renderJuggler.remove$1(this._nodTransition);
  var t1 = $.index(this._headBitmapDatas, 0);
  this._headBitmap.set$bitmapData(t1);
},
 Head$0: function() {
  this._headBitmapDatas = $.Grafix_getHeads();
  this._headBitmap = $.Bitmap$($.index(this._headBitmapDatas, 0), 'auto');
  var t1 = $.div($.neg(this._headBitmap.get$width()), 2);
  this._headBitmap.set$x(t1);
  t1 = $.div($.neg(this._headBitmap.get$height()), 2);
  this._headBitmap.set$y(t1);
  this.addChild$1(this._headBitmap);
  this._nodTransition = null;
}
};

$$.InfoBox = {"": ["_level=", "_levelText", "_chains", "_chainsText", "_chainsTextZoom", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 set$level: function(value) {
  var t1;
  this._level = value;
  t1 = 'Level ' + $.S(this._level);
  this._levelText.set$text(t1);
},
 set$chains: function(value) {
  var t1;
  this._chains = value;
  t1 = $.S(this._chains);
  this._chainsText.set$text(t1);
},
 InfoBox$0: function() {
  var t1, chain;
  this.addChild$1($.Bitmap$($.Grafix_resource.getBitmapData$1('InfoBox'), 'auto'));
  this._levelText = $.TextField$();
  t1 = $.TextFormat$('Arial', 35, 16777215, 'center', true, 0, false, 0, 0, 0, false);
  this._levelText.set$defaultTextFormat(t1);
  this._levelText.set$width(220);
  this._levelText.set$height(40);
  this._levelText.set$wordWrap(false);
  this._levelText.set$text('Level 1');
  this._levelText.set$x(20);
  this._levelText.set$y(115);
  this._levelText.set$rotation(-0.03490658503988659);
  this.addChild$1(this._levelText);
  this._chainsText = $.TextField$();
  t1 = $.TextFormat$('Arial', 25, 16777215, 'center', true, 0, false, 0, 0, 0, false);
  this._chainsText.set$defaultTextFormat(t1);
  this._chainsText.set$width(220);
  this._chainsText.set$height(30);
  this._chainsText.set$wordWrap(false);
  this._chainsText.set$text('40');
  t1 = $.div($.neg(this._chainsText.get$width()), 2);
  this._chainsText.set$x(t1);
  t1 = $.div($.neg(this._chainsText.get$height()), 2);
  this._chainsText.set$y(t1);
  this._chainsText.set$rotation(-0.03490658503988659);
  this._chainsTextZoom = $.Sprite$();
  this._chainsTextZoom.addChild$1(this._chainsText);
  this._chainsTextZoom.set$x(150);
  this._chainsTextZoom.set$y(172);
  this.addChild$1(this._chainsTextZoom);
  chain = $.Grafix_getChain(3, 0);
  chain.set$x(110);
  chain.set$y(171);
  chain.set$rotation(-0.03490658503988659);
  chain.set$scaleY(0.6);
  chain.set$scaleX(0.6);
  this.addChild$1(chain);
}
};

$$.Lock = {"": ["_color", "_bitmap?", "_lockBitmapDatas?", "_locked?", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 get$locked: function() {
  return this._locked;
},
 set$locked: function(value) {
  this._locked = value;
},
 showLocked$1: function(locked) {
  var t1 = this._lockBitmapDatas;
  t1 = $.index(t1, locked ? 0 : 4);
  this._bitmap.set$bitmapData(t1);
},
 showHappy$0: function() {
  var transition, tween1, tween2;
  transition = $.Transition$(0, 1, 2, $.Transitions_easeOutCubic);
  transition.set$onUpdate(new $.Lock_showHappy_anon(this));
  tween1 = $.Tween$(this, 0.2, $.Transitions_easeOutCubic);
  tween1.animate$2('alpha', 0);
  tween1.set$delay(2);
  tween1.set$onComplete(new $.Lock_showHappy_anon0(this));
  tween2 = $.Tween$(this, 0.2, $.Transitions_easeInCubic);
  tween2.animate$2('alpha', 1);
  tween2.set$delay(2.2);
  $.add$1($.renderJuggler, transition);
  $.add$1($.renderJuggler, tween1);
  $.add$1($.renderJuggler, tween2);
},
 Lock$1: function(color) {
  this._color = color;
  this._lockBitmapDatas = $.Grafix_getLock(color);
  this._locked = true;
  this._bitmap = $.Bitmap$($.index(this._lockBitmapDatas, 0), 'auto');
  this._bitmap.set$x(-34);
  this._bitmap.set$y(-50);
  this.addChild$1(this._bitmap);
}
};

$$.MessageBox = {"": ["_showTimeout!", "_doneFunction", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 _doneFunction$0: function() { return this._doneFunction.call$0(); },
 _doneFunction$1: function(arg0) { return this._doneFunction.call$1(arg0); },
 show$1: function(doneFunction) {
  var tween;
  this.get$parent().addChild$1(this);
  this.set$x($.neg(this.get$width()));
  this.set$y(150);
  this._doneFunction = doneFunction;
  tween = $.Tween$(this, 0.3, $.Transitions_easeOutCubic);
  tween.animate$2('x', 110);
  tween.set$onComplete(new $.MessageBox_show_anon(this));
  $.add$1($.renderJuggler, tween);
},
 _hide$0: function() {
  var t1, tween;
  t1 = this._showTimeout;
  if (!(t1 == null)) {
    $.renderJuggler.remove$1(t1);
    this._showTimeout = null;
    this._doneFunction$0();
    tween = $.Tween$(this, 0.4, $.Transitions_easeInCubic);
    tween.animate$2('x', 800);
    tween.set$onComplete(new $.MessageBox__hide_anon(this));
    $.add$1($.renderJuggler, tween);
  }
},
 get$_hide: function() { return new $.BoundClosure0(this, '_hide$0'); },
 _onClick$1: function(me) {
  this._hide$0();
},
 get$_onClick: function() { return new $.BoundClosure(this, '_onClick$1'); },
 MessageBox$1: function(text) {
  var textField, t1;
  this.addChild$1($.Bitmap$($.Grafix_resource.getBitmapData$1('MessageBox'), 'auto'));
  textField = $.TextField$();
  textField.set$defaultTextFormat($.TextFormat$('Arial', 24, 16777215, 'center', true, 0, false, 0, 0, 0, false));
  textField.set$width(240);
  textField.set$height(200);
  textField.set$wordWrap(true);
  textField.set$text(text);
  textField.set$x(47);
  t1 = $.div(textField.get$textHeight(), 2);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  textField.set$y(130 - t1);
  textField.mouseEnabled = false;
  this.addChild$1(textField);
  this._showTimeout = null;
  this.addEventListener$2('click', this.get$_onClick());
}
};

$$.SpecialJokerChain = {"": ["_bitmap?", "_jokerBitmapDatas", "_lib2_currentTime", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 advanceTime$1: function(time) {
  var t1, t3, t5, t7, frame;
  if (typeof time !== 'number')
    return this.advanceTime$1$bailout(1, time);
  t1 = this._lib2_currentTime;
  if (typeof t1 !== 'number')
    return this.advanceTime$1$bailout(2, time, t1);
  this._lib2_currentTime = t1 + time;
  t3 = this._lib2_currentTime;
  if (typeof t3 !== 'number')
    return this.advanceTime$1$bailout(3, t3);
  t5 = $.toInt(t3 * 10);
  if (typeof t5 !== 'number')
    return this.advanceTime$1$bailout(4, t5);
  t7 = $.get$length(this._jokerBitmapDatas);
  if (typeof t7 !== 'number')
    return this.advanceTime$1$bailout(5, t5, t7);
  frame = $.mod(t5, t7);
  t7 = this._jokerBitmapDatas;
  if (typeof t7 !== 'string' && (typeof t7 !== 'object' || t7 === null || t7.constructor !== Array && !t7.is$JavaScriptIndexingBehavior()))
    return this.advanceTime$1$bailout(6, frame, t7);
  if (frame !== (frame | 0))
    throw $.iae(frame);
  if (frame < 0 || frame >= t7.length)
    throw $.ioore(frame);
  t7 = t7[frame];
  this._bitmap.set$bitmapData(t7);
  return true;
},
 advanceTime$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      time = env0;
      break;
    case 2:
      time = env0;
      t1 = env1;
      break;
    case 3:
      t3 = env0;
      break;
    case 4:
      t5 = env0;
      break;
    case 5:
      t5 = env0;
      t7 = env1;
      break;
    case 6:
      frame = env0;
      t7 = env1;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = this._lib2_currentTime;
    case 2:
      state0 = 0;
      this._lib2_currentTime = $.add(t1, time);
      t3 = this._lib2_currentTime;
    case 3:
      state0 = 0;
      t5 = $.toInt($.mul(t3, 10));
    case 4:
      state0 = 0;
      t7 = $.get$length(this._jokerBitmapDatas);
    case 5:
      state0 = 0;
      frame = $.mod(t5, t7);
      t7 = this._jokerBitmapDatas;
    case 6:
      var time, t1, t3, t5, t7, frame;
      state0 = 0;
      t7 = $.index(t7, frame);
      this._bitmap.set$bitmapData(t7);
      return true;
  }
},
 SpecialJokerChain$1: function(direction) {
  this.mouseEnabled = false;
  this._lib2_currentTime = 0;
  this._jokerBitmapDatas = $.Grafix_getJokerChain(direction);
  this._bitmap = $.Bitmap$($.index(this._jokerBitmapDatas, 0), 'auto');
  this._bitmap.set$x(-25);
  this._bitmap.set$y(-25);
  this.addChild$1(this._bitmap);
  this.addEventListener$2('addedToStage', new $.anon5(this));
  this.addEventListener$2('removedFromStage', new $.anon6(this));
}
};

$$.SpecialJokerLink = {"": ["_bitmap?", "_jokerBitmapDatas", "_lib2_currentTime", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 advanceTime$1: function(time) {
  var t1, t3, t5, t7, frame;
  if (typeof time !== 'number')
    return this.advanceTime$1$bailout(1, time);
  t1 = this._lib2_currentTime;
  if (typeof t1 !== 'number')
    return this.advanceTime$1$bailout(2, time, t1);
  this._lib2_currentTime = t1 + time;
  t3 = this._lib2_currentTime;
  if (typeof t3 !== 'number')
    return this.advanceTime$1$bailout(3, t3);
  t5 = $.toInt(t3 * 10);
  if (typeof t5 !== 'number')
    return this.advanceTime$1$bailout(4, t5);
  t7 = $.get$length(this._jokerBitmapDatas);
  if (typeof t7 !== 'number')
    return this.advanceTime$1$bailout(5, t5, t7);
  frame = $.mod(t5, t7);
  t7 = this._jokerBitmapDatas;
  if (typeof t7 !== 'string' && (typeof t7 !== 'object' || t7 === null || t7.constructor !== Array && !t7.is$JavaScriptIndexingBehavior()))
    return this.advanceTime$1$bailout(6, frame, t7);
  if (frame !== (frame | 0))
    throw $.iae(frame);
  if (frame < 0 || frame >= t7.length)
    throw $.ioore(frame);
  t7 = t7[frame];
  this._bitmap.set$bitmapData(t7);
  return true;
},
 advanceTime$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      time = env0;
      break;
    case 2:
      time = env0;
      t1 = env1;
      break;
    case 3:
      t3 = env0;
      break;
    case 4:
      t5 = env0;
      break;
    case 5:
      t5 = env0;
      t7 = env1;
      break;
    case 6:
      frame = env0;
      t7 = env1;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = this._lib2_currentTime;
    case 2:
      state0 = 0;
      this._lib2_currentTime = $.add(t1, time);
      t3 = this._lib2_currentTime;
    case 3:
      state0 = 0;
      t5 = $.toInt($.mul(t3, 10));
    case 4:
      state0 = 0;
      t7 = $.get$length(this._jokerBitmapDatas);
    case 5:
      state0 = 0;
      frame = $.mod(t5, t7);
      t7 = this._jokerBitmapDatas;
    case 6:
      var time, t1, t3, t5, t7, frame;
      state0 = 0;
      t7 = $.index(t7, frame);
      this._bitmap.set$bitmapData(t7);
      return true;
  }
},
 SpecialJokerLink$1: function(direction) {
  this.mouseEnabled = false;
  this._lib2_currentTime = 0;
  this._jokerBitmapDatas = $.Grafix_getJokerLink(direction);
  this._bitmap = $.Bitmap$($.index(this._jokerBitmapDatas, 0), 'auto');
  this._bitmap.set$x(-25);
  this._bitmap.set$y(-25);
  this.addChild$1(this._bitmap);
  this.addEventListener$2('addedToStage', new $.anon3(this));
  this.addEventListener$2('removedFromStage', new $.anon4(this));
}
};

$$.SpecialWobble = {"": ["_bitmap?", "_lib2_currentTime", "buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Sprite",
 advanceTime$1: function(time) {
  var t1, t3;
  if (typeof time !== 'number')
    return this.advanceTime$1$bailout(1, time);
  t1 = this._lib2_currentTime;
  if (typeof t1 !== 'number')
    return this.advanceTime$1$bailout(2, time, t1);
  this._lib2_currentTime = t1 + time;
  t3 = this._lib2_currentTime;
  if (typeof t3 !== 'number')
    return this.advanceTime$1$bailout(3, t3);
  this.set$rotation($.sin(t3 * 7) * 10 * 3.141592653589793 / 180);
  return true;
},
 advanceTime$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      time = env0;
      break;
    case 2:
      time = env0;
      t1 = env1;
      break;
    case 3:
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = this._lib2_currentTime;
    case 2:
      state0 = 0;
      this._lib2_currentTime = $.add(t1, time);
      t3 = this._lib2_currentTime;
    case 3:
      var time, t1, t3;
      state0 = 0;
      this.set$rotation($.sin($.mul(t3, 7)) * 10 * 3.141592653589793 / 180);
      return true;
  }
},
 SpecialWobble$1: function(special) {
  this.mouseEnabled = false;
  this._lib2_currentTime = 0;
  this._bitmap = $.Grafix_getSpecial(special);
  this.addChild$1(this._bitmap);
  this.addEventListener$2('addedToStage', new $.anon1(this));
  this.addEventListener$2('removedFromStage', new $.anon2(this));
}
};

$$.ValueCounter = {"": ["value="],
 "super": "Object",
 increment$1: function(inc) {
  var t1 = $.add(this.value, inc);
  this.value = t1;
  return t1;
},
 increment$0: function() {
  return this.increment$1(1)
},
 decrement$1: function(dec) {
  var t1 = $.sub(this.value, dec);
  this.value = t1;
  return t1;
},
 decrement$0: function() {
  return this.decrement$1(1)
}
};

$$._AbstractWorkerEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._AudioContextEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$._BatteryManagerEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._BodyElementEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$focus: function() {
  return this.operator$index$1('focus');
},
 focus$0: function() { return this.get$focus().call$0(); },
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._DOMApplicationCacheEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._DedicatedWorkerContextEventsImpl = {"": ["_ptr"],
 "super": "_WorkerContextEventsImpl",
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._FilteredElementList = {"": ["_node", "_childNodes"],
 "super": "Object",
 get$_filtered: function() {
  return $._ListImpl_List$from($.filter(this._childNodes, new $._FilteredElementList__filtered_anon()));
},
 forEach$1: function(f) {
  $.forEach(this.get$_filtered(), f);
},
 operator$indexSet$2: function(index, value) {
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  var len = $.get$length(this);
  if ($.geB(newLength, len))
    return;
  else if ($.ltB(newLength, 0))
    throw $.$$throw($.ArgumentError$('Invalid list length'));
  this.removeRange$2($.sub(newLength, 1), $.sub(len, newLength));
},
 add$1: function(value) {
  $.add$1(this._childNodes, value);
},
 addLast$1: function(value) {
  $.add$1(this._childNodes, value);
},
 contains$1: function(element) {
  return false;
},
 removeRange$2: function(start, rangeLength) {
  $.forEach($.getRange(this.get$_filtered(), start, rangeLength), new $._FilteredElementList_removeRange_anon());
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnimplementedError$(null));
},
 clear$0: function() {
  $.clear(this._childNodes);
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    result.remove$0();
  return result;
},
 filter$1: function(f) {
  return $.filter(this.get$_filtered(), f);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this.get$_filtered());
},
 get$length: function() {
  return $.get$length(this.get$_filtered());
},
 operator$index$1: function(index) {
  return $.index(this.get$_filtered(), index);
},
 iterator$0: function() {
  return $.iterator(this.get$_filtered());
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this.get$_filtered(), start, rangeLength);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this.get$_filtered(), element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return $.get$last(this.get$_filtered());
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.EmptyElementRect = {"": ["client", "offset", "scroll", "bounding", "clientRects"],
 "super": "Object"
};

$$._DocumentEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$focus: function() {
  return this.operator$index$1('focus');
},
 focus$0: function() { return this.get$focus().call$0(); },
 get$keyDown: function() {
  return this.operator$index$1('keydown');
},
 get$keyPress: function() {
  return this.operator$index$1('keypress');
},
 get$keyUp: function() {
  return this.operator$index$1('keyup');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$mouseWheel: function() {
  return this.operator$index$1('mousewheel');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 reset$1: function(arg0) { return this.get$reset().call$1(arg0); }
};

$$._ChildrenElementList = {"": ["_lib_element?", "_childElements"],
 "super": "Object",
 _toList$0: function() {
  var t1, t3, output, len, i, t2;
  t1 = this._childElements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._toList$0$bailout(1, t1);
  t3 = t1.length;
  output = $._ListImpl_List(t3);
  for (len = t1.length, i = 0; i < len; ++i) {
    t2 = t1[i];
    if (i >= t3)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state0, t1) {
  var output, len, i, t2;
  output = $._ListImpl_List($.get$length(t1));
  for (len = $.get$length(t1), i = 0; $.ltB(i, len); ++i) {
    t2 = $.index(t1, i);
    if (i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 contains$1: function(element) {
  return $.contains$1(this._childElements, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this._childElements); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var output, t1, t2;
  output = [];
  t1 = new $._ChildrenElementList_filter_anon(output, f);
  for (t2 = $.iterator(this._childElements); t2.get$hasNext() === true;)
    t1.call$1(t2.next$0());
  return $._FrozenElementList$_wrap(output);
},
 get$isEmpty: function() {
  return this._lib_element.get$$$dom_firstElementChild() == null;
},
 get$length: function() {
  return $.get$length(this._childElements);
},
 operator$index$1: function(index) {
  return $.index(this._childElements, index);
},
 operator$indexSet$2: function(index, value) {
  this._lib_element.$dom_replaceChild$2(value, $.index(this._childElements, index));
},
 set$length: function(newLength) {
  throw $.$$throw($.UnsupportedError$(''));
},
 add$1: function(value) {
  this._lib_element.$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  this._lib_element.$dom_appendChild$1(value);
  return value;
},
 iterator$0: function() {
  return $.iterator(this._toList$0());
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnimplementedError$(null));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnimplementedError$(null));
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($._Lists_getRange(this, start, rangeLength, []));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  this._lib_element.set$text('');
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    this._lib_element.$dom_removeChild$1(result);
  return result;
},
 get$last: function() {
  return this._lib_element.get$$$dom_lastElementChild();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementList = {"": ["_nodeList"],
 "super": "Object",
 contains$1: function(element) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var out, t1, t2;
  out = [];
  for (t1 = $.iterator(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      out.push(t2);
  }
  return out;
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._nodeList);
},
 get$length: function() {
  return $.get$length(this._nodeList);
},
 operator$index$1: function(index) {
  return $.index(this._nodeList, index);
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 set$length: function(newLength) {
  $.set$length(this._nodeList, newLength);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$(''));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$(''));
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($.getRange(this._nodeList, start, rangeLength));
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._nodeList, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$(''));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$(''));
},
 get$last: function() {
  return $.get$last(this._nodeList);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementListIterator = {"": ["_lib_list", "_index"],
 "super": "Object",
 next$0: function() {
  var t1, t2;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._lib_list;
  t2 = this._index;
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 get$hasNext: function() {
  return $.lt(this._index, $.get$length(this._lib_list));
}
};

$$._SimpleClientRect = {"": ["left?", "top?", "width?", "height?"],
 "super": "Object",
 get$right: function() {
  return $.add(this.left, this.width);
},
 get$bottom: function() {
  return $.add(this.top, this.height);
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this.left, other.get$left()) && $.eqB(this.top, other.get$top()) && $.eqB(this.width, other.get$width()) && $.eqB(this.height, other.get$height());
},
 toString$0: function() {
  return '(' + $.S(this.left) + ', ' + $.S(this.top) + ', ' + $.S(this.width) + ', ' + $.S(this.height) + ')';
}
};

$$._ElementRectImpl = {"": ["client", "offset", "scroll", "_boundingClientRect", "_clientRects"],
 "super": "Object"
};

$$._ElementEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$focus: function() {
  return this.operator$index$1('focus');
},
 focus$0: function() { return this.get$focus().call$0(); },
 get$keyDown: function() {
  return this.operator$index$1('keydown');
},
 get$keyPress: function() {
  return this.operator$index$1('keypress');
},
 get$keyUp: function() {
  return this.operator$index$1('keyup');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 reset$1: function(arg0) { return this.get$reset().call$1(arg0); },
 get$mouseWheel: function() {
  var t1 = this._ptr;
  if (t1.onwheel !== undefined)
    return this.operator$index$1('wheel');
  else if (t1.onmousewheel !== undefined)
    return this.operator$index$1('mousewheel');
  else
    return this.operator$index$1('DOMMouseScroll');
}
};

$$._EventSourceEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$message: function() {
  return this.operator$index$1('message');
},
 get$open: function() {
  return this.operator$index$1('open');
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$._EventsImpl = {"": ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  return $._EventListenerListImpl$(this._ptr, type);
}
};

$$._EventListenerListImpl = {"": ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._ptr.$dom_addEventListener$3(this._type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._ptr.$dom_removeEventListener$3(this._type, listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
}
};

$$._FileReaderEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); }
};

$$._FileWriterEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._FrameSetElementEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$focus: function() {
  return this.operator$index$1('focus');
},
 focus$0: function() { return this.get$focus().call$0(); },
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._HttpRequestEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); }
};

$$._HttpRequestUploadEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); }
};

$$._IDBDatabaseEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._IDBOpenDBRequestEventsImpl = {"": ["_ptr"],
 "super": "_IDBRequestEventsImpl"
};

$$._IDBRequestEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._IDBTransactionEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); },
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._IDBVersionChangeRequestEventsImpl = {"": ["_ptr"],
 "super": "_IDBRequestEventsImpl"
};

$$._InputElementEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl"
};

$$._LocalWindowEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$canPlayThrough: function() {
  return this.operator$index$1('canplaythrough');
},
 get$ended: function() {
  return this.operator$index$1('ended');
},
 get$error: function() {
  return this.operator$index$1('error');
},
 get$focus: function() {
  return this.operator$index$1('focus');
},
 focus$0: function() { return this.get$focus().call$0(); },
 get$keyDown: function() {
  return this.operator$index$1('keydown');
},
 get$keyPress: function() {
  return this.operator$index$1('keypress');
},
 get$keyUp: function() {
  return this.operator$index$1('keyup');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$message: function() {
  return this.operator$index$1('message');
},
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$mouseWheel: function() {
  return this.operator$index$1('mousewheel');
},
 get$pause: function() {
  return this.operator$index$1('pause');
},
 pause$0: function() { return this.get$pause().call$0(); },
 get$play: function() {
  return this.operator$index$1('play');
},
 play$0: function() { return this.get$play().call$0(); },
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 reset$1: function(arg0) { return this.get$reset().call$1(arg0); }
};

$$._MediaElementEventsImpl = {"": ["_ptr"],
 "super": "_ElementEventsImpl",
 get$canPlayThrough: function() {
  return this.operator$index$1('canplaythrough');
},
 get$ended: function() {
  return this.operator$index$1('ended');
},
 get$pause: function() {
  return this.operator$index$1('pause');
},
 pause$0: function() { return this.get$pause().call$0(); },
 get$play: function() {
  return this.operator$index$1('play');
},
 play$0: function() { return this.get$play().call$0(); }
};

$$._MediaStreamEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$ended: function() {
  return this.operator$index$1('ended');
}
};

$$._MediaStreamTrackEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$ended: function() {
  return this.operator$index$1('ended');
}
};

$$._MediaStreamTrackListEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._MessagePortEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._ChildNodeListLazy = {"": ["_this"],
 "super": "Object",
 get$last: function() {
  return this._this.lastChild;
},
 add$1: function(value) {
  this._this.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._this.$dom_appendChild$1(value);
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    this._this.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._this.set$text('');
},
 operator$indexSet$2: function(index, value) {
  this._this.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  return $.iterator(this._this.get$$$dom_childNodes());
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 get$length: function() {
  return $.get$length(this._this.get$$$dom_childNodes());
},
 operator$index$1: function(index) {
  return $.index(this._this.get$$$dom_childNodes(), index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._ListWrapper = {"": [],
 "super": "Object",
 iterator$0: function() {
  return $.iterator(this._lib_list);
},
 contains$1: function(element) {
  return $.contains$1(this._lib_list, element);
},
 forEach$1: function(f) {
  return $.forEach(this._lib_list, f);
},
 filter$1: function(f) {
  return $.filter(this._lib_list, f);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._lib_list);
},
 get$length: function() {
  return $.get$length(this._lib_list);
},
 operator$index$1: function(index) {
  return $.index(this._lib_list, index);
},
 operator$indexSet$2: function(index, value) {
  $.indexSet(this._lib_list, index, value);
},
 set$length: function(newLength) {
  $.set$length(this._lib_list, newLength);
},
 add$1: function(value) {
  return $.add$1(this._lib_list, value);
},
 addLast$1: function(value) {
  return $.addLast(this._lib_list, value);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._lib_list, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  return $.clear(this._lib_list);
},
 removeLast$0: function() {
  return $.removeLast(this._lib_list);
},
 get$last: function() {
  return $.get$last(this._lib_list);
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this._lib_list, start, rangeLength);
},
 removeRange$2: function(start, rangeLength) {
  return $.removeRange(this._lib_list, start, rangeLength);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  return $.insertRange$3(this._lib_list, start, rangeLength, initialValue);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._NodeListWrapper = {"": ["_lib_list"],
 "super": "_ListWrapper",
 filter$1: function(f) {
  return $._NodeListWrapper$($.filter(this._lib_list, f));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($.getRange(this._lib_list, start, rangeLength));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._NotificationEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._PeerConnection00EventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$open: function() {
  return this.operator$index$1('open');
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$._RTCDataChannelEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
},
 get$message: function() {
  return this.operator$index$1('message');
},
 get$open: function() {
  return this.operator$index$1('open');
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$._RTCPeerConnectionEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$open: function() {
  return this.operator$index$1('open');
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$._SVGElementInstanceEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$focus: function() {
  return this.operator$index$1('focus');
},
 focus$0: function() { return this.get$focus().call$0(); },
 get$keyDown: function() {
  return this.operator$index$1('keydown');
},
 get$keyPress: function() {
  return this.operator$index$1('keypress');
},
 get$keyUp: function() {
  return this.operator$index$1('keyup');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$mouseWheel: function() {
  return this.operator$index$1('mousewheel');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 reset$1: function(arg0) { return this.get$reset().call$1(arg0); }
};

$$._ScriptProcessorNodeEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._SharedWorkerContextEventsImpl = {"": ["_ptr"],
 "super": "_WorkerContextEventsImpl",
 get$connect: function() {
  return this.operator$index$1('connect');
},
 connect$3: function(arg0, arg1, arg2) { return this.get$connect().call$3(arg0, arg1, arg2); }
};

$$._SpeechRecognitionEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$start: function() {
  return this.operator$index$1('start');
},
 start$0: function() { return this.get$start().call$0(); },
 start$1: function(arg0) { return this.get$start().call$1(arg0); }
};

$$._TextTrackCueEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._TextTrackEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._TextTrackListEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl"
};

$$._WebSocketEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
},
 get$message: function() {
  return this.operator$index$1('message');
},
 get$open: function() {
  return this.operator$index$1('open');
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$._WorkerContextEventsImpl = {"": ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._WorkerEventsImpl = {"": ["_ptr"],
 "super": "_AbstractWorkerEventsImpl",
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._MeasurementRequest = {"": ["computeValue", "completer?", "value=", "exception="],
 "super": "Object",
 computeValue$0: function() { return this.computeValue.call$0(); }
};

$$._MeasurementScheduler = {"": ["_callback?"],
 "super": "Object",
 _callback$0: function() { return this._callback.call$0(); },
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 maybeSchedule$0: function() {
  if (this._nextMeasurementFrameScheduled)
    return;
  this._nextMeasurementFrameScheduled = true;
  this._schedule$0();
},
 _onCallback$0: function() {
  if (!this._nextMeasurementFrameScheduled)
    return;
  this._nextMeasurementFrameScheduled = false;
  this._callback$0();
}
};

$$._PostMessageScheduler = {"": ["_MEASUREMENT_MESSAGE", "_nextMeasurementFrameScheduled", "_callback"],
 "super": "_MeasurementScheduler",
 _schedule$0: function() {
  $.window().postMessage$2(this._MEASUREMENT_MESSAGE, '*');
},
 _handleMessage$1: function(e) {
  this._onCallback$0();
},
 get$_handleMessage: function() { return new $.BoundClosure(this, '_handleMessage$1'); },
 _PostMessageScheduler$1: function(callback) {
  $.add$1($.window().get$on().get$message(), this.get$_handleMessage());
}
};

$$._MutationObserverScheduler = {"": ["_observer", "_dummy", "_nextMeasurementFrameScheduled", "_callback"],
 "super": "_MeasurementScheduler",
 _schedule$0: function() {
  var t1 = this._dummy.get$hidden() !== true;
  this._dummy.set$hidden(t1);
},
 _handleMutation$2: function(mutations, observer) {
  this._onCallback$0();
},
 get$_handleMutation: function() { return new $.BoundClosure1(this, '_handleMutation$2'); },
 _MutationObserverScheduler$1: function(callback) {
  this._observer = $.MutationObserver_MutationObserver(this.get$_handleMutation());
  this._dummy = $.DivElement_DivElement();
  this._observer.observe$2$attributes(this._dummy, true);
}
};

$$._DOMWindowCrossFrameImpl = {"": ["_window"],
 "super": "Object",
 get$parent: function() {
  return $._DOMWindowCrossFrameImpl__createSafe(this._window.parent);
},
 get$top: function() {
  return $._DOMWindowCrossFrameImpl__createSafe(this._window.top);
},
 focus$0: function() {
  return this._window.focus();
},
 close$0: function() {
  return this._window.close();
},
 postMessage$3: function(message, targetOrigin, messagePorts) {
  var t1, t2;
  t1 = messagePorts == null;
  t2 = this._window;
  if (t1)
    t2.postMessage(message,targetOrigin);
  else
    t2.postMessage(message,targetOrigin,messagePorts);
},
 postMessage$2: function(message,targetOrigin) {
  return this.postMessage$3(message,targetOrigin,null)
}
};

$$._FixedSizeListIterator = {"": ["_lib_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 get$hasNext: function() {
  return $.gt(this._lib_length, this._pos);
}
};

$$._VariableSizeListIterator = {"": [],
 "super": "Object",
 get$hasNext: function() {
  return $.gt($.get$length(this._array), this._pos);
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = this._pos;
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, t1) {
  var t3 = this._pos;
  this._pos = t3 + 1;
  return $.index(t1, t3);
}
};

$$._Manager = {"": ["nextIsolateId=", "currentManagerId?", "nextManagerId", "currentContext=", "rootContext=", "topEventLoop?", "fromCommandLine?", "isWorker?", "supportsWorkers", "isolates?", "mainManager?", "managers?"],
 "super": "Object",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  _IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  if ($.get$isEmpty(this.isolates) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.HashMapImplementation$();
  this.managers = $.HashMapImplementation$();
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"": ["id?", "ports?", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old, result, t1;
  old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  result = null;
  try {
    result = code.call$0();
  } finally {
    t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($._ExceptionImplementation$('Registry: ports must be registered only once.'));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  this.ports.remove$1(portId);
  if ($.get$isEmpty(this.ports) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1, t2;
  t1 = $._globalState();
  t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.HashMapImplementation$();
  this.initGlobals$0();
}
};

$$._EventLoop = {"": ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else if (!($._globalState().get$rootContext() == null) && $._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true && $._globalState().get$fromCommandLine() === true && $.get$isEmpty($._globalState().get$rootContext().get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$('Program exited with open ReceivePorts.'));
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function() {
  var t1, e, trace;
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"": ["isolate", "fn", "message?"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"": [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {"": ["_isolateId?"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($._ExceptionImplementation$('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer, port;
  completer = $.Completer_Completer();
  port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(completer, port));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"": ["_receivePort?", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(message, this, replyTo));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
},
 get$hashCode: function() {
  return this._receivePort.get$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"": ["_workerId?", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(replyTo, message, this));
},
 operator$eq$1: function(other) {
  var t1;
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"": ["_id?", "_lib4_callback?"],
 "super": "Object",
 _lib4_callback$0: function() { return this._lib4_callback.call$0(); },
 _lib4_callback$2: function(arg0, arg1) { return this._lib4_callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._lib4_callback = onMessage;
},
 close$0: function() {
  this._lib4_callback = null;
  $._globalState().get$currentContext().unregister$1(this._id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._id, this);
}
};

$$._PendingSendPortFinder = {"": ["ports?", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  if (!($.index(this._visited, list) == null))
    return;
  $.indexSet(this._visited, list, true);
  $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  if (!($.index(this._visited, map) == null))
    return;
  $.indexSet(this._visited, map, true);
  $.forEach(map.get$values(), new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsSerializer = {"": ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return ['sendport', x._workerId, x._isolateId, x._receivePortId];
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_id()];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"": ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer = {"": ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  var managerId, isolateId, receivePortId, isolate;
  managerId = $.index(x, 1);
  isolateId = $.index(x, 2);
  receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"": ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return object['__MessageTraverser__attached_info__'];
},
 operator$indexSet$2: function(object, info) {
  $.add$1(this.tagged, object);
  object['__MessageTraverser__attached_info__'] = info;
},
 reset$0: function() {
  this.tagged = $._ListImpl_List(null);
},
 cleanup$0: function() {
  var length$, i;
  length$ = $.get$length(this.tagged);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  i = 0;
  for (; i < length$; ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
}
};

$$._MessageTraverserVisitedMap = {"": [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {"": [],
 "super": "Object",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Copier = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copy, len, i;
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = list.length;
  copy = $._ListImpl_List(len);
  $.indexSet(this._visited, list, copy);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    copy[i] = this._dispatch$1(list[i]);
  }
  return copy;
},
 visitList$1$bailout: function(state0, list) {
  var copy, len, i, t1;
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = $.get$length(list);
  copy = $._ListImpl_List(len);
  $.indexSet(this._visited, list, copy);
  for (i = 0; $.ltB(i, len); ++i) {
    t1 = this._dispatch$1($.index(list, i));
    if (i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1, t2;
  t1 = {};
  t1.copy_10 = $.index(this._visited, map);
  t2 = t1.copy_10;
  if (!(t2 == null))
    return t2;
  t1.copy_10 = $.HashMapImplementation$();
  $.indexSet(this._visited, map, t1.copy_10);
  map.forEach$1(new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = $.index(this._visited, list);
  if (!(copyId == null))
    return ['ref', copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = $.index(this._visited, map);
  if (!(copyId == null))
    return ['ref', copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, map, id);
  return ['map', id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  var len, result, i;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  len = list.length;
  result = $._ListImpl_List(len);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._dispatch$1(list[i]);
  }
  return result;
},
 _serializeList$1$bailout: function(state0, list) {
  var len, result, i, t1;
  len = $.get$length(list);
  result = $._ListImpl_List(len);
  for (i = 0; $.ltB(i, len); ++i) {
    t1 = this._dispatch$1($.index(list, i));
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer = {"": [],
 "super": "Object",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._deserialized = $.HashMapImplementation$();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id, dartList, len, i, t1;
  id = $.index(x, 1);
  dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, dartList, id) {
  var len, i;
  $.indexSet(this._deserialized, id, dartList);
  len = $.get$length(dartList);
  for (i = 0; $.ltB(i, len); ++i)
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  var result, id, keys, values, len, i, key;
  result = $.HashMapImplementation$();
  id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    result.operator$indexSet$2(key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      x = env0;
      result = env1;
      keys = env2;
      break;
    case 2:
      values = env0;
      result = env1;
      keys = env2;
      break;
  }
  switch (state0) {
    case 0:
      result = $.HashMapImplementation$();
      id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      keys = $.index(x, 2);
    case 1:
      state0 = 0;
      values = $.index(x, 3);
    case 2:
      var result, id, keys, x, values, len, i;
      state0 = 0;
      len = $.get$length(keys);
      for (i = 0; $.ltB(i, len); ++i)
        result.operator$indexSet$2(this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"": ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  this._handle = $._window().setInterval$2(new $.anon12(this, callback), milliSeconds);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon11(callback, this), milliSeconds);
}
};

$$._Random = {"": [],
 "super": "Object",
 nextInt$1: function(max) {
  if (typeof max !== 'number')
    return this.nextInt$1$bailout(1, max);
  if (max < 0)
    throw $.$$throw($.ArgumentError$('negative max: ' + $.S(max)));
  if (max > 4294967295)
    max = 4294967295;
  return (Math.random() * max) >>> 0;
},
 nextInt$1$bailout: function(state0, max) {
  if ($.ltB(max, 0))
    throw $.$$throw($.ArgumentError$('negative max: ' + $.S(max)));
  if ($.gtB(max, 4294967295))
    max = 4294967295;
  return (Math.random() * max) >>> 0;
},
 nextDouble$0: function() {
  return Math.random();
}
};

$$._JsonParser = {"": ["json", "length?", "position"],
 "super": "Object",
 parseToplevel$0: function() {
  var result = this.parseValue$0();
  if (!(this.token$0() == null))
    this.error$1('Junk at the end of JSON input');
  return result;
},
 parseValue$0: function() {
  var token = this.token$0();
  if (token == null)
    this.error$1('Nothing to parse');
  switch (token) {
    case 34:
      return this.parseString$0();
    case 45:
      return this.parseNumber$0();
    case 110:
      return this.expectKeyword$2('null', null);
    case 102:
      return this.expectKeyword$2('false', false);
    case 116:
      return this.expectKeyword$2('true', true);
    case 123:
      return this.parseObject$0();
    case 91:
      return this.parseList$0();
    default:
      this.error$1('Unexpected token');
  }
},
 expectKeyword$2: function(word, value) {
  var i;
  for (i = 0; i < word.length; ++i) {
    if (!$.eqB(this.char$0(), $.charCodeAt(word, i)))
      this.error$1('Expected keyword \'' + word + '\'');
    this.position = $.add(this.position, 1);
  }
  return value;
},
 parseObject$0: function() {
  var object, tokenKind, key, t1;
  object = $.makeLiteralMap([]);
  if (typeof object !== 'object' || object === null || (object.constructor !== Array || !!object.immutable$list) && !object.is$JavaScriptIndexingBehavior())
    return this.parseObject$0$bailout(1, object);
  this.position = $.add(this.position, 1);
  if (!$.eqB(this.token$0(), 125)) {
    for (tokenKind = 125; true;) {
      key = this.parseString$0();
      if (!$.eqB(this.token$0(), 58))
        this.error$1('Expected \':\' when parsing object');
      this.position = $.add(this.position, 1);
      t1 = this.parseValue$0();
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= object.length)
        throw $.ioore(key);
      object[key] = t1;
      if (!$.eqB(this.token$0(), 44))
        break;
      this.position = $.add(this.position, 1);
      tokenKind = 44;
    }
    if (!$.eqB(this.token$0(), 125))
      this.error$1('Expected \'}\' at end of object');
  }
  this.position = $.add(this.position, 1);
  return object;
},
 parseObject$0$bailout: function(state0, object) {
  var tokenKind, key;
  this.position = $.add(this.position, 1);
  if (!$.eqB(this.token$0(), 125)) {
    for (tokenKind = 125; true;) {
      key = this.parseString$0();
      if (!$.eqB(this.token$0(), 58))
        this.error$1('Expected \':\' when parsing object');
      this.position = $.add(this.position, 1);
      $.indexSet(object, key, this.parseValue$0());
      if (!$.eqB(this.token$0(), 44))
        break;
      this.position = $.add(this.position, 1);
      tokenKind = 44;
    }
    if (!$.eqB(this.token$0(), 125))
      this.error$1('Expected \'}\' at end of object');
  }
  this.position = $.add(this.position, 1);
  return object;
},
 parseList$0: function() {
  var list, tokenKind;
  list = [];
  this.position = $.add(this.position, 1);
  if (!$.eqB(this.token$0(), 93)) {
    for (tokenKind = 93; true;) {
      list.push(this.parseValue$0());
      if (!$.eqB(this.token$0(), 44))
        break;
      this.position = $.add(this.position, 1);
      tokenKind = 44;
    }
    if (!$.eqB(this.token$0(), 93))
      this.error$1('Expected \']\' at end of list');
  }
  this.position = $.add(this.position, 1);
  return list;
},
 parseString$0: function() {
  var charCodes, t1, c, codeString;
  if (!$.eqB(this.token$0(), 34))
    this.error$1('Expected string literal');
  this.position = $.add(this.position, 1);
  charCodes = $._ListImpl_List(null);
  for (t1 = this.json; true;) {
    c = this.char$0();
    if ($.eqB(c, 34)) {
      this.position = $.add(this.position, 1);
      break;
    }
    if ($.eqB(c, 92)) {
      this.position = $.add(this.position, 1);
      if ($.eqB(this.position, $.get$length(this)))
        this.error$1('\\ at the end of input');
      switch (this.char$0()) {
        case 34:
          c = 34;
          break;
        case 92:
          c = 92;
          break;
        case 47:
          c = 47;
          break;
        case 98:
          c = 8;
          break;
        case 110:
          c = 10;
          break;
        case 114:
          c = 13;
          break;
        case 102:
          c = 12;
          break;
        case 116:
          c = 9;
          break;
        case 117:
          if ($.gtB($.add(this.position, 5), $.get$length(this)))
            this.error$1('Invalid unicode esacape sequence');
          codeString = $.substring$2(t1, $.add(this.position, 1), $.add(this.position, 5));
          try {
            c = $.int_parse('0x' + $.S(codeString));
          } catch (exception) {
            $.unwrapException(exception);
            this.error$1('Invalid unicode esacape sequence');
          }

          this.position = $.add(this.position, 4);
          break;
        default:
          this.error$1('Invalid esacape sequence in string literal');
      }
    }
    charCodes.push(c);
    this.position = $.add(this.position, 1);
  }
  return $._StringImpl_String$fromCharCodes(charCodes);
},
 parseNumber$0: function() {
  var startPos, char$, isInt, number;
  if (!$.eqB(this.token$0(), 45))
    this.error$1('Expected number literal');
  startPos = this.position;
  char$ = this.char$0();
  if (char$ === 45)
    char$ = this.nextChar$0();
  if (char$ === 48)
    char$ = this.nextChar$0();
  else if ($.geB(char$, 48) && $.leB(char$, 57)) {
    char$ = this.nextChar$0();
    if (typeof char$ !== 'number')
      return this.parseNumber$0$bailout(1, char$, startPos);
    while (true) {
      if (!($.geB(char$, 48) && $.leB(char$, 57)))
        break;
      char$ = this.nextChar$0();
    }
  } else
    this.error$1('Expected digit when parsing number');
  if (char$ === 46) {
    char$ = this.nextChar$0();
    if ($.geB(char$, 48) && $.leB(char$, 57)) {
      char$ = this.nextChar$0();
      if (typeof char$ !== 'number')
        return this.parseNumber$0$bailout(2, char$, startPos);
      while (true) {
        if (!($.geB(char$, 48) && $.leB(char$, 57)))
          break;
        char$ = this.nextChar$0();
      }
      isInt = false;
    } else {
      this.error$1('Expected digit following comma');
      isInt = true;
    }
  } else
    isInt = true;
  if (char$ === 101 || char$ === 69) {
    char$ = this.nextChar$0();
    if (char$ === 45 || char$ === 43)
      char$ = this.nextChar$0();
    if ($.geB(char$, 48) && $.leB(char$, 57)) {
      char$ = this.nextChar$0();
      if (typeof char$ !== 'number')
        return this.parseNumber$0$bailout(3, char$, startPos);
      while (true) {
        if (!($.geB(char$, 48) && $.leB(char$, 57)))
          break;
        char$ = this.nextChar$0();
      }
      isInt = false;
    } else
      this.error$1('Expected digit following \'e\' or \'E\'');
  }
  number = $.substring$2(this.json, startPos, this.position);
  if (isInt)
    return $.int_parse(number);
  else
    return $.double_parse(number);
},
 parseNumber$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      char$ = env0;
      startPos = env1;
      break;
    case 2:
      char$ = env0;
      startPos = env1;
      break;
    case 3:
      char$ = env0;
      startPos = env1;
      break;
  }
  switch (state0) {
    case 0:
      if (!$.eqB(this.token$0(), 45))
        this.error$1('Expected number literal');
      startPos = this.position;
      char$ = this.char$0();
      if (char$ === 45)
        char$ = this.nextChar$0();
    case 1:
      if (state0 === 0 && char$ === 48)
        char$ = this.nextChar$0();
      else
        switch (state0) {
          case 0:
          case 1:
            if (state0 === 1 || state0 === 0 && $.geB(char$, 48) && $.leB(char$, 57))
              switch (state0) {
                case 0:
                  char$ = this.nextChar$0();
                case 1:
                  state0 = 0;
                  while (true) {
                    if (!($.geB(char$, 48) && $.leB(char$, 57)))
                      break;
                    char$ = this.nextChar$0();
                  }
              }
            else
              this.error$1('Expected digit when parsing number');
        }
    case 2:
      if (state0 === 2 || state0 === 0 && char$ === 46)
        switch (state0) {
          case 0:
            char$ = this.nextChar$0();
          case 2:
            if (state0 === 2 || state0 === 0 && $.geB(char$, 48) && $.leB(char$, 57))
              switch (state0) {
                case 0:
                  char$ = this.nextChar$0();
                case 2:
                  state0 = 0;
                  while (true) {
                    if (!($.geB(char$, 48) && $.leB(char$, 57)))
                      break;
                    char$ = this.nextChar$0();
                  }
                  isInt = false;
              }
            else {
              this.error$1('Expected digit following comma');
              isInt = true;
            }
        }
      else
        isInt = true;
    case 3:
      var startPos, char$, isInt, number;
      if (state0 === 3 || state0 === 0 && (char$ === 101 || char$ === 69))
        switch (state0) {
          case 0:
            char$ = this.nextChar$0();
            if (char$ === 45 || char$ === 43)
              char$ = this.nextChar$0();
          case 3:
            if (state0 === 3 || state0 === 0 && $.geB(char$, 48) && $.leB(char$, 57))
              switch (state0) {
                case 0:
                  char$ = this.nextChar$0();
                case 3:
                  state0 = 0;
                  while (true) {
                    if (!($.geB(char$, 48) && $.leB(char$, 57)))
                      break;
                    char$ = this.nextChar$0();
                  }
                  isInt = false;
              }
            else
              this.error$1('Expected digit following \'e\' or \'E\'');
        }
      number = $.substring$2(this.json, startPos, this.position);
      if (isInt)
        return $.int_parse(number);
      else
        return $.double_parse(number);
  }
},
 char$0: function() {
  var t1, t3;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.char$0$bailout(1, t1);
  t3 = $.get$length(this);
  if (typeof t3 !== 'number')
    return this.char$0$bailout(2, t1, t3);
  if (t1 >= t3)
    this.error$1('Unexpected end of JSON stream');
  return $.charCodeAt(this.json, this.position);
},
 char$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.position;
    case 1:
      state0 = 0;
      t3 = $.get$length(this);
    case 2:
      var t1, t3;
      state0 = 0;
      if ($.geB(t1, t3))
        this.error$1('Unexpected end of JSON stream');
      return $.charCodeAt(this.json, this.position);
  }
},
 nextChar$0: function() {
  var t1, t3;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.nextChar$0$bailout(1, t1);
  this.position = t1 + 1;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.nextChar$0$bailout(2, t1);
  t3 = $.get$length(this);
  if (typeof t3 !== 'number')
    return this.nextChar$0$bailout(3, t1, t3);
  if (t1 >= t3)
    return 0;
  return $.charCodeAt(this.json, this.position);
},
 nextChar$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
    case 3:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.position;
    case 1:
      state0 = 0;
      this.position = $.add(t1, 1);
      t1 = this.position;
    case 2:
      state0 = 0;
      t3 = $.get$length(this);
    case 3:
      var t1, t3;
      state0 = 0;
      if ($.geB(t1, t3))
        return 0;
      return $.charCodeAt(this.json, this.position);
  }
},
 token$0: function() {
  var t1, t2, t4, char$, token;
  for (t1 = this.json; true;) {
    t2 = this.position;
    if (typeof t2 !== 'number')
      return this.token$0$bailout(1, t1, t2);
    t4 = $.get$length(this);
    if (typeof t4 !== 'number')
      return this.token$0$bailout(2, t1, t4, t2);
    if (t2 >= t4)
      return;
    char$ = $.charCodeAt(t1, this.position);
    t2 = $._JsonParser_tokens;
    if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.token$0$bailout(3, char$, t1, t2);
    if (char$ !== (char$ | 0))
      throw $.iae(char$);
    if (char$ < 0 || char$ >= t2.length)
      throw $.ioore(char$);
    token = t2[char$];
    if (token === 32) {
      t2 = this.position;
      if (typeof t2 !== 'number')
        return this.token$0$bailout(4, t1, t2);
      this.position = t2 + 1;
      continue;
    }
    if (token == null)
      return 0;
    return token;
  }
},
 token$0$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env0;
      t2 = env1;
      break;
    case 2:
      t1 = env0;
      t4 = env1;
      t2 = env2;
      break;
    case 3:
      char$ = env0;
      t1 = env1;
      t2 = env2;
      break;
    case 4:
      t1 = env0;
      t2 = env1;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.json;
    default:
      var t1, t2, t4, char$, token;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
            default:
              c$0: {
                switch (state0) {
                  case 0:
                    t2 = this.position;
                  case 1:
                    state0 = 0;
                    t4 = $.get$length(this);
                  case 2:
                    state0 = 0;
                    if ($.geB(t2, t4))
                      return;
                    char$ = $.charCodeAt(t1, this.position);
                    t2 = $._JsonParser_tokens;
                  case 3:
                    state0 = 0;
                    token = $.index(t2, char$);
                  case 4:
                    if (state0 === 4 || state0 === 0 && token === 32)
                      switch (state0) {
                        case 0:
                          t2 = this.position;
                        case 4:
                          state0 = 0;
                          this.position = $.add(t2, 1);
                          break c$0;
                      }
                    if (token == null)
                      return 0;
                    return token;
                }
              }
          }
  }
},
 error$1: function(message) {
  throw $.$$throw(message);
},
 get$error: function() { return new $.BoundClosure(this, 'error$1'); },
 _JsonParser$1: function(json) {
  if (!($._JsonParser_tokens == null))
    return;
  $._JsonParser_tokens = $._ListImpl_List(126);
  $.indexSet($._JsonParser_tokens, 9, 32);
  $.indexSet($._JsonParser_tokens, 10, 32);
  $.indexSet($._JsonParser_tokens, 13, 32);
  $.indexSet($._JsonParser_tokens, 32, 32);
  $.indexSet($._JsonParser_tokens, 48, 45);
  $.indexSet($._JsonParser_tokens, 49, 45);
  $.indexSet($._JsonParser_tokens, 50, 45);
  $.indexSet($._JsonParser_tokens, 51, 45);
  $.indexSet($._JsonParser_tokens, 52, 45);
  $.indexSet($._JsonParser_tokens, 53, 45);
  $.indexSet($._JsonParser_tokens, 54, 45);
  $.indexSet($._JsonParser_tokens, 55, 45);
  $.indexSet($._JsonParser_tokens, 56, 45);
  $.indexSet($._JsonParser_tokens, 57, 45);
  $.indexSet($._JsonParser_tokens, 45, 45);
  $.indexSet($._JsonParser_tokens, 123, 123);
  $.indexSet($._JsonParser_tokens, 125, 125);
  $.indexSet($._JsonParser_tokens, 91, 91);
  $.indexSet($._JsonParser_tokens, 93, 93);
  $.indexSet($._JsonParser_tokens, 34, 34);
  $.indexSet($._JsonParser_tokens, 58, 58);
  $.indexSet($._JsonParser_tokens, 44, 44);
  $.indexSet($._JsonParser_tokens, 110, 110);
  $.indexSet($._JsonParser_tokens, 116, 116);
  $.indexSet($._JsonParser_tokens, 102, 102);
}
};

$$.DelayedCall = {"": ["_currentTime", "_totalTime", "_repeatCount", "_action"],
 "super": "Object",
 _action$0: function() { return this._action.call$0(); },
 advanceTime$1: function(time) {
  var t1, newTime;
  t1 = this._currentTime;
  if (typeof time !== 'number')
    throw $.iae(time);
  newTime = t1 + time;
  while (true) {
    t1 = this._totalTime;
    if (!(newTime >= t1 && this._repeatCount > 0))
      break;
    this._currentTime = t1;
    this._repeatCount = this._repeatCount - 1;
    this._action$0();
    newTime -= this._totalTime;
  }
  if (this._repeatCount === 0)
    return false;
  this._currentTime = newTime;
  return true;
},
 get$currentTime: function() {
  return this._currentTime;
},
 DelayedCall$2: function(action, delay) {
  this._action = action;
  this._totalTime = $.max(delay, 0.0001);
}
};

$$.Animatable = {"": [],
 "super": "Object"
};

$$.Juggler = {"": ["_animatables", "_animatablesCount", "_elapsedTime"],
 "super": "Object",
 add$1: function(animatable) {
  var t1, t2, t3;
  if (animatable == null)
    return;
  t1 = this._animatablesCount;
  t2 = this._animatables;
  t3 = t2.length;
  if (t1 >= t3)
    t2.push(animatable);
  else {
    if (t1 < 0)
      throw $.ioore(t1);
    t2[t1] = animatable;
  }
  this._animatablesCount = this._animatablesCount + 1;
},
 remove$1: function(animatable) {
  var i, t1;
  if (animatable == null)
    return;
  for (i = 0; i < this._animatablesCount; ++i) {
    t1 = this._animatables;
    if (i >= t1.length)
      throw $.ioore(i);
    if ($.eqB(t1[i], animatable)) {
      t1 = this._animatables;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = null;
    }
  }
},
 delayCall$2: function(action, delay) {
  var delayedCall = $.DelayedCall$(action, delay);
  this.add$1(delayedCall);
  return delayedCall;
},
 advanceTime$1: function(time) {
  var t1, animatablesCount, c, i, animatable, t2, t3, c0;
  if (typeof time !== 'number')
    return this.advanceTime$1$bailout(1, time);
  t1 = this._elapsedTime;
  if (typeof t1 !== 'number')
    return this.advanceTime$1$bailout(2, time, t1);
  this._elapsedTime = t1 + time;
  animatablesCount = this._animatablesCount;
  for (c = 0, i = 0; i < animatablesCount; ++i) {
    t1 = this._animatables;
    if (i >= t1.length)
      throw $.ioore(i);
    animatable = t1[i];
    if (!(animatable == null) && animatable.advanceTime$1(time) === true) {
      if (c !== i) {
        t1 = this._animatables;
        if (c >= t1.length)
          throw $.ioore(c);
        t1[c] = animatable;
      }
      ++c;
    }
  }
  for (t1 = this._animatables, t2 = t1.length, i = animatablesCount; t3 = this._animatablesCount, i < t3; ++i) {
    c0 = c + 1;
    if (i < 0 || i >= t2)
      throw $.ioore(i);
    t3 = t1[i];
    if (c >= t2)
      throw $.ioore(c);
    t1[c] = t3;
    c = c0;
  }
  for (i = c; i < t3; ++i) {
    if (i >= t2)
      throw $.ioore(i);
    t1[i] = null;
  }
  this._animatablesCount = c;
  return true;
},
 advanceTime$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      time = env0;
      break;
    case 2:
      time = env0;
      t1 = env1;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = this._elapsedTime;
    case 2:
      var time, t1, animatablesCount, c, i, animatable, t2, t3, c0;
      state0 = 0;
      this._elapsedTime = $.add(t1, time);
      animatablesCount = this._animatablesCount;
      for (c = 0, i = 0; i < animatablesCount; ++i) {
        t1 = this._animatables;
        if (i >= t1.length)
          throw $.ioore(i);
        animatable = t1[i];
        if (!(animatable == null) && animatable.advanceTime$1(time) === true) {
          if (c !== i) {
            t1 = this._animatables;
            if (c >= t1.length)
              throw $.ioore(c);
            t1[c] = animatable;
          }
          ++c;
        }
      }
      for (t1 = this._animatables, t2 = t1.length, i = animatablesCount; t3 = this._animatablesCount, i < t3; ++i) {
        c0 = c + 1;
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t3 = t1[i];
        if (c >= t2)
          throw $.ioore(c);
        t1[c] = t3;
        c = c0;
      }
      for (i = c; i < t3; ++i) {
        if (i >= t2)
          throw $.ioore(i);
        t1[i] = null;
      }
      this._animatablesCount = c;
      return true;
  }
},
 Juggler$0: function() {
  this._elapsedTime = 0;
  this._animatables = $._ListImpl_List(null);
  this._animatablesCount = 0;
}
};

$$._TweenProperty = {"": ["name?", "startValue=", "targetValue?"],
 "super": "Object"
};

$$.Tween = {"": ["_displayObject", "_transitionFunction", "_tweenProperties", "_onStart", "_onUpdate", "_onComplete", "_totalTime", "_currentTime", "_delay", "_roundToInt", "_started"],
 "super": "Object",
 _transitionFunction$1: function(arg0) { return this._transitionFunction.call$1(arg0); },
 _onStart$0: function() { return this._onStart.call$0(); },
 _onUpdate$0: function() { return this._onUpdate.call$0(); },
 _onUpdate$1: function(arg0) { return this._onUpdate.call$1(arg0); },
 _onComplete$0: function() { return this._onComplete.call$0(); },
 animate$2: function(property, targetValue) {
  var t1 = $.indexOf$1(['x', 'y', 'pivotX', 'pivotY', 'scaleX', 'scaleY', 'rotation', 'alpha'], property);
  if (typeof t1 !== 'number')
    return this.animate$2$bailout(1, property, targetValue, t1);
  if (t1 === -1)
    throw $.$$throw($.ArgumentError$('Error #9003: The supplied property (\'' + property + '\') is not supported at this time.'));
  if (!(this._displayObject == null) && !this._started)
    this._tweenProperties.push($._TweenProperty$(property, 0, targetValue));
},
 animate$2$bailout: function(state0, property, targetValue, t1) {
  if ($.eqB(t1, -1))
    throw $.$$throw($.ArgumentError$('Error #9003: The supplied property (\'' + property + '\') is not supported at this time.'));
  if (!(this._displayObject == null) && !this._started)
    this._tweenProperties.push($._TweenProperty$(property, 0, targetValue));
},
 moveTo$2: function(x, y) {
  this.animate$2('x', x);
  this.animate$2('y', y);
},
 advanceTime$1: function(time) {
  var i, t1, tp, transition, value;
  if ($.ltB(this._currentTime, this._totalTime) || !this._started) {
    this._currentTime = $.add(this._currentTime, time);
    if ($.gtB(this._currentTime, this._totalTime))
      this._currentTime = this._totalTime;
    if ($.geB(this._currentTime, 0)) {
      if (!this._started) {
        this._started = true;
        for (i = 0; t1 = this._tweenProperties, i < t1.length; ++i) {
          tp = t1[i];
          switch (tp.get$name()) {
            case 'x':
              tp.set$startValue(this._displayObject.get$x());
              break;
            case 'y':
              tp.set$startValue(this._displayObject.get$y());
              break;
            case 'pivotX':
              tp.set$startValue(this._displayObject.get$pivotX());
              break;
            case 'pivotY':
              tp.set$startValue(this._displayObject.get$pivotY());
              break;
            case 'scaleX':
              tp.set$startValue(this._displayObject.get$scaleX());
              break;
            case 'scaleY':
              tp.set$startValue(this._displayObject.get$scaleY());
              break;
            case 'rotation':
              tp.set$startValue(this._displayObject.get$rotation());
              break;
            case 'alpha':
              tp.set$startValue(this._displayObject.get$alpha());
              break;
          }
        }
        if (!(this._onStart == null))
          this._onStart$0();
      }
      transition = this._transitionFunction$1($.div(this._currentTime, this._totalTime));
      for (i = 0; t1 = this._tweenProperties, i < t1.length; ++i) {
        tp = t1[i];
        value = $.add(tp.get$startValue(), $.mul(transition, $.sub(tp.get$targetValue(), tp.get$startValue())));
        if (this._roundToInt)
          value = $.round(value);
        switch (tp.get$name()) {
          case 'x':
            this._displayObject.set$x(value);
            break;
          case 'y':
            this._displayObject.set$y(value);
            break;
          case 'pivotX':
            this._displayObject.set$pivotX(value);
            break;
          case 'pivotY':
            this._displayObject.set$pivotY(value);
            break;
          case 'scaleX':
            this._displayObject.set$scaleX(value);
            break;
          case 'scaleY':
            this._displayObject.set$scaleY(value);
            break;
          case 'rotation':
            this._displayObject.set$rotation(value);
            break;
          case 'alpha':
            this._displayObject.set$alpha(value);
            break;
        }
      }
      if (!(this._onUpdate == null))
        this._onUpdate$0();
      if (!(this._onComplete == null) && $.eqB(this._currentTime, this._totalTime))
        this._onComplete$0();
    }
  }
  return $.lt(this._currentTime, this._totalTime);
},
 get$currentTime: function() {
  return this._currentTime;
},
 get$isComplete: function() {
  return $.ge(this._currentTime, this._totalTime);
},
 set$delay: function(value) {
  if (!this._started)
    this._currentTime = $.sub($.add(this._currentTime, this._delay), value);
  this._delay = value;
},
 set$onUpdate: function(value) {
  this._onUpdate = value;
},
 set$onComplete: function(value) {
  this._onComplete = value;
},
 Tween$3: function(displayObject, time, transitionFunction) {
  this._displayObject = displayObject;
  this._transitionFunction = !(transitionFunction == null) ? transitionFunction : $.Transitions_linear;
  this._currentTime = 0;
  this._totalTime = $.max(0.0001, time);
  this._delay = 0;
  this._roundToInt = false;
  this._started = false;
  this._tweenProperties = $._ListImpl_List(null);
}
};

$$.Transition = {"": ["_startValue", "_targetValue", "_currentValue", "_transitionFunction", "_onStart", "_onUpdate", "_onComplete", "_totalTime", "_currentTime", "_delay", "_roundToInt", "_started"],
 "super": "Animatable",
 _transitionFunction$1: function(arg0) { return this._transitionFunction.call$1(arg0); },
 _onStart$0: function() { return this._onStart.call$0(); },
 _onUpdate$0: function() { return this._onUpdate.call$0(); },
 _onUpdate$1: function(arg0) { return this._onUpdate.call$1(arg0); },
 _onComplete$0: function() { return this._onComplete.call$0(); },
 advanceTime$1: function(time) {
  var t1, t2, transition, t4;
  t1 = this._currentTime;
  if (t1 < this._totalTime || !this._started) {
    if (typeof time !== 'number')
      throw $.iae(time);
    this._currentTime = t1 + time;
    t1 = this._currentTime;
    t2 = this._totalTime;
    if (t1 > t2)
      this._currentTime = t2;
    if (this._currentTime >= 0) {
      if (!this._started) {
        this._started = true;
        if (!(this._onStart == null))
          this._onStart$0();
      }
      transition = this._transitionFunction$1(this._currentTime / this._totalTime);
      if (typeof transition !== 'number')
        return this.advanceTime$1$bailout(1, transition);
      t2 = this._startValue;
      if (typeof t2 !== 'number')
        return this.advanceTime$1$bailout(2, transition, t2);
      t4 = this._targetValue;
      if (typeof t4 !== 'number')
        return this.advanceTime$1$bailout(3, t4, transition, t2);
      this._currentValue = t2 + transition * (t4 - t2);
      if (!(this._onUpdate == null)) {
        t1 = this._roundToInt;
        t2 = this._currentValue;
        this._onUpdate$1(t1 ? $.round(t2) : t2);
      }
      if (!(this._onComplete == null) && this._currentTime === this._totalTime)
        this._onComplete$0();
    }
  }
  return this._currentTime < this._totalTime;
},
 advanceTime$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      transition = env0;
      break;
    case 2:
      transition = env0;
      t2 = env1;
      break;
    case 3:
      t4 = env0;
      transition = env1;
      t2 = env2;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._currentTime;
    default:
      var t1, t2, transition, t4;
      if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && (t1 < this._totalTime || !this._started))
        switch (state0) {
          case 0:
            if (typeof time !== 'number')
              throw $.iae(time);
            this._currentTime = t1 + time;
            t1 = this._currentTime;
            t2 = this._totalTime;
            if (t1 > t2)
              this._currentTime = t2;
          default:
            if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && this._currentTime >= 0)
              switch (state0) {
                case 0:
                  if (!this._started) {
                    this._started = true;
                    if (!(this._onStart == null))
                      this._onStart$0();
                  }
                  transition = this._transitionFunction$1(this._currentTime / this._totalTime);
                case 1:
                  state0 = 0;
                  t2 = this._startValue;
                case 2:
                  state0 = 0;
                  t4 = this._targetValue;
                case 3:
                  state0 = 0;
                  this._currentValue = $.add(t2, $.mul(transition, $.sub(t4, t2)));
                  if (!(this._onUpdate == null)) {
                    t1 = this._roundToInt;
                    t2 = this._currentValue;
                    this._onUpdate$1(t1 ? $.round(t2) : t2);
                  }
                  if (!(this._onComplete == null) && this._currentTime === this._totalTime)
                    this._onComplete$0();
              }
        }
      return this._currentTime < this._totalTime;
  }
},
 get$startValue: function() {
  return this._startValue;
},
 get$targetValue: function() {
  return this._targetValue;
},
 get$currentTime: function() {
  return this._currentTime;
},
 get$isComplete: function() {
  return this._currentTime >= this._totalTime;
},
 set$delay: function(value) {
  var t1, t2;
  if (!this._started) {
    t1 = this._currentTime;
    t2 = this._delay;
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    t2 = t1 + t2;
    if (typeof value !== 'number')
      throw $.iae(value);
    this._currentTime = t2 - value;
  }
  this._delay = value;
},
 set$onStart: function(value) {
  this._onStart = value;
},
 set$onUpdate: function(value) {
  this._onUpdate = value;
},
 set$onComplete: function(value) {
  this._onComplete = value;
},
 Transition$4: function(startValue, targetValue, time, transitionFunction) {
  this._startValue = startValue;
  this._targetValue = targetValue;
  this._currentValue = startValue;
  this._transitionFunction = !(transitionFunction == null) ? transitionFunction : $.Transitions_linear;
  this._currentTime = 0;
  this._totalTime = $.max(0.0001, time);
  this._delay = 0;
  this._roundToInt = false;
  this._started = false;
}
};

$$.Point = {"": ["x=", "y="],
 "super": "Object",
 get$length: function() {
  var t1, t2;
  t1 = this.x;
  t1 = $.mul(t1, t1);
  t2 = this.y;
  return $.sqrt($.add(t1, $.mul(t2, t2)));
},
 add$1: function(p) {
  return $.Point$($.add(this.x, p.get$x()), $.add(this.y, p.get$y()));
}
};

$$.Rectangle = {"": ["x=", "y=", "width=", "height="],
 "super": "Object",
 get$left: function() {
  return this.x;
},
 get$top: function() {
  return this.y;
},
 get$right: function() {
  return $.add(this.x, this.width);
},
 get$bottom: function() {
  return $.add(this.y, this.height);
},
 get$size: function() {
  return $.Point$(this.width, this.height);
},
 set$bottom: function(value) {
  this.height = $.sub(value, this.y);
},
 set$left: function(value) {
  this.x = value;
},
 set$right: function(value) {
  this.width = $.sub(value, this.x);
},
 set$top: function(value) {
  this.y = value;
},
 contains$2: function(px, py) {
  return $.leB(this.x, px) && $.leB(this.y, py) && $.geB(this.get$right(), px) && $.geB(this.get$bottom(), py);
},
 get$isEmpty: function() {
  return $.eqB(this.width, 0) && $.eqB(this.height, 0);
}
};

$$.Matrix = {"": ["_a", "_b", "_c", "_d", "_tx", "_ty", "_det"],
 "super": "Object",
 get$a: function() {
  return this._a;
},
 get$b: function() {
  return this._b;
},
 get$c: function() {
  return this._c;
},
 get$d: function() {
  return this._d;
},
 get$tx: function() {
  return this._tx;
},
 get$ty: function() {
  return this._ty;
},
 get$det: function() {
  return this._det;
},
 transformPoint$1: function(p) {
  return $.Point$($.add($.add($.mul(p.x, this._a), $.mul(p.y, this._c)), this._tx), $.add($.add($.mul(p.x, this._b), $.mul(p.y, this._d)), this._ty));
},
 concat$1: function(matrix) {
  var a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2;
  a1 = this._a;
  if (typeof a1 !== 'number')
    return this.concat$1$bailout(1, matrix, a1);
  b1 = this._b;
  if (typeof b1 !== 'number')
    return this.concat$1$bailout(2, matrix, a1, b1);
  c1 = this._c;
  if (typeof c1 !== 'number')
    return this.concat$1$bailout(3, matrix, a1, b1, c1);
  d1 = this._d;
  if (typeof d1 !== 'number')
    return this.concat$1$bailout(4, matrix, a1, b1, c1, d1);
  tx1 = this._tx;
  if (typeof tx1 !== 'number')
    return this.concat$1$bailout(5, matrix, a1, b1, c1, d1, tx1);
  ty1 = this._ty;
  if (typeof ty1 !== 'number')
    return this.concat$1$bailout(6, matrix, a1, b1, c1, d1, tx1, ty1);
  det1 = this._det;
  if (typeof det1 !== 'number')
    return this.concat$1$bailout(7, matrix, a1, b1, c1, d1, tx1, ty1, det1);
  a2 = matrix.get$a();
  if (typeof a2 !== 'number')
    return this.concat$1$bailout(8, matrix, a1, b1, c1, d1, tx1, ty1, a2, det1);
  b2 = matrix.get$b();
  if (typeof b2 !== 'number')
    return this.concat$1$bailout(9, matrix, a1, b1, c1, d1, tx1, ty1, a2, det1, b2);
  c2 = matrix.get$c();
  if (typeof c2 !== 'number')
    return this.concat$1$bailout(10, matrix, a1, b1, c1, d1, tx1, ty1, a2, det1, b2, c2);
  d2 = matrix.get$d();
  if (typeof d2 !== 'number')
    return this.concat$1$bailout(11, matrix, a1, b1, c1, d1, tx1, ty1, a2, det1, b2, c2, d2);
  tx2 = matrix.get$tx();
  if (typeof tx2 !== 'number')
    return this.concat$1$bailout(12, matrix, a1, b1, c1, d1, tx1, ty1, a2, det1, b2, c2, d2, tx2);
  ty2 = matrix.get$ty();
  if (typeof ty2 !== 'number')
    return this.concat$1$bailout(13, matrix, a1, b1, c1, d1, tx1, ty1, a2, det1, b2, c2, d2, ty2, tx2);
  det2 = matrix.get$det();
  if (typeof det2 !== 'number')
    return this.concat$1$bailout(14, a1, b1, c1, d1, tx1, ty1, a2, det1, b2, c2, d2, ty2, det2, tx2);
  this._a = a1 * a2 + b1 * c2;
  this._b = a1 * b2 + b1 * d2;
  this._c = c1 * a2 + d1 * c2;
  this._d = c1 * b2 + d1 * d2;
  this._tx = tx1 * a2 + ty1 * c2 + tx2;
  this._ty = tx1 * b2 + ty1 * d2 + ty2;
  this._det = det1 * det2;
},
 concat$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13) {
  switch (state0) {
    case 1:
      matrix = env0;
      a1 = env1;
      break;
    case 2:
      matrix = env0;
      a1 = env1;
      b1 = env2;
      break;
    case 3:
      matrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      break;
    case 4:
      matrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      break;
    case 5:
      matrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      break;
    case 6:
      matrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      break;
    case 7:
      matrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      det1 = env7;
      break;
    case 8:
      matrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      a2 = env7;
      det1 = env8;
      break;
    case 9:
      matrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      a2 = env7;
      det1 = env8;
      b2 = env9;
      break;
    case 10:
      matrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      a2 = env7;
      det1 = env8;
      b2 = env9;
      c2 = env10;
      break;
    case 11:
      matrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      a2 = env7;
      det1 = env8;
      b2 = env9;
      c2 = env10;
      d2 = env11;
      break;
    case 12:
      matrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      a2 = env7;
      det1 = env8;
      b2 = env9;
      c2 = env10;
      d2 = env11;
      tx2 = env12;
      break;
    case 13:
      matrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      a2 = env7;
      det1 = env8;
      b2 = env9;
      c2 = env10;
      d2 = env11;
      ty2 = env12;
      tx2 = env13;
      break;
    case 14:
      a1 = env0;
      b1 = env1;
      c1 = env2;
      d1 = env3;
      tx1 = env4;
      ty1 = env5;
      a2 = env6;
      det1 = env7;
      b2 = env8;
      c2 = env9;
      d2 = env10;
      ty2 = env11;
      det2 = env12;
      tx2 = env13;
      break;
  }
  switch (state0) {
    case 0:
      a1 = this._a;
    case 1:
      state0 = 0;
      b1 = this._b;
    case 2:
      state0 = 0;
      c1 = this._c;
    case 3:
      state0 = 0;
      d1 = this._d;
    case 4:
      state0 = 0;
      tx1 = this._tx;
    case 5:
      state0 = 0;
      ty1 = this._ty;
    case 6:
      state0 = 0;
      det1 = this._det;
    case 7:
      state0 = 0;
      a2 = matrix.get$a();
    case 8:
      state0 = 0;
      b2 = matrix.get$b();
    case 9:
      state0 = 0;
      c2 = matrix.get$c();
    case 10:
      state0 = 0;
      d2 = matrix.get$d();
    case 11:
      state0 = 0;
      tx2 = matrix.get$tx();
    case 12:
      state0 = 0;
      ty2 = matrix.get$ty();
    case 13:
      state0 = 0;
      det2 = matrix.get$det();
    case 14:
      var a1, matrix, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2;
      state0 = 0;
      this._a = $.add($.mul(a1, a2), $.mul(b1, c2));
      this._b = $.add($.mul(a1, b2), $.mul(b1, d2));
      this._c = $.add($.mul(c1, a2), $.mul(d1, c2));
      this._d = $.add($.mul(c1, b2), $.mul(d1, d2));
      this._tx = $.add($.add($.mul(tx1, a2), $.mul(ty1, c2)), tx2);
      this._ty = $.add($.add($.mul(tx1, b2), $.mul(ty1, d2)), ty2);
      this._det = $.mul(det1, det2);
  }
},
 identity$0: function() {
  this._a = 1;
  this._b = 0;
  this._c = 0;
  this._d = 1;
  this._tx = 0;
  this._ty = 0;
  this._det = 1;
},
 invert$0: function() {
  var a, b, c, d, tx, ty, det;
  a = this._a;
  b = this._b;
  c = this._c;
  d = this._d;
  tx = this._tx;
  ty = this._ty;
  det = this._det;
  this._a = $.div(d, det);
  this._b = $.neg($.div(b, det));
  this._c = $.neg($.div(c, det));
  this._d = $.div(a, det);
  this._tx = $.neg($.add($.mul(this._a, tx), $.mul(this._c, ty)));
  this._ty = $.neg($.add($.mul(this._b, tx), $.mul(this._d, ty)));
  if (typeof det !== 'number')
    throw $.iae(det);
  this._det = 1 / det;
},
 setTo$6: function(a, b, c, d, tx, ty) {
  this._a = a;
  this._b = b;
  this._c = c;
  this._d = d;
  this._tx = tx;
  this._ty = ty;
  this._det = $.sub($.mul(a, d), $.mul(b, c));
},
 copyFromAndConcat$2: function(copyMatrix, concatMatrix) {
  var a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2;
  a1 = copyMatrix.get$a();
  if (typeof a1 !== 'number')
    return this.copyFromAndConcat$2$bailout(1, copyMatrix, concatMatrix, a1);
  b1 = copyMatrix.get$b();
  if (typeof b1 !== 'number')
    return this.copyFromAndConcat$2$bailout(2, copyMatrix, concatMatrix, a1, b1);
  c1 = copyMatrix.get$c();
  if (typeof c1 !== 'number')
    return this.copyFromAndConcat$2$bailout(3, copyMatrix, concatMatrix, a1, b1, c1);
  d1 = copyMatrix.get$d();
  if (typeof d1 !== 'number')
    return this.copyFromAndConcat$2$bailout(4, copyMatrix, concatMatrix, a1, b1, c1, d1);
  tx1 = copyMatrix.get$tx();
  if (typeof tx1 !== 'number')
    return this.copyFromAndConcat$2$bailout(5, copyMatrix, concatMatrix, a1, b1, c1, d1, tx1);
  ty1 = copyMatrix.get$ty();
  if (typeof ty1 !== 'number')
    return this.copyFromAndConcat$2$bailout(6, copyMatrix, concatMatrix, a1, b1, c1, d1, tx1, ty1);
  det1 = copyMatrix.get$det();
  if (typeof det1 !== 'number')
    return this.copyFromAndConcat$2$bailout(7, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1);
  a2 = concatMatrix.get$a();
  if (typeof a2 !== 'number')
    return this.copyFromAndConcat$2$bailout(8, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2);
  b2 = concatMatrix.get$b();
  if (typeof b2 !== 'number')
    return this.copyFromAndConcat$2$bailout(9, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2);
  c2 = concatMatrix.get$c();
  if (typeof c2 !== 'number')
    return this.copyFromAndConcat$2$bailout(10, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2);
  d2 = concatMatrix.get$d();
  if (typeof d2 !== 'number')
    return this.copyFromAndConcat$2$bailout(11, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2);
  tx2 = concatMatrix.get$tx();
  if (typeof tx2 !== 'number')
    return this.copyFromAndConcat$2$bailout(12, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2);
  ty2 = concatMatrix.get$ty();
  if (typeof ty2 !== 'number')
    return this.copyFromAndConcat$2$bailout(13, concatMatrix, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2);
  det2 = concatMatrix.get$det();
  if (typeof det2 !== 'number')
    return this.copyFromAndConcat$2$bailout(14, a1, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2);
  this._a = a1 * a2 + b1 * c2;
  this._b = a1 * b2 + b1 * d2;
  this._c = c1 * a2 + d1 * c2;
  this._d = c1 * b2 + d1 * d2;
  this._tx = tx1 * a2 + ty1 * c2 + tx2;
  this._ty = tx1 * b2 + ty1 * d2 + ty2;
  this._det = det1 * det2;
},
 copyFromAndConcat$2$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13) {
  switch (state0) {
    case 1:
      copyMatrix = env0;
      concatMatrix = env1;
      a1 = env2;
      break;
    case 2:
      copyMatrix = env0;
      concatMatrix = env1;
      a1 = env2;
      b1 = env3;
      break;
    case 3:
      copyMatrix = env0;
      concatMatrix = env1;
      a1 = env2;
      b1 = env3;
      c1 = env4;
      break;
    case 4:
      copyMatrix = env0;
      concatMatrix = env1;
      a1 = env2;
      b1 = env3;
      c1 = env4;
      d1 = env5;
      break;
    case 5:
      copyMatrix = env0;
      concatMatrix = env1;
      a1 = env2;
      b1 = env3;
      c1 = env4;
      d1 = env5;
      tx1 = env6;
      break;
    case 6:
      copyMatrix = env0;
      concatMatrix = env1;
      a1 = env2;
      b1 = env3;
      c1 = env4;
      d1 = env5;
      tx1 = env6;
      ty1 = env7;
      break;
    case 7:
      concatMatrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      det1 = env7;
      break;
    case 8:
      concatMatrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      det1 = env7;
      a2 = env8;
      break;
    case 9:
      concatMatrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      det1 = env7;
      a2 = env8;
      b2 = env9;
      break;
    case 10:
      concatMatrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      det1 = env7;
      a2 = env8;
      b2 = env9;
      c2 = env10;
      break;
    case 11:
      concatMatrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      det1 = env7;
      a2 = env8;
      b2 = env9;
      c2 = env10;
      d2 = env11;
      break;
    case 12:
      concatMatrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      det1 = env7;
      a2 = env8;
      b2 = env9;
      c2 = env10;
      d2 = env11;
      tx2 = env12;
      break;
    case 13:
      concatMatrix = env0;
      a1 = env1;
      b1 = env2;
      c1 = env3;
      d1 = env4;
      tx1 = env5;
      ty1 = env6;
      det1 = env7;
      a2 = env8;
      b2 = env9;
      c2 = env10;
      d2 = env11;
      tx2 = env12;
      ty2 = env13;
      break;
    case 14:
      a1 = env0;
      b1 = env1;
      c1 = env2;
      d1 = env3;
      tx1 = env4;
      ty1 = env5;
      det1 = env6;
      a2 = env7;
      b2 = env8;
      c2 = env9;
      d2 = env10;
      tx2 = env11;
      ty2 = env12;
      det2 = env13;
      break;
  }
  switch (state0) {
    case 0:
      a1 = copyMatrix.get$a();
    case 1:
      state0 = 0;
      b1 = copyMatrix.get$b();
    case 2:
      state0 = 0;
      c1 = copyMatrix.get$c();
    case 3:
      state0 = 0;
      d1 = copyMatrix.get$d();
    case 4:
      state0 = 0;
      tx1 = copyMatrix.get$tx();
    case 5:
      state0 = 0;
      ty1 = copyMatrix.get$ty();
    case 6:
      state0 = 0;
      det1 = copyMatrix.get$det();
    case 7:
      state0 = 0;
      a2 = concatMatrix.get$a();
    case 8:
      state0 = 0;
      b2 = concatMatrix.get$b();
    case 9:
      state0 = 0;
      c2 = concatMatrix.get$c();
    case 10:
      state0 = 0;
      d2 = concatMatrix.get$d();
    case 11:
      state0 = 0;
      tx2 = concatMatrix.get$tx();
    case 12:
      state0 = 0;
      ty2 = concatMatrix.get$ty();
    case 13:
      state0 = 0;
      det2 = concatMatrix.get$det();
    case 14:
      var a1, copyMatrix, concatMatrix, b1, c1, d1, tx1, ty1, det1, a2, b2, c2, d2, tx2, ty2, det2;
      state0 = 0;
      this._a = $.add($.mul(a1, a2), $.mul(b1, c2));
      this._b = $.add($.mul(a1, b2), $.mul(b1, d2));
      this._c = $.add($.mul(c1, a2), $.mul(d1, c2));
      this._d = $.add($.mul(c1, b2), $.mul(d1, d2));
      this._tx = $.add($.add($.mul(tx1, a2), $.mul(ty1, c2)), tx2);
      this._ty = $.add($.add($.mul(tx1, b2), $.mul(ty1, d2)), ty2);
      this._det = $.mul(det1, det2);
  }
}
};

$$.RenderLoop = {"": ["_juggler", "_stages", "_renderTime", "_enterFrameIndex", "_enterFrameEvent"],
 "super": "Object",
 get$juggler: function() {
  return this._juggler;
},
 _onAnimationFrame$1: function(currentTime) {
  var t1, deltaTime, deltaTimeSec, i;
  if (typeof currentTime !== 'number')
    return this._onAnimationFrame$1$bailout(1, currentTime);
  $.window().requestAnimationFrame$1(this.get$_onAnimationFrame());
  if ($.get$isNaN(this._renderTime) === true)
    this._renderTime = currentTime;
  t1 = this._renderTime;
  if (typeof t1 !== 'number')
    return this._onAnimationFrame$1$bailout(2, currentTime, t1);
  if (t1 > currentTime)
    this._renderTime = currentTime;
  t1 = this._renderTime;
  if (typeof t1 !== 'number')
    return this._onAnimationFrame$1$bailout(3, currentTime, t1);
  deltaTime = currentTime - t1;
  deltaTimeSec = deltaTime / 1000;
  if (deltaTime >= 1) {
    this._renderTime = currentTime;
    this._enterFrameEvent.set$_passedTime(deltaTimeSec);
    this._enterFrameIndex.dispatchEvent$1(this._enterFrameEvent);
    this._juggler.advanceTime$1(deltaTimeSec);
    i = 0;
    while (true) {
      t1 = $.get$length(this._stages);
      if (typeof t1 !== 'number')
        return this._onAnimationFrame$1$bailout(4, i, t1);
      if (!(i < t1))
        break;
      t1 = this._stages;
      if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this._onAnimationFrame$1$bailout(5, i, t1);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].materialize$0();
      ++i;
    }
  }
},
 _onAnimationFrame$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      currentTime = env0;
      break;
    case 2:
      currentTime = env0;
      t1 = env1;
      break;
    case 3:
      currentTime = env0;
      t1 = env1;
      break;
    case 4:
      i = env0;
      t1 = env1;
      break;
    case 5:
      i = env0;
      t1 = env1;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.window().requestAnimationFrame$1(this.get$_onAnimationFrame());
      if ($.get$isNaN(this._renderTime) === true)
        this._renderTime = currentTime;
      t1 = this._renderTime;
    case 2:
      state0 = 0;
      if ($.gtB(t1, currentTime))
        this._renderTime = currentTime;
      t1 = this._renderTime;
    case 3:
      state0 = 0;
      deltaTime = $.sub(currentTime, t1);
      deltaTimeSec = $.div(deltaTime, 1000);
    default:
      var currentTime, t1, deltaTime, deltaTimeSec, i;
      if (state0 === 5 || state0 === 4 || state0 === 0 && $.geB(deltaTime, 1))
        switch (state0) {
          case 0:
            this._renderTime = currentTime;
            this._enterFrameEvent.set$_passedTime(deltaTimeSec);
            this._enterFrameIndex.dispatchEvent$1(this._enterFrameEvent);
            this._juggler.advanceTime$1(deltaTimeSec);
            i = 0;
          default:
            L0:
              while (true)
                switch (state0) {
                  case 0:
                    t1 = $.get$length(this._stages);
                  case 4:
                    state0 = 0;
                    if (!$.ltB(i, t1))
                      break L0;
                    t1 = this._stages;
                  case 5:
                    state0 = 0;
                    $.index(t1, i).materialize$0();
                    ++i;
                }
        }
  }
},
 get$_onAnimationFrame: function() { return new $.BoundClosure(this, '_onAnimationFrame$1'); },
 addStage$1: function(stage) {
  $.add$1(this._stages, stage);
},
 RenderLoop$0: function() {
  this._juggler = $.Juggler$();
  this._stages = $._ListImpl_List(null);
  this._renderTime = (0/0);
  this._enterFrameIndex = $.get$_EventListenerListIndex_enterFrame();
  this._enterFrameEvent = $.EnterFrameEvent$(0);
  $.window().requestAnimationFrame$1(this.get$_onAnimationFrame());
}
};

$$.RenderState = {"": ["_context", "_matrices", "_alphas", "_depth"],
 "super": "Object",
 get$context: function() {
  return this._context;
},
 reset$0: function() {
  this._context.setTransform$6(1, 0, 0, 1, 0, 0);
  this._context.set$globalAlpha(1);
  var t1 = this._context;
  t1.clearRect$4(0, 0, t1.get$canvas().get$width(), this._context.get$canvas().get$height());
  this._depth = 0;
},
 renderDisplayObject$1: function(displayObject) {
  var t1, t2, matrix, t3, t4, t5, t6, t8;
  this._depth = this._depth + 1;
  t1 = this._matrices;
  t2 = this._depth;
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  matrix = t1[t2];
  t2 = displayObject.get$_transformationMatrix();
  t1 = this._matrices;
  t3 = this._depth - 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  matrix.copyFromAndConcat$2(t2, t1[t3]);
  this._context.setTransform$6(matrix.get$a(), matrix.get$b(), matrix.get$c(), matrix.get$d(), matrix.get$tx(), matrix.get$ty());
  t2 = this._alphas;
  t4 = this._depth;
  t5 = t4 - 1;
  t6 = t2.length;
  if (t5 < 0 || t5 >= t6)
    throw $.ioore(t5);
  t5 = t2[t5];
  if (typeof t5 !== 'number')
    return this.renderDisplayObject$1$bailout(1, displayObject, t2, t4, t5);
  t8 = displayObject.get$_alpha();
  if (typeof t8 !== 'number')
    return this.renderDisplayObject$1$bailout(2, displayObject, t2, t4, t5, t8);
  t8 = t5 * t8;
  if (t4 < 0 || t4 >= t6)
    throw $.ioore(t4);
  t2[t4] = t8;
  this._context.set$globalAlpha(t8);
  if (displayObject.get$mask() == null)
    displayObject.render$1(this);
  else {
    this._context.save$0();
    displayObject.get$mask().render$1(this);
    displayObject.render$1(this);
    this._context.restore$0();
  }
  this._depth = this._depth - 1;
},
 renderDisplayObject$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      displayObject = env0;
      t2 = env1;
      t4 = env2;
      t5 = env3;
      break;
    case 2:
      displayObject = env0;
      t2 = env1;
      t4 = env2;
      t5 = env3;
      t7 = env4;
      break;
  }
  switch (state0) {
    case 0:
      this._depth = this._depth + 1;
      t1 = this._matrices;
      t2 = this._depth;
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      matrix = t1[t2];
      t2 = displayObject.get$_transformationMatrix();
      t1 = this._matrices;
      t3 = this._depth - 1;
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      matrix.copyFromAndConcat$2(t2, t1[t3]);
      this._context.setTransform$6(matrix.get$a(), matrix.get$b(), matrix.get$c(), matrix.get$d(), matrix.get$tx(), matrix.get$ty());
      t2 = this._alphas;
      t4 = this._depth;
      t5 = t4 - 1;
      if (t5 < 0 || t5 >= t2.length)
        throw $.ioore(t5);
      t5 = t2[t5];
    case 1:
      state0 = 0;
      t7 = displayObject.get$_alpha();
    case 2:
      var t1, t2, matrix, t3, t4, t5, displayObject, t7;
      state0 = 0;
      t7 = $.mul(t5, t7);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t2[t4] = t7;
      this._context.set$globalAlpha(t7);
      if (displayObject.get$mask() == null)
        displayObject.render$1(this);
      else {
        this._context.save$0();
        displayObject.get$mask().render$1(this);
        displayObject.render$1(this);
        this._context.restore$0();
      }
      this._depth = this._depth - 1;
  }
},
 RenderState$fromCanvasRenderingContext2D$1: function(context) {
  var i;
  this._context = context;
  this._matrices = $._ListImpl_List(null);
  this._alphas = $._ListImpl_List(null);
  this._depth = 0;
  for (i = 0; i < 100; ++i) {
    this._matrices.push($.Matrix$fromIdentity());
    this._alphas.push(1);
  }
}
};

$$.Event = {"": ["_lib1_type", "_bubbles", "_eventPhase!", "_target=", "_currentTarget!", "_stopsPropagation!", "_stopsImmediatePropagation!"],
 "super": "Object",
 _reset$2: function(type, bubbles) {
  this._lib1_type = type;
  this._bubbles = bubbles;
  this._eventPhase = 2;
  this._target = null;
  this._currentTarget = null;
  this._stopsPropagation = false;
  this._stopsImmediatePropagation = false;
},
 get$stopsPropagation: function() {
  return this._stopsPropagation;
},
 get$stopsImmediatePropagation: function() {
  return this._stopsImmediatePropagation;
},
 get$type: function() {
  return this._lib1_type;
},
 get$eventPhase: function() {
  return this._eventPhase;
},
 get$bubbles: function() {
  return this._bubbles;
},
 get$captures: function() {
  return true;
},
 get$target: function() {
  return this._target;
},
 Event$2: function(type, bubbles) {
  this._reset$2(type, bubbles);
}
};

$$.Events = {"": ["_eventDispatcher"],
 "super": "Object",
 operator$index$1: function(eventType) {
  return this._eventDispatcher._getEventListenerList$1(eventType);
},
 Events$1: function(eventDispatcher) {
  this._eventDispatcher = eventDispatcher;
}
};

$$.EventDispatcher = {"": ["_eventListenerLists"],
 "super": "Object",
 hasEventListener$1: function(type) {
  var t1 = this._eventListenerLists;
  return !(t1 == null) && t1.containsKey$1(type) === true;
},
 addEventListener$3: function(type, eventListener, useCapture) {
  this._getEventListenerList$1(type).add$2(eventListener, useCapture);
},
 addEventListener$2: function(type,eventListener) {
  return this.addEventListener$3(type,eventListener,false)
},
 dispatchEvent$1: function(event$) {
  this._dispatchEventInternal$4(event$, this, this, 2);
},
 get$on: function() {
  return $.Events$(this);
},
 _dispatchEventInternal$4: function(event$, target, currentTarget, eventPhase) {
  var t1, t2, eventListenerList;
  t1 = this._eventListenerLists;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._dispatchEventInternal$4$bailout(1, event$, target, currentTarget, eventPhase, t1);
  t2 = event$.get$type();
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  eventListenerList = t1[t2];
  if (!(eventListenerList == null)) {
    event$.set$_target(target);
    event$.set$_currentTarget(currentTarget);
    event$.set$_eventPhase(eventPhase);
    event$.set$_stopsPropagation(false);
    event$.set$_stopsImmediatePropagation(false);
    eventListenerList.dispatchEvent$1(event$);
  }
},
 _dispatchEventInternal$4$bailout: function(state0, event$, target, currentTarget, eventPhase, t1) {
  var eventListenerList;
  if (!(t1 == null)) {
    eventListenerList = $.index(t1, event$.get$type());
    if (!(eventListenerList == null)) {
      event$.set$_target(target);
      event$.set$_currentTarget(currentTarget);
      event$.set$_eventPhase(eventPhase);
      event$.set$_stopsPropagation(false);
      event$.set$_stopsImmediatePropagation(false);
      eventListenerList.dispatchEvent$1(event$);
    }
  }
},
 _getEventListenerList$1: function(type) {
  var eventListenerList, t1;
  if (this._eventListenerLists == null)
    this._eventListenerLists = $.HashMapImplementation$();
  eventListenerList = $.index(this._eventListenerLists, type);
  if (eventListenerList == null) {
    t1 = this._eventListenerLists;
    eventListenerList = $.EventListenerList$(this, type);
    $.indexSet(t1, type, eventListenerList);
  }
  return eventListenerList;
}
};

$$._EventListenerUseCapture = {"": ["eventListener?", "useCapture?"],
 "super": "Object",
 eventListener$1: function(arg0) { return this.eventListener.call$1(arg0); }
};

$$.EventListenerList = {"": ["_eventDispatcher", "_eventType", "_list"],
 "super": "Object",
 get$eventDispatcher: function() {
  return this._eventDispatcher;
},
 add$2: function(eventListener, useCapture) {
  var i, t1, t2;
  for (i = 0; t1 = this._list, i < t1.length; ++i) {
    if ($.eqB(t1[i].get$eventListener(), eventListener)) {
      t1 = this._list;
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = $.eqB(t1[i].get$useCapture(), useCapture);
      t1 = t2;
    } else
      t1 = false;
    if (t1)
      return;
  }
  if ($.eqB(this._eventType, 'enterFrame') && this._list.length === 0)
    $.add$1($.get$_EventListenerListIndex_enterFrame(), this);
  $.add$1(this._list, $._EventListenerUseCapture$(eventListener, useCapture));
},
 add$1: function(eventListener) {
  return this.add$2(eventListener,false)
},
 remove$2: function(eventListener, useCapture) {
  var i, t1, t2;
  for (i = 0; t1 = this._list, i < t1.length; ++i) {
    if ($.eqB(t1[i].get$eventListener(), eventListener)) {
      t1 = this._list;
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = $.eqB(t1[i].get$useCapture(), useCapture);
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      this._list = $._ListImpl_List$from(this._list);
      $.removeAt$1(this._list, i);
      if ($.eqB(this._eventType, 'enterFrame') && this._list.length === 0)
        $.get$_EventListenerListIndex_enterFrame().remove$1(this);
      break;
    }
  }
},
 remove$1: function(eventListener) {
  return this.remove$2(eventListener,false)
},
 operator$add$1: function(eventListener) {
  this.add$2(eventListener, false);
},
 operator$sub$1: function(eventListener) {
  this.remove$2(eventListener, false);
},
 dispatchEvent$1: function(event$) {
  var i, t1, t2;
  for (i = 0; i < this._list.length; ++i) {
    if ($.eqB(event$.get$eventPhase(), 1)) {
      t1 = this._list;
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i].get$useCapture() === true;
      t1 = t2;
    } else
      t1 = true;
    if (t1)
      if ($.eqB(event$.get$stopsImmediatePropagation(), false)) {
        t1 = this._list;
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i].eventListener$1(event$);
      }
  }
},
 EventListenerList$2: function(eventDispatcher, eventType) {
  this._eventDispatcher = eventDispatcher;
  this._eventType = eventType;
  this._list = $._ListImpl_List(null);
}
};

$$._EventListenerListIndex = {"": ["_lists"],
 "super": "Object",
 add$1: function(list) {
  this._lists.push(list);
},
 remove$1: function(list) {
  var index, t1;
  index = $.indexOf$1(this._lists, list);
  if (!$.eqB(index, -1)) {
    t1 = this._lists;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1[index] = null;
  }
},
 dispatchEvent$1: function(event$) {
  var listsLength, c, i, t1, eventListenerList, t2, c0, t3;
  listsLength = this._lists.length;
  for (c = 0, i = 0; i < listsLength; ++i) {
    t1 = this._lists;
    if (i >= t1.length)
      throw $.ioore(i);
    eventListenerList = t1[i];
    if (!(eventListenerList == null)) {
      event$.set$_target(eventListenerList.get$eventDispatcher());
      event$.set$_currentTarget(eventListenerList.get$eventDispatcher());
      event$.set$_eventPhase(2);
      eventListenerList.dispatchEvent$1(event$);
      if (c !== i) {
        t1 = this._lists;
        if (c >= t1.length)
          throw $.ioore(c);
        t1[c] = eventListenerList;
      }
      ++c;
    }
  }
  for (t1 = this._lists, t2 = t1.length, i = listsLength; i < t2; ++i) {
    c0 = c + 1;
    t3 = t1[i];
    if (c >= t2)
      throw $.ioore(c);
    t1[c] = t3;
    c = c0;
  }
  $.set$length(t1, c);
},
 _EventListenerListIndex$0: function() {
  this._lists = $._ListImpl_List(null);
}
};

$$.EnterFrameEvent = {"": ["_passedTime!", "_lib1_type", "_bubbles", "_eventPhase", "_target", "_currentTarget", "_stopsPropagation", "_stopsImmediatePropagation"],
 "super": "Event",
 get$captures: function() {
  return false;
},
 EnterFrameEvent$1: function(passedTime) {
  this._passedTime = passedTime;
}
};

$$.MouseEvent = {"": ["_localX!", "_localY!", "_stageX!", "_stageY!", "_buttonDown!", "_altKey!", "_controlKey", "_ctrlKey!", "_shiftKey!", "_clickCount!", "_deltaX=", "_deltaY=", "_isRelatedObjectInaccessible", "_relatedObject", "_lib1_type", "_bubbles", "_eventPhase", "_target", "_currentTarget", "_stopsPropagation", "_stopsImmediatePropagation"],
 "super": "Event",
 _reset$2: function(type, bubbles) {
  $.Event.prototype._reset$2.call(this, type, bubbles);
  this._localY = 0;
  this._localX = 0;
  this._stageY = 0;
  this._stageX = 0;
  this._buttonDown = false;
  this._altKey = false;
  this._controlKey = false;
  this._ctrlKey = false;
  this._shiftKey = false;
  this._clickCount = 0;
  this._deltaX = 0;
  this._deltaY = 0;
  this._isRelatedObjectInaccessible = false;
  this._relatedObject = null;
},
 get$localX: function() {
  return this._localX;
},
 get$localY: function() {
  return this._localY;
},
 get$buttonDown: function() {
  return this._buttonDown;
},
 get$altKey: function() {
  return this._altKey;
},
 get$ctrlKey: function() {
  return this._ctrlKey;
},
 get$shiftKey: function() {
  return this._shiftKey;
},
 get$deltaX: function() {
  return this._deltaX;
},
 get$deltaY: function() {
  return this._deltaY;
},
 MouseEvent$2: function(type, bubbles) {
  this._reset$2(type, bubbles);
}
};

$$.KeyboardEvent = {"": ["_altKey!", "_ctrlKey!", "_shiftKey!", "_commandKey", "_controlKey", "_charCode!", "_keyCode!", "_keyLocation!", "_lib1_type", "_bubbles", "_eventPhase", "_target", "_currentTarget", "_stopsPropagation", "_stopsImmediatePropagation"],
 "super": "Event",
 _reset$2: function(type, bubbles) {
  $.Event.prototype._reset$2.call(this, type, bubbles);
  this._altKey = false;
  this._ctrlKey = false;
  this._shiftKey = false;
  this._commandKey = false;
  this._controlKey = false;
  this._charCode = 0;
  this._keyCode = 0;
  this._keyLocation = 0;
},
 get$altKey: function() {
  return this._altKey;
},
 get$ctrlKey: function() {
  return this._ctrlKey;
},
 get$shiftKey: function() {
  return this._shiftKey;
},
 get$charCode: function() {
  return this._charCode;
},
 get$keyCode: function() {
  return this._keyCode;
},
 get$keyLocation: function() {
  return this._keyLocation;
},
 KeyboardEvent$2: function(type, bubbles) {
  this._reset$2(type, bubbles);
}
};

$$.TextEvent = {"": ["_text", "_lib1_type", "_bubbles", "_eventPhase", "_target", "_currentTarget", "_stopsPropagation", "_stopsImmediatePropagation"],
 "super": "Event"
};

$$.DisplayObject = {"": ["_alpha?", "_lib1_parent?", "mask="],
 "super": "EventDispatcher",
 get$x: function() {
  return this._x;
},
 get$y: function() {
  return this._y;
},
 get$pivotX: function() {
  return this._pivotX;
},
 get$pivotY: function() {
  return this._pivotY;
},
 get$scaleX: function() {
  return this._scaleX;
},
 get$scaleY: function() {
  return this._scaleY;
},
 get$rotation: function() {
  return this._rotation;
},
 get$alpha: function() {
  return this._alpha;
},
 get$visible: function() {
  return this._visible;
},
 get$name: function() {
  return this._name;
},
 get$parent: function() {
  return this._lib1_parent;
},
 get$on: function() {
  return $.DisplayObjectEvents$(this);
},
 get$root: function() {
  for (var currentObject = this; !(currentObject.get$_lib1_parent() == null);)
    var currentObject = currentObject.get$_lib1_parent();
  return currentObject;
},
 get$stage: function() {
  var root = this.get$root();
  if (typeof root === 'object' && root !== null && !!root.is$Stage)
    return root;
  return;
},
 set$x: function(value) {
  this._x = value;
  this._transformationMatrixRefresh = true;
},
 set$y: function(value) {
  this._y = value;
  this._transformationMatrixRefresh = true;
},
 set$pivotX: function(value) {
  this._pivotX = value;
  this._transformationMatrixRefresh = true;
},
 set$pivotY: function(value) {
  this._pivotY = value;
  this._transformationMatrixRefresh = true;
},
 set$scaleX: function(value) {
  this._scaleX = value;
  this._transformationMatrixRefresh = true;
},
 set$scaleY: function(value) {
  this._scaleY = value;
  this._transformationMatrixRefresh = true;
},
 set$rotation: function(value) {
  this._rotation = value;
  this._transformationMatrixRefresh = true;
},
 set$alpha: function(value) {
  this._alpha = value;
  this._transformationMatrixRefresh = true;
},
 get$width: function() {
  return this.getBoundsTransformed$1(this.get$_transformationMatrix()).get$width();
},
 get$height: function() {
  return this.getBoundsTransformed$1(this.get$_transformationMatrix()).get$height();
},
 set$width: function(value) {
  var normalWidth;
  this.set$scaleX(1);
  normalWidth = this.get$width();
  this.set$scaleX(!$.eqB(normalWidth, 0) ? $.div(value, normalWidth) : 1);
},
 set$height: function(value) {
  var normalHeight;
  this.set$scaleY(1);
  normalHeight = this.get$height();
  this.set$scaleY(!$.eqB(normalHeight, 0) ? $.div(value, normalHeight) : 1);
},
 removeFromParent$0: function() {
  var t1 = this._lib1_parent;
  if (!(t1 == null))
    t1.removeChild$1(this);
},
 get$_transformationMatrix: function() {
  var t1, t2, cosR, sinR, a, b, c, d, tx, ty;
  if (this._transformationMatrixRefresh) {
    this._transformationMatrixRefresh = false;
    if ($.eqB(this._rotation, 0)) {
      t1 = this._transformationMatrixPrivate;
      t2 = this._scaleX;
      t1.setTo$6(t2, 0, 0, this._scaleY, $.sub(this._x, $.mul(this._pivotX, t2)), $.sub(this._y, $.mul(this._pivotY, this._scaleY)));
    } else {
      cosR = $.cos(this._rotation);
      sinR = $.sin(this._rotation);
      a = $.mul(this._scaleX, cosR);
      b = $.mul(this._scaleX, sinR);
      c = $.mul($.neg(this._scaleY), sinR);
      d = $.mul(this._scaleY, cosR);
      tx = $.sub($.sub(this._x, $.mul(this._pivotX, a)), $.mul(this._pivotY, c));
      ty = $.sub($.sub(this._y, $.mul(this._pivotX, b)), $.mul(this._pivotY, d));
      this._transformationMatrixPrivate.setTo$6(a, b, c, d, tx, ty);
    }
  }
  return this._transformationMatrixPrivate;
},
 getBoundsTransformed$2: function(matrix, returnRectangle) {
  if (returnRectangle == null)
    returnRectangle = $.Rectangle$zero();
  returnRectangle.set$x(matrix.get$tx());
  returnRectangle.set$y(matrix.get$ty());
  returnRectangle.set$width(0);
  returnRectangle.set$height(0);
  return returnRectangle;
},
 getBoundsTransformed$1: function(matrix) {
  return this.getBoundsTransformed$2(matrix,null)
},
 hitTestInput$2: function(localX, localY) {
  if ($.contains$2(this.getBoundsTransformed$1(this._tmpMatrixIdentity), localX, localY) === true)
    return this;
  return;
},
 globalToLocal$1: function(globalPoint) {
  var displayObject;
  this._tmpMatrix.identity$0();
  for (displayObject = this; !(displayObject == null); displayObject = displayObject.get$_lib1_parent())
    this._tmpMatrix.concat$1(displayObject.get$_transformationMatrix());
  this._tmpMatrix.invert$0();
  return this._tmpMatrix.transformPoint$1(globalPoint);
},
 dispatchEvent$1: function(event$) {
  var ancestor, ancestors, t1, i;
  if (event$.get$captures() === true || event$.get$bubbles() === true) {
    for (ancestor = this._lib1_parent, ancestors = null; !(ancestor == null); ancestor = ancestor.get$_lib1_parent())
      if (ancestor.hasEventListener$1(event$.get$type()) === true) {
        if (ancestors == null)
          ancestors = $._ListImpl_List(null);
        $.add$1(ancestors, ancestor);
      }
  } else
    ancestors = null;
  if (event$.get$captures() === true && !(ancestors == null)) {
    t1 = $.get$length(ancestors);
    if (typeof t1 !== 'number')
      return this.dispatchEvent$1$bailout(1, event$, t1, ancestors);
    i = t1 - 1;
    for (; i >= 0; --i) {
      t1 = event$.get$stopsPropagation();
      if (typeof t1 !== 'boolean')
        return this.dispatchEvent$1$bailout(2, event$, i, t1, ancestors);
      if (!t1)
        $.index(ancestors, i)._dispatchEventInternal$4(event$, this, $.index(ancestors, i), 1);
    }
  }
  t1 = event$.get$stopsPropagation();
  if (typeof t1 !== 'boolean')
    return this.dispatchEvent$1$bailout(3, event$, t1, ancestors);
  if (!t1)
    this._dispatchEventInternal$4(event$, this, this, 2);
  if (event$.get$bubbles() === true && !(ancestors == null)) {
    i = 0;
    while (true) {
      t1 = $.get$length(ancestors);
      if (typeof t1 !== 'number')
        return this.dispatchEvent$1$bailout(4, i, event$, t1, ancestors);
      if (!(i < t1))
        break;
      t1 = event$.get$stopsPropagation();
      if (typeof t1 !== 'boolean')
        return this.dispatchEvent$1$bailout(5, i, event$, t1, ancestors);
      if (!t1)
        $.index(ancestors, i)._dispatchEventInternal$4(event$, this, $.index(ancestors, i), 3);
      ++i;
    }
  }
},
 dispatchEvent$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      event$ = env0;
      t1 = env1;
      ancestors = env2;
      break;
    case 2:
      event$ = env0;
      i = env1;
      t1 = env2;
      ancestors = env3;
      break;
    case 3:
      event$ = env0;
      t1 = env1;
      ancestors = env2;
      break;
    case 4:
      i = env0;
      event$ = env1;
      t1 = env2;
      ancestors = env3;
      break;
    case 5:
      i = env0;
      event$ = env1;
      t1 = env2;
      ancestors = env3;
      break;
  }
  switch (state0) {
    case 0:
      if (event$.get$captures() === true || event$.get$bubbles() === true) {
        for (ancestor = this._lib1_parent, ancestors = null; !(ancestor == null); ancestor = ancestor.get$_lib1_parent())
          if (ancestor.hasEventListener$1(event$.get$type()) === true) {
            if (ancestors == null)
              ancestors = $._ListImpl_List(null);
            $.add$1(ancestors, ancestor);
          }
      } else
        ancestors = null;
    default:
      if (state0 === 2 || state0 === 1 || state0 === 0 && event$.get$captures() === true && !(ancestors == null))
        switch (state0) {
          case 0:
            t1 = $.get$length(ancestors);
          case 1:
            state0 = 0;
            i = $.sub(t1, 1);
          case 2:
            L0:
              while (true)
                switch (state0) {
                  case 0:
                    if (!$.geB(i, 0))
                      break L0;
                    t1 = event$.get$stopsPropagation();
                  case 2:
                    state0 = 0;
                    if ($.eqB(t1, false))
                      $.index(ancestors, i)._dispatchEventInternal$4(event$, this, $.index(ancestors, i), 1);
                    i = $.sub(i, 1);
                }
        }
      t1 = event$.get$stopsPropagation();
    case 3:
      state0 = 0;
      if ($.eqB(t1, false))
        this._dispatchEventInternal$4(event$, this, this, 2);
    case 4:
    case 5:
      var ancestor, ancestors, t1, event$, i;
      if (state0 === 5 || state0 === 4 || state0 === 0 && event$.get$bubbles() === true && !(ancestors == null))
        switch (state0) {
          case 0:
            i = 0;
          default:
            L1:
              while (true)
                switch (state0) {
                  case 0:
                    t1 = $.get$length(ancestors);
                  case 4:
                    state0 = 0;
                    if (!$.ltB(i, t1))
                      break L1;
                    t1 = event$.get$stopsPropagation();
                  case 5:
                    state0 = 0;
                    if ($.eqB(t1, false))
                      $.index(ancestors, i)._dispatchEventInternal$4(event$, this, $.index(ancestors, i), 3);
                    ++i;
                }
        }
  }
},
 _setParent$1: function(value) {
  var ancestor;
  for (ancestor = value; !(ancestor == null); ancestor = ancestor.get$_lib1_parent())
    if ($.eqB(ancestor, this))
      throw $.$$throw($.ArgumentError$('Error #2150: An object cannot be added as a child to one of it\'s children (or children\'s children, etc.).'));
  this._lib1_parent = value;
},
 DisplayObject$0: function() {
  this._transformationMatrixPrivate = $.Matrix$fromIdentity();
  this._transformationMatrixRefresh = true;
  this._tmpMatrix = $.Matrix$fromIdentity();
  this._tmpMatrixIdentity = $.Matrix$fromIdentity();
}
};

$$.InteractiveObject = {"": ["doubleClickEnabled?", "mouseEnabled!"],
 "super": "DisplayObject",
 get$on: function() {
  return $.InteractiveObjectEvents$(this);
},
 is$InteractiveObject: true
};

$$.DisplayObjectContainer = {"": [],
 "super": "InteractiveObject",
 get$on: function() {
  return $.DisplayObjectContainerEvents$(this);
},
 addChild$1: function(child) {
  var t1, t2, index;
  t1 = $.eqB(child.get$parent(), this);
  t2 = this._children;
  if (t1) {
    index = $.indexOf$1(t2, child);
    $.removeAt$1(this._children, index);
    this._children.push(child);
  } else
    this.addChildAt$2(child, t2.length);
},
 addChildAt$2: function(child, index) {
  var t1;
  if (index < 0 && false)
    throw $.$$throw($.ArgumentError$('Error #2006: The supplied index is out of bounds.'));
  if ($.eqB(child, this))
    throw $.$$throw($.ArgumentError$('Error #2024: An object cannot be added as a child of itself.'));
  if ($.eqB(child.get$parent(), this)) {
    t1 = this._children;
    $.removeAt$1(t1, $.indexOf$1(t1, child));
    t1 = this._children;
    if (index > t1.length)
      --index;
    $.insertRange$3(t1, index, 1, child);
  } else {
    child.removeFromParent$0();
    child._setParent$1(this);
    $.insertRange$3(this._children, index, 1, child);
    child.dispatchEvent$1($.Event$('added', true));
    if (!(this.get$stage() == null))
      this._dispatchEventOnChildren$2(child, $.Event$('addedToStage', false));
  }
},
 removeChild$1: function(child) {
  var childIndex = $.indexOf$1(this._children, child);
  if ($.eqB(childIndex, -1))
    throw $.$$throw($.ArgumentError$('Error #2025: The supplied DisplayObject must be a child of the caller.'));
  this.removeChildAt$1(childIndex);
},
 removeChildAt$1: function(index) {
  var t1, child;
  if ($.ltB(index, 0) && $.geB(index, this._children.length))
    throw $.$$throw($.ArgumentError$('Error #2006: The supplied index is out of bounds.'));
  t1 = this._children;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  child = t1[index];
  child.dispatchEvent$1($.Event$('removed', true));
  if (!(this.get$stage() == null))
    this._dispatchEventOnChildren$2(child, $.Event$('removedFromStage', false));
  child._setParent$1(null);
  $.removeAt$1(this._children, index);
},
 contains$1: function(child) {
  for (; !(child == null); child = child.get$_lib1_parent())
    if ($.eqB(child, this))
      return true;
  return false;
},
 getBoundsTransformed$2: function(matrix, returnRectangle) {
  var t1, top$, right, bottom, i, left, t2, t3, rectangle;
  if (returnRectangle == null)
    returnRectangle = $.Rectangle$zero();
  t1 = this._children.length;
  if (t1 === 0)
    return $.DisplayObject.prototype.getBoundsTransformed$2.call(this, matrix, returnRectangle);
  for (top$ = (1/0), right = (-1/0), bottom = (-1/0), i = 0, left = (1/0); i < t1; ++i) {
    t2 = this._tmpMatrix;
    t3 = this._children;
    if (i >= t3.length)
      throw $.ioore(i);
    t2.copyFromAndConcat$2(t3[i].get$_transformationMatrix(), matrix);
    t2 = this._children;
    if (i >= t2.length)
      throw $.ioore(i);
    rectangle = t2[i].getBoundsTransformed$2(this._tmpMatrix, returnRectangle);
    t2 = rectangle.get$left();
    if (typeof t2 !== 'number')
      return this.getBoundsTransformed$2$bailout(1, matrix, t1, top$, right, bottom, i, left, rectangle, returnRectangle, t2);
    if (t2 < left) {
      left = rectangle.get$left();
      if (typeof left !== 'number')
        return this.getBoundsTransformed$2$bailout(2, matrix, t1, top$, left, right, bottom, i, rectangle, returnRectangle);
    }
    t2 = rectangle.get$top();
    if (typeof t2 !== 'number')
      return this.getBoundsTransformed$2$bailout(3, matrix, t1, top$, right, bottom, i, left, t2, rectangle, returnRectangle);
    if (t2 < top$) {
      top$ = rectangle.get$top();
      if (typeof top$ !== 'number')
        return this.getBoundsTransformed$2$bailout(4, matrix, t1, right, bottom, left, i, rectangle, top$, returnRectangle);
    }
    t2 = rectangle.get$right();
    if (typeof t2 !== 'number')
      return this.getBoundsTransformed$2$bailout(5, matrix, top$, t1, t2, right, bottom, i, left, rectangle, returnRectangle);
    if (t2 > right) {
      right = rectangle.get$right();
      if (typeof right !== 'number')
        return this.getBoundsTransformed$2$bailout(6, matrix, top$, t1, bottom, i, right, left, rectangle, returnRectangle);
    }
    t2 = rectangle.get$bottom();
    if (typeof t2 !== 'number')
      return this.getBoundsTransformed$2$bailout(7, matrix, top$, t1, bottom, i, left, right, rectangle, t2, returnRectangle);
    if (t2 > bottom) {
      bottom = rectangle.get$bottom();
      if (typeof bottom !== 'number')
        return this.getBoundsTransformed$2$bailout(8, matrix, top$, bottom, t1, left, i, right, returnRectangle);
    }
  }
  returnRectangle.set$x(left);
  returnRectangle.set$y(top$);
  returnRectangle.set$width(right - left);
  returnRectangle.set$height(bottom - top$);
  return returnRectangle;
},
 getBoundsTransformed$2$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9) {
  switch (state0) {
    case 1:
      matrix = env0;
      t1 = env1;
      top$ = env2;
      right = env3;
      bottom = env4;
      i = env5;
      left = env6;
      rectangle = env7;
      returnRectangle = env8;
      t2 = env9;
      break;
    case 2:
      matrix = env0;
      t1 = env1;
      top$ = env2;
      left = env3;
      right = env4;
      bottom = env5;
      i = env6;
      rectangle = env7;
      returnRectangle = env8;
      break;
    case 3:
      matrix = env0;
      t1 = env1;
      top$ = env2;
      right = env3;
      bottom = env4;
      i = env5;
      left = env6;
      t2 = env7;
      rectangle = env8;
      returnRectangle = env9;
      break;
    case 4:
      matrix = env0;
      t1 = env1;
      right = env2;
      bottom = env3;
      left = env4;
      i = env5;
      rectangle = env6;
      top$ = env7;
      returnRectangle = env8;
      break;
    case 5:
      matrix = env0;
      top$ = env1;
      t1 = env2;
      t2 = env3;
      right = env4;
      bottom = env5;
      i = env6;
      left = env7;
      rectangle = env8;
      returnRectangle = env9;
      break;
    case 6:
      matrix = env0;
      top$ = env1;
      t1 = env2;
      bottom = env3;
      i = env4;
      right = env5;
      left = env6;
      rectangle = env7;
      returnRectangle = env8;
      break;
    case 7:
      matrix = env0;
      top$ = env1;
      t1 = env2;
      bottom = env3;
      i = env4;
      left = env5;
      right = env6;
      rectangle = env7;
      t2 = env8;
      returnRectangle = env9;
      break;
    case 8:
      matrix = env0;
      top$ = env1;
      bottom = env2;
      t1 = env3;
      left = env4;
      i = env5;
      right = env6;
      returnRectangle = env7;
      break;
  }
  switch (state0) {
    case 0:
      if (returnRectangle == null)
        returnRectangle = $.Rectangle$zero();
      t1 = this._children.length;
      if (t1 === 0)
        return $.DisplayObject.prototype.getBoundsTransformed$2.call(this, matrix, returnRectangle);
      top$ = (1/0);
      right = (-1/0);
      bottom = (-1/0);
      i = 0;
      left = (1/0);
    default:
      var returnRectangle, t1, top$, right, bottom, i, left, t2, t3, rectangle, matrix;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(i < t1))
                break L0;
              t2 = this._tmpMatrix;
              t3 = this._children;
              if (i >= t3.length)
                throw $.ioore(i);
              t2.copyFromAndConcat$2(t3[i].get$_transformationMatrix(), matrix);
              t2 = this._children;
              if (i >= t2.length)
                throw $.ioore(i);
              rectangle = t2[i].getBoundsTransformed$2(this._tmpMatrix, returnRectangle);
              t2 = rectangle.get$left();
            case 1:
              state0 = 0;
            case 2:
              if (state0 === 2 || state0 === 0 && $.ltB(t2, left))
                switch (state0) {
                  case 0:
                    left = rectangle.get$left();
                  case 2:
                    state0 = 0;
                }
              t2 = rectangle.get$top();
            case 3:
              state0 = 0;
            case 4:
              if (state0 === 4 || state0 === 0 && $.ltB(t2, top$))
                switch (state0) {
                  case 0:
                    top$ = rectangle.get$top();
                  case 4:
                    state0 = 0;
                }
              t2 = rectangle.get$right();
            case 5:
              state0 = 0;
            case 6:
              if (state0 === 6 || state0 === 0 && $.gtB(t2, right))
                switch (state0) {
                  case 0:
                    right = rectangle.get$right();
                  case 6:
                    state0 = 0;
                }
              t2 = rectangle.get$bottom();
            case 7:
              state0 = 0;
            case 8:
              if (state0 === 8 || state0 === 0 && $.gtB(t2, bottom))
                switch (state0) {
                  case 0:
                    bottom = rectangle.get$bottom();
                  case 8:
                    state0 = 0;
                }
              ++i;
          }
      returnRectangle.set$x(left);
      returnRectangle.set$y(top$);
      returnRectangle.set$width($.sub(right, left));
      returnRectangle.set$height($.sub(bottom, top$));
      return returnRectangle;
  }
},
 getBoundsTransformed$1: function(matrix) {
  return this.getBoundsTransformed$2(matrix,null)
},
 hitTestInput$2: function(localX, localY) {
  var i, hit, t1, child, matrix, deltaX, deltaY, t5, t7, childX, t9, t11, displayObject;
  if (typeof localX !== 'number')
    return this.hitTestInput$2$bailout(1, localX, localY);
  if (typeof localY !== 'number')
    return this.hitTestInput$2$bailout(1, localX, localY);
  for (i = this._children.length - 1, hit = null; i >= 0; --i) {
    t1 = this._children;
    if (i >= t1.length)
      throw $.ioore(i);
    child = t1[i];
    if (child.get$visible() === true) {
      matrix = child.get$_transformationMatrix();
      t1 = matrix.get$tx();
      if (typeof t1 !== 'number')
        return this.hitTestInput$2$bailout(2, i, matrix, localY, localX, t1, child, hit);
      deltaX = localX - t1;
      t1 = matrix.get$ty();
      if (typeof t1 !== 'number')
        return this.hitTestInput$2$bailout(3, i, matrix, localY, localX, deltaX, t1, child, hit);
      deltaY = localY - t1;
      t1 = matrix.get$d();
      if (typeof t1 !== 'number')
        return this.hitTestInput$2$bailout(4, i, matrix, localY, localX, deltaX, deltaY, t1, child, hit);
      t1 *= deltaX;
      t5 = matrix.get$c();
      if (typeof t5 !== 'number')
        return this.hitTestInput$2$bailout(5, i, matrix, localY, localX, deltaX, deltaY, t1, t5, child, hit);
      t1 -= t5 * deltaY;
      t7 = matrix.get$det();
      if (typeof t7 !== 'number')
        return this.hitTestInput$2$bailout(6, i, matrix, localY, t7, deltaX, localX, deltaY, child, hit, t1);
      childX = t1 / t7;
      t7 = matrix.get$a();
      if (typeof t7 !== 'number')
        return this.hitTestInput$2$bailout(7, i, matrix, childX, t7, deltaX, localX, deltaY, localY, child, hit);
      t7 *= deltaY;
      t9 = matrix.get$b();
      if (typeof t9 !== 'number')
        return this.hitTestInput$2$bailout(8, i, matrix, childX, localX, deltaX, t7, t9, localY, child, hit);
      t7 -= t9 * deltaX;
      t11 = matrix.get$det();
      if (typeof t11 !== 'number')
        return this.hitTestInput$2$bailout(9, i, localY, childX, localX, t7, t11, child, hit);
      displayObject = child.hitTestInput$2(childX, t7 / t11);
      if (!(displayObject == null)) {
        if (typeof displayObject === 'object' && displayObject !== null && !!displayObject.is$InteractiveObject)
          if (displayObject.mouseEnabled === true)
            return this._mouseChildren ? displayObject : this;
        hit = this;
      }
    }
  }
  return hit;
},
 hitTestInput$2$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9) {
  switch (state0) {
    case 1:
      localX = env0;
      localY = env1;
      break;
    case 2:
      i = env0;
      matrix = env1;
      localY = env2;
      localX = env3;
      t1 = env4;
      child = env5;
      hit = env6;
      break;
    case 3:
      i = env0;
      matrix = env1;
      localY = env2;
      localX = env3;
      deltaX = env4;
      t1 = env5;
      child = env6;
      hit = env7;
      break;
    case 4:
      i = env0;
      matrix = env1;
      localY = env2;
      localX = env3;
      deltaX = env4;
      deltaY = env5;
      t1 = env6;
      child = env7;
      hit = env8;
      break;
    case 5:
      i = env0;
      matrix = env1;
      localY = env2;
      localX = env3;
      deltaX = env4;
      deltaY = env5;
      t1 = env6;
      t5 = env7;
      child = env8;
      hit = env9;
      break;
    case 6:
      i = env0;
      matrix = env1;
      localY = env2;
      t7 = env3;
      deltaX = env4;
      localX = env5;
      deltaY = env6;
      child = env7;
      hit = env8;
      t1 = env9;
      break;
    case 7:
      i = env0;
      matrix = env1;
      childX = env2;
      t7 = env3;
      deltaX = env4;
      localX = env5;
      deltaY = env6;
      localY = env7;
      child = env8;
      hit = env9;
      break;
    case 8:
      i = env0;
      matrix = env1;
      childX = env2;
      localX = env3;
      deltaX = env4;
      t7 = env5;
      t9 = env6;
      localY = env7;
      child = env8;
      hit = env9;
      break;
    case 9:
      i = env0;
      localY = env1;
      childX = env2;
      localX = env3;
      t7 = env4;
      t11 = env5;
      child = env6;
      hit = env7;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      i = this._children.length - 1;
      hit = null;
    default:
      var localX, localY, i, hit, t1, child, matrix, deltaX, deltaY, t5, t7, childX, t9, t11, displayObject;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(i >= 0))
                break L0;
              t1 = this._children;
              if (i >= t1.length)
                throw $.ioore(i);
              child = t1[i];
            default:
              if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && child.get$visible() === true)
                switch (state0) {
                  case 0:
                    matrix = child.get$_transformationMatrix();
                    t1 = matrix.get$tx();
                  case 2:
                    state0 = 0;
                    deltaX = $.sub(localX, t1);
                    t1 = matrix.get$ty();
                  case 3:
                    state0 = 0;
                    deltaY = $.sub(localY, t1);
                    t1 = matrix.get$d();
                  case 4:
                    state0 = 0;
                    t1 = $.mul(t1, deltaX);
                    t5 = matrix.get$c();
                  case 5:
                    state0 = 0;
                    t1 = $.sub(t1, $.mul(t5, deltaY));
                    t7 = matrix.get$det();
                  case 6:
                    state0 = 0;
                    childX = $.div(t1, t7);
                    t7 = matrix.get$a();
                  case 7:
                    state0 = 0;
                    t7 = $.mul(t7, deltaY);
                    t9 = matrix.get$b();
                  case 8:
                    state0 = 0;
                    t7 = $.sub(t7, $.mul(t9, deltaX));
                    t11 = matrix.get$det();
                  case 9:
                    state0 = 0;
                    displayObject = child.hitTestInput$2(childX, $.div(t7, t11));
                    if (!(displayObject == null)) {
                      if (typeof displayObject === 'object' && displayObject !== null && !!displayObject.is$InteractiveObject)
                        if (displayObject.mouseEnabled === true)
                          return this._mouseChildren ? displayObject : this;
                      hit = this;
                    }
                }
              --i;
          }
      return hit;
  }
},
 render$1: function(renderState) {
  var i, t1, child;
  for (i = 0; t1 = this._children, i < t1.length; ++i) {
    child = t1[i];
    if (child.get$visible() === true)
      renderState.renderDisplayObject$1(child);
  }
},
 _dispatchEventOnChildren$2: function(displayObject, event$) {
  var children, childrenLength, i;
  displayObject.dispatchEvent$1(event$);
  if (typeof displayObject === 'object' && displayObject !== null && !!displayObject.is$DisplayObjectContainer) {
    children = $._ListImpl_List$from(displayObject._children);
    childrenLength = children.length;
    for (i = 0; i < childrenLength; ++i) {
      if (i >= children.length)
        throw $.ioore(i);
      this._dispatchEventOnChildren$2(children[i], event$);
    }
  }
},
 DisplayObjectContainer$0: function() {
  this._children = $._ListImpl_List(null);
},
 is$DisplayObjectContainer: true
};

$$.Stage = {"": ["_canvas", "_context", "_focus", "_renderState", "_renderMode", "_mouseCursor", "_buttonState", "_clickTarget", "_clickTime", "_clickCount!", "_mouseDownEventTypes", "_mouseUpEventTypes", "_mouseClickEventTypes", "_mouseDoubleClickEventTypes", "_mouseOverTarget", "_mouseEvent", "_keyboardEvent", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "DisplayObjectContainer",
 get$focus: function() {
  return this._focus;
},
 focus$0: function() { return this.get$focus().call$0(); },
 set$renderMode: function(value) {
  this._renderMode = value;
},
 _throwStageException$0: function() {
  throw $.$$throw($.UnsupportedError$('Error #2071: The Stage class does not implement this property or method.'));
},
 set$x: function(value) {
  this._throwStageException$0();
},
 set$y: function(value) {
  this._throwStageException$0();
},
 set$pivotX: function(value) {
  this._throwStageException$0();
},
 set$pivotY: function(value) {
  this._throwStageException$0();
},
 set$scaleX: function(value) {
  this._throwStageException$0();
},
 set$scaleY: function(value) {
  this._throwStageException$0();
},
 set$rotation: function(value) {
  this._throwStageException$0();
},
 set$alpha: function(value) {
  this._throwStageException$0();
},
 set$width: function(value) {
  this._throwStageException$0();
},
 set$height: function(value) {
  this._throwStageException$0();
},
 materialize$0: function() {
  var t1 = this._renderMode;
  if (typeof t1 !== 'string')
    return this.materialize$0$bailout(1, t1);
  if (!(t1 === 'auto'))
    t1 = t1 === 'once';
  else
    t1 = true;
  if (t1) {
    this._renderState.reset$0();
    this.render$1(this._renderState);
    t1 = this._renderMode;
    if (typeof t1 !== 'string')
      return this.materialize$0$bailout(3, t1);
    if (t1 === 'once')
      this._renderMode = 'stop';
  }
},
 materialize$0$bailout: function(state0, env0) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
    case 3:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._renderMode;
    case 1:
      state0 = 0;
    case 2:
      if (state0 === 2 || state0 === 0 && !$.eqB(t1, 'auto'))
        switch (state0) {
          case 0:
            t1 = this._renderMode;
          case 2:
            state0 = 0;
            t1 = $.eqB(t1, 'once');
        }
      else
        t1 = true;
    case 3:
      var t1;
      if (state0 === 3 || state0 === 0 && t1)
        switch (state0) {
          case 0:
            this._renderState.reset$0();
            this.render$1(this._renderState);
            t1 = this._renderMode;
          case 3:
            state0 = 0;
            if ($.eqB(t1, 'once'))
              this._renderMode = 'stop';
        }
  }
},
 _onMouseCursorChanged$1: function(event$) {
  var t1 = $.Mouse__getCssStyle(this._mouseCursor);
  this._canvas.get$style().set$cursor(t1);
},
 get$_onMouseCursorChanged: function() { return new $.BoundClosure(this, '_onMouseCursorChanged$1'); },
 _onMouseEvent$1: function(event$) {
  var time, button, stagePoint, target, mouseCursor, t1, localPoint, t2, clickCount, mouseEventType, isClick, isDoubleClick;
  event$.preventDefault$0();
  time = $.Date_Date$now().get$millisecondsSinceEpoch();
  button = event$.get$button();
  if ($.ltB(button, 0) || $.gtB(button, 2))
    return;
  stagePoint = $.Point$(event$.get$offsetX(), event$.get$offsetY());
  target = !$.eqB(event$.get$type(), 'mouseout') ? $.propertyTypeCast(this.hitTestInput$2(stagePoint.x, stagePoint.y), 'is$InteractiveObject') : null;
  if (typeof target === 'object' && target !== null && !!target.is$Sprite)
    mouseCursor = target.useHandCursor ? 'button' : 'arrow';
  else
    mouseCursor = 'arrow';
  if (typeof target === 'object' && target !== null && !!target.is$SimpleButton)
    if (target.useHandCursor)
      mouseCursor = 'button';
  if (!$.eqB(this._mouseCursor, mouseCursor)) {
    this._mouseCursor = mouseCursor;
    t1 = $.Mouse__getCssStyle(mouseCursor);
    this._canvas.get$style().set$cursor(t1);
  }
  t1 = this._mouseOverTarget;
  if (!(t1 == null) && !$.eqB(t1, target)) {
    localPoint = !(this._mouseOverTarget.get$stage() == null) ? this._mouseOverTarget.globalToLocal$1(stagePoint) : $.Point$zero();
    this._mouseEvent._reset$2('mouseOut', true);
    t1 = localPoint.get$x();
    this._mouseEvent.set$_localX(t1);
    t1 = localPoint.get$y();
    this._mouseEvent.set$_localY(t1);
    t1 = stagePoint.x;
    this._mouseEvent.set$_stageX(t1);
    t1 = stagePoint.y;
    this._mouseEvent.set$_stageY(t1);
    t1 = $.index(this._buttonState, button);
    this._mouseEvent.set$_buttonDown(t1);
    this._mouseOverTarget.dispatchEvent$1(this._mouseEvent);
    this._mouseOverTarget = null;
  }
  t1 = !(target == null);
  if (t1 && !$.eqB(target, this._mouseOverTarget)) {
    localPoint = target.globalToLocal$1(stagePoint);
    this._mouseEvent._reset$2('mouseOver', true);
    t2 = localPoint.get$x();
    this._mouseEvent.set$_localX(t2);
    t2 = localPoint.get$y();
    this._mouseEvent.set$_localY(t2);
    t2 = stagePoint.x;
    this._mouseEvent.set$_stageX(t2);
    t2 = stagePoint.y;
    this._mouseEvent.set$_stageY(t2);
    t2 = $.index(this._buttonState, button);
    this._mouseEvent.set$_buttonDown(t2);
    this._mouseOverTarget = target;
    this._mouseOverTarget.dispatchEvent$1(this._mouseEvent);
  }
  clickCount = $.index(this._clickCount, button);
  if ($.eqB(event$.get$type(), 'mousedown')) {
    mouseEventType = $.index(this._mouseDownEventTypes, button);
    $.indexSet(this._buttonState, button, true);
    if (!$.eqB(target, $.index(this._clickTarget, button)) || $.gtB(time, $.add($.index(this._clickTime, button), 500)))
      clickCount = 0;
    $.indexSet(this._clickTarget, button, target);
    $.indexSet(this._clickTime, button, time);
    t2 = this._clickCount;
    clickCount = $.add(clickCount, 1);
    $.indexSet(t2, button, clickCount);
  } else
    mouseEventType = null;
  if ($.eqB(event$.get$type(), 'mouseup')) {
    mouseEventType = $.index(this._mouseUpEventTypes, button);
    $.indexSet(this._buttonState, button, false);
    isClick = $.eq($.index(this._clickTarget, button), target);
    isDoubleClick = isClick === true && $.get$isEven($.index(this._clickCount, button)) === true && $.ltB(time, $.add($.index(this._clickTime, button), 500));
  } else {
    isClick = false;
    isDoubleClick = false;
  }
  if ($.eqB(event$.get$type(), 'mousemove')) {
    mouseEventType = 'mouseMove';
    clickCount = 0;
  }
  if (!(mouseEventType == null) && t1) {
    localPoint = target.globalToLocal$1(stagePoint);
    this._mouseEvent._reset$2(mouseEventType, true);
    t1 = localPoint.get$x();
    this._mouseEvent.set$_localX(t1);
    t1 = localPoint.get$y();
    this._mouseEvent.set$_localY(t1);
    t1 = stagePoint.x;
    this._mouseEvent.set$_stageX(t1);
    t1 = stagePoint.y;
    this._mouseEvent.set$_stageY(t1);
    t1 = $.index(this._buttonState, button);
    this._mouseEvent.set$_buttonDown(t1);
    this._mouseEvent.set$_clickCount(clickCount);
    target.dispatchEvent$1(this._mouseEvent);
    if (isClick === true) {
      isDoubleClick = isDoubleClick && target.get$doubleClickEnabled() === true;
      mouseEventType = isDoubleClick ? $.index(this._mouseDoubleClickEventTypes, button) : $.index(this._mouseClickEventTypes, button);
      this._mouseEvent._reset$2(mouseEventType, true);
      t1 = localPoint.get$x();
      this._mouseEvent.set$_localX(t1);
      t1 = localPoint.get$y();
      this._mouseEvent.set$_localY(t1);
      t1 = stagePoint.x;
      this._mouseEvent.set$_stageX(t1);
      t1 = stagePoint.y;
      this._mouseEvent.set$_stageY(t1);
      t1 = $.index(this._buttonState, button);
      this._mouseEvent.set$_buttonDown(t1);
      target.dispatchEvent$1(this._mouseEvent);
    }
  }
},
 get$_onMouseEvent: function() { return new $.BoundClosure(this, '_onMouseEvent$1'); },
 _onMouseWheel$1: function(event$) {
  var target, stagePoint, localPoint, t1;
  target = this.hitTestInput$2(event$.get$offsetX(), event$.get$offsetY());
  if (!(target == null)) {
    stagePoint = $.Point$(event$.get$offsetX(), event$.get$offsetY());
    localPoint = target.globalToLocal$1(stagePoint);
    this._mouseEvent._reset$2('mouseWheel', true);
    t1 = localPoint.get$x();
    this._mouseEvent.set$_localX(t1);
    t1 = localPoint.get$y();
    this._mouseEvent.set$_localY(t1);
    t1 = stagePoint.x;
    this._mouseEvent.set$_stageX(t1);
    t1 = stagePoint.y;
    this._mouseEvent.set$_stageY(t1);
    t1 = event$.get$deltaX();
    this._mouseEvent.set$_deltaX(t1);
    t1 = event$.get$deltaY();
    this._mouseEvent.set$_deltaY(t1);
    target.dispatchEvent$1(this._mouseEvent);
  }
},
 get$_onMouseWheel: function() { return new $.BoundClosure(this, '_onMouseWheel$1'); },
 _onKeyEvent$1: function(event$) {
  var keyboardEventType, t1;
  event$.preventDefault$0();
  keyboardEventType = $.eqB(event$.get$type(), 'keyup') ? 'keyUp' : null;
  if ($.eqB(event$.get$type(), 'keydown'))
    keyboardEventType = 'keyDown';
  this._keyboardEvent._reset$2(keyboardEventType, true);
  t1 = event$.get$altKey();
  this._keyboardEvent.set$_altKey(t1);
  t1 = event$.get$ctrlKey();
  this._keyboardEvent.set$_ctrlKey(t1);
  t1 = event$.get$shiftKey();
  this._keyboardEvent.set$_shiftKey(t1);
  t1 = event$.get$charCode();
  this._keyboardEvent.set$_charCode(t1);
  t1 = event$.get$keyCode();
  this._keyboardEvent.set$_keyCode(t1);
  this._keyboardEvent.set$_keyLocation(0);
  if ($.eqB(event$.get$keyLocation(), 1))
    this._keyboardEvent.set$_keyLocation(1);
  if ($.eqB(event$.get$keyLocation(), 2))
    this._keyboardEvent.set$_keyLocation(2);
  if ($.eqB(event$.get$keyLocation(), 3))
    this._keyboardEvent.set$_keyLocation(3);
  if ($.eqB(event$.get$keyLocation(), 5))
    this._keyboardEvent.set$_keyLocation(4);
  if ($.eqB(event$.get$keyLocation(), 4))
    this._keyboardEvent.set$_keyLocation(4);
  t1 = this._focus;
  if (!(t1 == null))
    t1.dispatchEvent$1(this._keyboardEvent);
},
 get$_onKeyEvent: function() { return new $.BoundClosure(this, '_onKeyEvent$1'); },
 _onTextEvent$1: function(event$) {
  var charCode, textEvent, t1;
  charCode = !$.eqB(event$.get$charCode(), 0) ? event$.get$charCode() : event$.get$keyCode();
  textEvent = $.TextEvent$('textInput', true);
  textEvent._text = $._StringImpl_String$fromCharCodes([charCode]);
  t1 = this._focus;
  if (!(t1 == null))
    t1.dispatchEvent$1(textEvent);
},
 get$_onTextEvent: function() { return new $.BoundClosure(this, '_onTextEvent$1'); },
 Stage$2: function(name$, canvas) {
  this._name = name$;
  this._canvas = canvas;
  this._canvas.get$style().set$outline('none');
  this._canvas.focus$0();
  this._context = canvas.get$context2d();
  this._renderState = $.RenderState$fromCanvasRenderingContext2D(this._context);
  this._renderMode = 'auto';
  this._mouseCursor = 'arrow';
  this._buttonState = [false, false, false];
  this._clickTarget = [null, null, null];
  this._clickTime = [0, 0, 0];
  this._clickCount = [0, 0, 0];
  this._mouseDownEventTypes = ['mouseDown', 'middleMouseDown', 'rightMouseDown'];
  this._mouseUpEventTypes = ['mouseUp', 'middleMouseUp', 'rightMouseUp'];
  this._mouseClickEventTypes = ['click', 'middleClick', 'rightClick'];
  this._mouseDoubleClickEventTypes = ['doubleClick', 'middleClick', 'rightClick'];
  this._mouseOverTarget = null;
  $.add$1(this._canvas.get$on().get$mouseDown(), this.get$_onMouseEvent());
  $.add$1(this._canvas.get$on().get$mouseUp(), this.get$_onMouseEvent());
  $.add$1(this._canvas.get$on().get$mouseMove(), this.get$_onMouseEvent());
  $.add$1(this._canvas.get$on().get$mouseOut(), this.get$_onMouseEvent());
  $.add$1(this._canvas.get$on().get$mouseWheel(), this.get$_onMouseWheel());
  $.add$1(this._canvas.get$on().get$keyDown(), this.get$_onKeyEvent());
  $.add$1(this._canvas.get$on().get$keyUp(), this.get$_onKeyEvent());
  $.add$1(this._canvas.get$on().get$keyPress(), this.get$_onTextEvent());
  this._mouseEvent = $.MouseEvent$('click', true);
  this._keyboardEvent = $.KeyboardEvent$('keyDown', true);
  $.Mouse__eventDispatcher().addEventListener$2('mouseCursorChanged', this.get$_onMouseCursorChanged());
},
 is$Stage: true
};

$$.Sprite = {"": ["buttonMode", "useHandCursor", "_children", "_mouseChildren", "_tabChildren", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "DisplayObjectContainer",
 is$Sprite: true
};

$$.Bitmap = {"": ["bitmapData!", "pixelSnapping", "clipRectangle", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "DisplayObject",
 getBoundsTransformed$2: function(matrix, returnRectangle) {
  var t1, width, height;
  t1 = this.bitmapData;
  if (!(t1 == null)) {
    t1 = t1.get$width();
    if (typeof t1 !== 'number')
      return this.getBoundsTransformed$2$bailout(1, matrix, returnRectangle, t1);
    width = t1;
  } else
    width = 0;
  t1 = this.bitmapData;
  if (!(t1 == null)) {
    t1 = t1.get$height();
    if (typeof t1 !== 'number')
      return this.getBoundsTransformed$2$bailout(2, matrix, returnRectangle, width, t1);
    height = t1;
  } else
    height = 0;
  return $._getBoundsTransformedHelper(matrix, width, height, returnRectangle);
},
 getBoundsTransformed$2$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      matrix = env0;
      returnRectangle = env1;
      t1 = env2;
      break;
    case 2:
      matrix = env0;
      returnRectangle = env1;
      width = env2;
      t1 = env3;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.bitmapData;
    case 1:
      if (state0 === 1 || state0 === 0 && !(t1 == null))
        switch (state0) {
          case 0:
            t1 = t1.get$width();
          case 1:
            state0 = 0;
            width = t1;
        }
      else
        width = 0;
      t1 = this.bitmapData;
    case 2:
      var t1, matrix, returnRectangle, width, height;
      if (state0 === 2 || state0 === 0 && !(t1 == null))
        switch (state0) {
          case 0:
            t1 = t1.get$height();
          case 2:
            state0 = 0;
            height = t1;
        }
      else
        height = 0;
      return $._getBoundsTransformedHelper(matrix, width, height, returnRectangle);
  }
},
 getBoundsTransformed$1: function(matrix) {
  return this.getBoundsTransformed$2(matrix,null)
},
 hitTestInput$2: function(localX, localY) {
  var t1;
  if (typeof localX !== 'number')
    return this.hitTestInput$2$bailout(1, localX, localY);
  if (typeof localY !== 'number')
    return this.hitTestInput$2$bailout(1, localX, localY);
  t1 = this.bitmapData;
  if (!(t1 == null))
    if (localX >= 0)
      if (localY >= 0) {
        t1 = t1.get$width();
        if (typeof t1 !== 'number')
          return this.hitTestInput$2$bailout(2, localX, localY, t1);
        if (localX < t1) {
          t1 = this.bitmapData.get$height();
          if (typeof t1 !== 'number')
            return this.hitTestInput$2$bailout(3, localY, t1);
          t1 = localY < t1;
        } else
          t1 = false;
      } else
        t1 = false;
    else
      t1 = false;
  else
    t1 = false;
  if (t1)
    return this;
  return;
},
 hitTestInput$2$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      localX = env0;
      localY = env1;
      break;
    case 2:
      localX = env0;
      localY = env1;
      t1 = env2;
      break;
    case 3:
      localY = env0;
      t1 = env1;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    default:
      var localX, localY, t1;
      if (state0 === 3 || state0 === 2 || state0 === 0 && !(this.bitmapData == null))
        switch (state0) {
          case 0:
          default:
            if (state0 === 3 || state0 === 2 || state0 === 0 && $.geB(localX, 0))
              switch (state0) {
                case 0:
                default:
                  if (state0 === 3 || state0 === 2 || state0 === 0 && $.geB(localY, 0))
                    switch (state0) {
                      case 0:
                        t1 = this.bitmapData.get$width();
                      case 2:
                        state0 = 0;
                      case 3:
                        if (state0 === 3 || state0 === 0 && $.ltB(localX, t1))
                          switch (state0) {
                            case 0:
                              t1 = this.bitmapData.get$height();
                            case 3:
                              state0 = 0;
                              t1 = $.ltB(localY, t1);
                          }
                        else
                          t1 = false;
                    }
                  else
                    t1 = false;
              }
            else
              t1 = false;
        }
      else
        t1 = false;
      if (t1)
        return this;
      return;
  }
},
 render$1: function(renderState) {
  var t1, t2;
  t1 = this.bitmapData;
  if (!(t1 == null)) {
    t2 = this.clipRectangle;
    if (t2 == null)
      t1.render$1(renderState);
    else
      t1.renderClipped$2(renderState, t2);
  }
},
 Bitmap$2: function(bitmapData, pixelSnapping) {
  this.clipRectangle = null;
}
};

$$.BitmapData = {"": ["_width", "_height", "_transparent", "_htmlElement", "_context", "_frameMode", "_frameOffsetX", "_frameOffsetY", "_frameX", "_frameY", "_frameWidth", "_frameHeight"],
 "super": "Object",
 get$width: function() {
  return this._width;
},
 get$height: function() {
  return this._height;
},
 render$1: function(renderState) {
  var t1, t2, t3, t4, t5, t6;
  switch (this._frameMode) {
    case 0:
      renderState.get$context().drawImage$3(this._htmlElement, 0, 0);
      break;
    case 1:
      t1 = renderState.get$context();
      t2 = this._htmlElement;
      t3 = this._frameX;
      t4 = this._frameY;
      t5 = this._frameWidth;
      t6 = this._frameHeight;
      t1.drawImage$9(t2, t3, t4, t5, t6, this._frameOffsetX, this._frameOffsetY, t5, t6);
      break;
    case 2:
      renderState.get$context().transform$6(0, -1, 1, 0, this._frameOffsetX, $.add(this._frameOffsetY, this._frameHeight));
      t1 = renderState.get$context();
      t2 = this._htmlElement;
      t3 = this._frameX;
      t4 = this._frameY;
      t5 = this._frameHeight;
      t6 = this._frameWidth;
      t1.drawImage$9(t2, t3, t4, t5, t6, 0, 0, t5, t6);
      break;
  }
},
 renderClipped$2: function(renderState, clipRectangle) {
  var fLeft, fTop, fRight, fBottom, cLeft, cTop, cRight, cBottom, iLeft, iTop, iRight, iBottom, iOffsetX, iOffsetY, iWidth, iHeight;
  if ($.leB(clipRectangle.get$width(), 0) || $.leB(clipRectangle.get$height(), 0))
    return;
  switch (this._frameMode) {
    case 0:
      renderState.get$context().drawImage$9(this._htmlElement, clipRectangle.get$x(), clipRectangle.get$y(), clipRectangle.get$width(), clipRectangle.get$height(), clipRectangle.get$x(), clipRectangle.get$y(), clipRectangle.get$width(), clipRectangle.get$height());
      break;
    case 1:
      fLeft = this._frameX;
      fTop = this._frameY;
      fRight = $.add(fLeft, this._frameWidth);
      fBottom = $.add(fTop, this._frameHeight);
      cLeft = $.add($.sub(this._frameX, this._frameOffsetX), clipRectangle.get$x());
      cTop = $.add($.sub(this._frameY, this._frameOffsetY), clipRectangle.get$y());
      cRight = $.add(cLeft, clipRectangle.get$width());
      cBottom = $.add(cTop, clipRectangle.get$height());
      iLeft = $.gtB(fLeft, cLeft) ? fLeft : cLeft;
      iTop = $.gtB(fTop, cTop) ? fTop : cTop;
      iRight = $.ltB(fRight, cRight) ? fRight : cRight;
      iBottom = $.ltB(fBottom, cBottom) ? fBottom : cBottom;
      iOffsetX = $.add($.sub(this._frameOffsetX, fLeft), iLeft);
      iOffsetY = $.add($.sub(this._frameOffsetY, fTop), iTop);
      iWidth = $.sub(iRight, iLeft);
      iHeight = $.sub(iBottom, iTop);
      if ($.gtB(iWidth, 0) && $.gtB(iHeight, 0))
        renderState.get$context().drawImage$9(this._htmlElement, iLeft, iTop, iWidth, iHeight, iOffsetX, iOffsetY, iWidth, iHeight);
      break;
    case 2:
      fLeft = this._frameX;
      fTop = this._frameY;
      fRight = $.add(fLeft, this._frameHeight);
      fBottom = $.add(fTop, this._frameWidth);
      cLeft = $.sub($.add($.sub($.add(this._frameX, this._frameOffsetY), clipRectangle.get$y()), this._frameHeight), clipRectangle.get$height());
      cTop = $.add($.sub(this._frameY, this._frameOffsetX), clipRectangle.get$x());
      cRight = $.add(cLeft, clipRectangle.get$height());
      cBottom = $.add(cTop, clipRectangle.get$width());
      iLeft = $.gtB(fLeft, cLeft) ? fLeft : cLeft;
      iTop = $.gtB(fTop, cTop) ? fTop : cTop;
      iRight = $.ltB(fRight, cRight) ? fRight : cRight;
      iBottom = $.ltB(fBottom, cBottom) ? fBottom : cBottom;
      iOffsetX = $.add($.sub(this._frameOffsetX, fTop), iTop);
      iOffsetY = $.sub($.add(this._frameOffsetY, fRight), iRight);
      iWidth = $.sub(iBottom, iTop);
      iHeight = $.sub(iRight, iLeft);
      if ($.gtB(iWidth, 0) && $.gtB(iHeight, 0)) {
        renderState.get$context().transform$6(0, -1, 1, 0, iOffsetX, $.add(iOffsetY, iHeight));
        renderState.get$context().drawImage$9(this._htmlElement, iLeft, iTop, iHeight, iWidth, 0, 0, iHeight, iWidth);
      }
      break;
  }
},
 BitmapData$fromTextureAtlasFrame$1: function(textureAtlasFrame) {
  this._width = textureAtlasFrame.get$originalWidth();
  this._height = textureAtlasFrame.get$originalHeight();
  this._transparent = true;
  this._htmlElement = textureAtlasFrame.get$textureAtlas().get$imageElement();
  this._frameMode = textureAtlasFrame.get$rotated() === true ? 2 : 1;
  this._frameOffsetX = $.toDouble(textureAtlasFrame.get$offsetX());
  this._frameOffsetY = $.toDouble(textureAtlasFrame.get$offsetY());
  this._frameX = $.toDouble(textureAtlasFrame.get$frameX());
  this._frameY = $.toDouble(textureAtlasFrame.get$frameY());
  this._frameWidth = $.toDouble(textureAtlasFrame.get$frameWidth());
  this._frameHeight = $.toDouble(textureAtlasFrame.get$frameHeight());
},
 BitmapData$4: function(width, height, transparent, fillColor) {
  var t1, canvas;
  this._width = width;
  this._height = height;
  this._transparent = transparent;
  t1 = this._width;
  canvas = $.CanvasElement_CanvasElement(this._height, t1);
  this._context = canvas.get$context2d();
  t1 = this._transparent === true ? $._color2rgba(fillColor) : $._color2rgb(fillColor);
  this._context.set$fillStyle(t1);
  this._context.fillRect$4(0, 0, width, height);
  this._htmlElement = canvas;
  this._frameMode = 0;
},
 BitmapData$fromImageElement$1: function(imageElement) {
  this._width = imageElement.get$naturalWidth();
  this._height = imageElement.get$naturalHeight();
  this._transparent = true;
  this._htmlElement = imageElement;
  this._frameMode = 0;
}
};

$$.SimpleButton = {"": ["upState", "overState", "downState", "hitTestState", "useHandCursor", "enabled", "_currentState", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "InteractiveObject",
 getBoundsTransformed$2: function(matrix, returnRectangle) {
  var t1 = this._currentState;
  if (!(t1 == null)) {
    this._tmpMatrix.copyFromAndConcat$2(t1.get$_transformationMatrix(), matrix);
    return this._currentState.getBoundsTransformed$2(this._tmpMatrix, returnRectangle);
  }
  return $.DisplayObject.prototype.getBoundsTransformed$2.call(this, matrix, returnRectangle);
},
 getBoundsTransformed$1: function(matrix) {
  return this.getBoundsTransformed$2(matrix,null)
},
 hitTestInput$2: function(localX, localY) {
  var t1, matrix, t2, deltaX, deltaY, t6, t8, childX, t10, t12;
  if (typeof localX !== 'number')
    return this.hitTestInput$2$bailout(1, localX, localY);
  if (typeof localY !== 'number')
    return this.hitTestInput$2$bailout(1, localX, localY);
  t1 = this.hitTestState;
  if (!(t1 == null)) {
    matrix = t1.get$_transformationMatrix();
    t2 = matrix.get$tx();
    if (typeof t2 !== 'number')
      return this.hitTestInput$2$bailout(2, localX, localY, t1, matrix, t2);
    deltaX = localX - t2;
    t2 = matrix.get$ty();
    if (typeof t2 !== 'number')
      return this.hitTestInput$2$bailout(3, deltaX, localY, t2, t1, matrix);
    deltaY = localY - t2;
    t2 = matrix.get$d();
    if (typeof t2 !== 'number')
      return this.hitTestInput$2$bailout(4, deltaX, t1, deltaY, t2, matrix);
    t2 *= deltaX;
    t6 = matrix.get$c();
    if (typeof t6 !== 'number')
      return this.hitTestInput$2$bailout(5, deltaX, deltaY, t2, t6, t1, matrix);
    t2 -= t6 * deltaY;
    t8 = matrix.get$det();
    if (typeof t8 !== 'number')
      return this.hitTestInput$2$bailout(6, deltaX, deltaY, t1, t2, t8, matrix);
    childX = t2 / t8;
    t8 = matrix.get$a();
    if (typeof t8 !== 'number')
      return this.hitTestInput$2$bailout(7, t8, deltaX, deltaY, t1, matrix, childX);
    t8 *= deltaY;
    t10 = matrix.get$b();
    if (typeof t10 !== 'number')
      return this.hitTestInput$2$bailout(8, deltaX, t8, t10, t1, matrix, childX);
    t8 -= t10 * deltaX;
    t12 = matrix.get$det();
    if (typeof t12 !== 'number')
      return this.hitTestInput$2$bailout(9, t12, t1, childX, t8);
    if (!(t1.hitTestInput$2(childX, t8 / t12) == null))
      return this;
  }
  return;
},
 hitTestInput$2$bailout: function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      localX = env0;
      localY = env1;
      break;
    case 2:
      localX = env0;
      localY = env1;
      t1 = env2;
      matrix = env3;
      t2 = env4;
      break;
    case 3:
      deltaX = env0;
      localY = env1;
      t2 = env2;
      t1 = env3;
      matrix = env4;
      break;
    case 4:
      deltaX = env0;
      t1 = env1;
      deltaY = env2;
      t2 = env3;
      matrix = env4;
      break;
    case 5:
      deltaX = env0;
      deltaY = env1;
      t2 = env2;
      t6 = env3;
      t1 = env4;
      matrix = env5;
      break;
    case 6:
      deltaX = env0;
      deltaY = env1;
      t1 = env2;
      t2 = env3;
      t8 = env4;
      matrix = env5;
      break;
    case 7:
      t8 = env0;
      deltaX = env1;
      deltaY = env2;
      t1 = env3;
      matrix = env4;
      childX = env5;
      break;
    case 8:
      deltaX = env0;
      t8 = env1;
      t10 = env2;
      t1 = env3;
      matrix = env4;
      childX = env5;
      break;
    case 9:
      t12 = env0;
      t1 = env1;
      childX = env2;
      t8 = env3;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = this.hitTestState;
    default:
      var localX, localY, t1, matrix, t2, deltaX, deltaY, t6, t8, childX, t10, t12;
      if (state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && !(t1 == null))
        switch (state0) {
          case 0:
            matrix = t1.get$_transformationMatrix();
            t2 = matrix.get$tx();
          case 2:
            state0 = 0;
            deltaX = $.sub(localX, t2);
            t2 = matrix.get$ty();
          case 3:
            state0 = 0;
            deltaY = $.sub(localY, t2);
            t2 = matrix.get$d();
          case 4:
            state0 = 0;
            t2 = $.mul(t2, deltaX);
            t6 = matrix.get$c();
          case 5:
            state0 = 0;
            t2 = $.sub(t2, $.mul(t6, deltaY));
            t8 = matrix.get$det();
          case 6:
            state0 = 0;
            childX = $.div(t2, t8);
            t8 = matrix.get$a();
          case 7:
            state0 = 0;
            t8 = $.mul(t8, deltaY);
            t10 = matrix.get$b();
          case 8:
            state0 = 0;
            t8 = $.sub(t8, $.mul(t10, deltaX));
            t12 = matrix.get$det();
          case 9:
            state0 = 0;
            if (!(t1.hitTestInput$2(childX, $.div(t8, t12)) == null))
              return this;
        }
      return;
  }
},
 render$1: function(renderState) {
  var t1 = this._currentState;
  if (!(t1 == null))
    renderState.renderDisplayObject$1(t1);
},
 _onMouseEvent$1: function(mouseEvent) {
  var over, down;
  over = $.eqB(this.hitTestInput$2(mouseEvent.get$localX(), mouseEvent.get$localY()), this) && !$.eqB(mouseEvent.get$type(), 'mouseOut');
  down = mouseEvent.get$buttonDown();
  this._currentState = this.upState;
  if (over && down === true)
    this._currentState = this.downState;
  if (over && down !== true)
    this._currentState = this.overState;
},
 get$_onMouseEvent: function() { return new $.BoundClosure(this, '_onMouseEvent$1'); },
 SimpleButton$4: function(upState, overState, downState, hitTestState) {
  this.addEventListener$2('mouseOver', this.get$_onMouseEvent());
  this.addEventListener$2('mouseOut', this.get$_onMouseEvent());
  this.addEventListener$2('mouseDown', this.get$_onMouseEvent());
  this.addEventListener$2('mouseUp', this.get$_onMouseEvent());
  this._currentState = this.upState;
},
 is$SimpleButton: true
};

$$.Mask = {"": ["_lib1_type", "_rectangle", "_circle", "_lib1_points="],
 "super": "Object",
 render$1: function(renderState) {
  var context, t1, i;
  context = renderState.get$context();
  context.beginPath$0();
  switch (this._lib1_type) {
    case 0:
      t1 = this._rectangle;
      context.rect$4(t1.x, t1.y, t1.width, t1.height);
      break;
    case 1:
      t1 = this._circle;
      context.arc$6(t1.get$x(), t1.get$y(), t1.get$radius(), 0, 6.283185307179586, false);
      break;
    case 2:
      context.moveTo$2($.index(this._lib1_points, 0).get$x(), $.index(this._lib1_points, 0).get$y());
      for (i = 1; $.ltB(i, $.get$length(this._lib1_points)); ++i)
        context.lineTo$2($.index(this._lib1_points, i).get$x(), $.index(this._lib1_points, i).get$y());
      break;
  }
  context.clip$0();
},
 Mask$rectangle$4: function(x, y, width, height) {
  this._lib1_type = 0;
  this._rectangle = $.Rectangle$(x, y, width, height);
}
};

$$.DisplayObjectEvents = {"": ["_eventDispatcher"],
 "super": "Events"
};

$$.DisplayObjectContainerEvents = {"": ["_eventDispatcher"],
 "super": "InteractiveObjectEvents"
};

$$.InteractiveObjectEvents = {"": ["_eventDispatcher"],
 "super": "DisplayObjectEvents",
 get$mouseOut: function() {
  return this.operator$index$1('mouseOut');
},
 get$mouseMove: function() {
  return this.operator$index$1('mouseMove');
},
 get$mouseDown: function() {
  return this.operator$index$1('mouseDown');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseUp');
},
 get$mouseWheel: function() {
  return this.operator$index$1('mouseWheel');
},
 get$keyUp: function() {
  return this.operator$index$1('keyUp');
},
 get$keyDown: function() {
  return this.operator$index$1('keyDown');
}
};

$$.Gauge = {"": [],
 "super": "DisplayObject",
 get$ratio: function() {
  return this._ratio;
},
 set$ratio: function(value) {
  if ($.ltB(value, 0))
    value = 0;
  this._ratio = $.gtB(value, 1) ? 1 : value;
  this._updateMask$0();
},
 set$bitmapData: function(value) {
  this._bitmapData = value;
  this._updateMask$0();
},
 _updateMask$0: function() {
  var t1, bdWidth, bdHeight, t2;
  t1 = this._bitmapData;
  if (t1 == null) {
    this._clipRectangle.set$left(0);
    this._clipRectangle.set$top(0);
    this._clipRectangle.set$right(0);
    this._clipRectangle.set$bottom(0);
  } else {
    bdWidth = t1.get$width();
    bdHeight = this._bitmapData.get$height();
    switch (this._lib1_direction) {
      case 'DIRECTION_LEFT':
        t1 = this._ratio;
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        t1 = 1 - t1;
        if (typeof bdWidth !== 'number')
          throw $.iae(bdWidth);
        t2 = $.toInt(t1 * bdWidth);
        this._clipRectangle.set$left(t2);
        this._clipRectangle.set$top(0);
        this._clipRectangle.set$right(bdWidth);
        this._clipRectangle.set$bottom(bdHeight);
        break;
      case 'DIRECTION_UP':
        this._clipRectangle.set$left(0);
        t1 = this._ratio;
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        t1 = 1 - t1;
        if (typeof bdHeight !== 'number')
          throw $.iae(bdHeight);
        t2 = $.toInt(t1 * bdHeight);
        this._clipRectangle.set$top(t2);
        this._clipRectangle.set$right(bdWidth);
        this._clipRectangle.set$bottom(bdHeight);
        break;
      case 'DIRECTION_RIGHT':
        this._clipRectangle.set$left(0);
        this._clipRectangle.set$top(0);
        t1 = $.toInt($.mul(this._ratio, bdWidth));
        this._clipRectangle.set$right(t1);
        this._clipRectangle.set$bottom(bdHeight);
        break;
      case 'DIRECTION_DOWN':
        this._clipRectangle.set$left(0);
        this._clipRectangle.set$top(0);
        this._clipRectangle.set$right(bdWidth);
        t1 = $.toInt($.mul(this._ratio, bdHeight));
        this._clipRectangle.set$bottom(t1);
        break;
    }
  }
},
 getBoundsTransformed$2: function(matrix, returnRectangle) {
  var t1, width, height;
  t1 = this._bitmapData;
  if (!(t1 == null)) {
    t1 = t1.get$width();
    if (typeof t1 !== 'number')
      return this.getBoundsTransformed$2$bailout(1, matrix, returnRectangle, t1);
    width = t1;
  } else
    width = 0;
  t1 = this._bitmapData;
  if (!(t1 == null)) {
    t1 = t1.get$height();
    if (typeof t1 !== 'number')
      return this.getBoundsTransformed$2$bailout(2, matrix, returnRectangle, width, t1);
    height = t1;
  } else
    height = 0;
  return $._getBoundsTransformedHelper(matrix, width, height, returnRectangle);
},
 getBoundsTransformed$2$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      matrix = env0;
      returnRectangle = env1;
      t1 = env2;
      break;
    case 2:
      matrix = env0;
      returnRectangle = env1;
      width = env2;
      t1 = env3;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._bitmapData;
    case 1:
      if (state0 === 1 || state0 === 0 && !(t1 == null))
        switch (state0) {
          case 0:
            t1 = t1.get$width();
          case 1:
            state0 = 0;
            width = t1;
        }
      else
        width = 0;
      t1 = this._bitmapData;
    case 2:
      var t1, matrix, returnRectangle, width, height;
      if (state0 === 2 || state0 === 0 && !(t1 == null))
        switch (state0) {
          case 0:
            t1 = t1.get$height();
          case 2:
            state0 = 0;
            height = t1;
        }
      else
        height = 0;
      return $._getBoundsTransformedHelper(matrix, width, height, returnRectangle);
  }
},
 getBoundsTransformed$1: function(matrix) {
  return this.getBoundsTransformed$2(matrix,null)
},
 hitTestInput$2: function(localX, localY) {
  var t1;
  if (typeof localX !== 'number')
    return this.hitTestInput$2$bailout(1, localX, localY);
  if (typeof localY !== 'number')
    return this.hitTestInput$2$bailout(1, localX, localY);
  t1 = this._bitmapData;
  if (!(t1 == null))
    if (localX >= 0)
      if (localY >= 0) {
        t1 = t1.get$width();
        if (typeof t1 !== 'number')
          return this.hitTestInput$2$bailout(2, localX, localY, t1);
        if (localX < t1) {
          t1 = this._bitmapData.get$height();
          if (typeof t1 !== 'number')
            return this.hitTestInput$2$bailout(3, localY, t1);
          t1 = localY < t1;
        } else
          t1 = false;
      } else
        t1 = false;
    else
      t1 = false;
  else
    t1 = false;
  if (t1)
    return this;
  return;
},
 hitTestInput$2$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      localX = env0;
      localY = env1;
      break;
    case 2:
      localX = env0;
      localY = env1;
      t1 = env2;
      break;
    case 3:
      localY = env0;
      t1 = env1;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    default:
      var localX, localY, t1;
      if (state0 === 3 || state0 === 2 || state0 === 0 && !(this._bitmapData == null))
        switch (state0) {
          case 0:
          default:
            if (state0 === 3 || state0 === 2 || state0 === 0 && $.geB(localX, 0))
              switch (state0) {
                case 0:
                default:
                  if (state0 === 3 || state0 === 2 || state0 === 0 && $.geB(localY, 0))
                    switch (state0) {
                      case 0:
                        t1 = this._bitmapData.get$width();
                      case 2:
                        state0 = 0;
                      case 3:
                        if (state0 === 3 || state0 === 0 && $.ltB(localX, t1))
                          switch (state0) {
                            case 0:
                              t1 = this._bitmapData.get$height();
                            case 3:
                              state0 = 0;
                              t1 = $.ltB(localY, t1);
                          }
                        else
                          t1 = false;
                    }
                  else
                    t1 = false;
              }
            else
              t1 = false;
        }
      else
        t1 = false;
      if (t1)
        return this;
      return;
  }
},
 render$1: function(renderState) {
  var t1 = this._bitmapData;
  if (!(t1 == null))
    t1.renderClipped$2(renderState, this._clipRectangle);
},
 Gauge$2: function(bitmapData, direction) {
  if (!$.eqB(direction, 'DIRECTION_UP') && !$.eqB(direction, 'DIRECTION_DOWN') && !$.eqB(direction, 'DIRECTION_LEFT') && !$.eqB(direction, 'DIRECTION_RIGHT'))
    throw $.$$throw($.ArgumentError$('Invalid Gauge direction!'));
  this._lib1_direction = direction;
  this._ratio = 1;
  this._bitmapData = bitmapData;
  this._clipRectangle = $.Rectangle$zero();
  this._updateMask$0();
}
};

$$.TimeGauge = {"": ["_isStarted", "_currentTime", "_totalTime", "_alarms", "_alarmsEnabled", "_lib1_direction", "_ratio", "_bitmapData", "_clipRectangle", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "Gauge",
 advanceTime$1: function(time) {
  var t1, t3;
  if (typeof time !== 'number')
    return this.advanceTime$1$bailout(1, time);
  if (this._isStarted) {
    t1 = this.get$ratio();
    if (typeof t1 !== 'number')
      return this.advanceTime$1$bailout(2, time, t1);
    t1 = t1 > 0;
  } else
    t1 = false;
  if (t1) {
    t1 = this.get$ratio();
    if (typeof t1 !== 'number')
      return this.advanceTime$1$bailout(3, time, t1);
    t3 = this.get$totalTime();
    if (typeof t3 !== 'number')
      return this.advanceTime$1$bailout(4, time, t1, t3);
    this.set$ratio(t1 - time / t3);
    t1 = this.get$ratio();
    if (typeof t1 !== 'number')
      return this.advanceTime$1$bailout(5, t1);
    if (t1 === 0)
      this._isStarted = false;
  }
  return true;
},
 advanceTime$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      time = env0;
      break;
    case 2:
      time = env0;
      t1 = env1;
      break;
    case 3:
      time = env0;
      t1 = env1;
      break;
    case 4:
      time = env0;
      t1 = env1;
      t3 = env2;
      break;
    case 5:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    case 2:
      if (state0 === 2 || state0 === 0 && this._isStarted)
        switch (state0) {
          case 0:
            t1 = this.get$ratio();
          case 2:
            state0 = 0;
            t1 = $.gtB(t1, 0);
        }
      else
        t1 = false;
    default:
      var time, t1, t3;
      if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && t1)
        switch (state0) {
          case 0:
            t1 = this.get$ratio();
          case 3:
            state0 = 0;
            t3 = this.get$totalTime();
          case 4:
            state0 = 0;
            this.set$ratio($.sub(t1, $.div(time, t3)));
            t1 = this.get$ratio();
          case 5:
            state0 = 0;
            if ($.eqB(t1, 0))
              this._isStarted = false;
        }
      return true;
  }
},
 start$0: function() {
  this._isStarted = true;
},
 pause$0: function() {
  this._isStarted = false;
},
 reset$1: function(time) {
  var t1, t2;
  this._isStarted = false;
  time = $.max(time, 0);
  if (!(time === 0)) {
    this._totalTime = time;
    this._alarms = $.HashMapImplementation$();
    t1 = this._alarms;
    t2 = this.get$totalTime();
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    $.indexSet(t1, 'TIME_OUT', 0 / t2);
  }
  this.set$ratio(1);
},
 reset$0: function() {
  return this.reset$1(0)
},
 addAlarm$2: function(name$, restTime) {
  var t1, t2;
  t1 = this._alarms;
  t2 = this.get$totalTime();
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  $.indexSet(t1, name$, restTime / t2);
},
 clearAlarms$0: function() {
  var t1, t2;
  this._alarms = $.HashMapImplementation$();
  t1 = this._alarms;
  t2 = this.get$totalTime();
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  $.indexSet(t1, 'TIME_OUT', 0 / t2);
},
 get$totalTime: function() {
  return this._totalTime;
},
 get$restTime: function() {
  return $.mul(this.get$ratio(), this.get$totalTime());
},
 set$ratio: function(value) {
  var oldRatio = this.get$ratio();
  $.Gauge.prototype.set$ratio.call(this, value);
  if (this._alarmsEnabled)
    $.forEach(this._alarms, new $.TimeGauge_ratio_anon(this, oldRatio));
},
 TimeGauge$3: function(time, bitmapData, direction) {
  if ($.leB(time, 0))
    throw $.$$throw($.ArgumentError$('Time must be greater than zero'));
  this._totalTime = time;
  this.clearAlarms$0();
}
};

$$.Sound = {"": [],
 "super": "Object"
};

$$.SoundChannel = {"": [],
 "super": "EventDispatcher"
};

$$.SoundTransform = {"": ["volume=", "pan", "leftToLeft", "leftToRight", "rightToRight", "rightToLeft"],
 "super": "Object"
};

$$.AudioElementSound = {"": ["_audio?", "_audioPool", "_soundChannels"],
 "super": "Sound",
 get$length: function() {
  return this._audio.get$duration();
},
 play$2: function(loop, soundTransform) {
  if (soundTransform == null)
    soundTransform = $.SoundTransform$(1, 0);
  return $.AudioElementSoundChannel$(this, loop, soundTransform);
},
 play$0: function() {
  return this.play$2(false,null)
},
 _getAudioElement$1: function(soundChannel) {
  var audio;
  if ($.eqB($.get$length(this._audioPool), 0)) {
    audio = this._audio.clone$1(true);
    $.add$1(audio.get$on().get$ended(), this.get$_onAudioEnded());
  } else {
    audio = $.index(this._audioPool, 0);
    $.removeAt$1(this._audioPool, 0);
  }
  $.add$1(this._soundChannels, soundChannel);
  return audio;
},
 _releaseAudioElement$1: function(soundChannel) {
  var audio, index;
  audio = soundChannel._audio;
  index = $.indexOf$1(this._soundChannels, soundChannel);
  $.removeAt$1(this._soundChannels, index);
  $.add$1(this._audioPool, audio);
  if ($.gtB(this._audio.get$currentTime(), 0) && $.eqB(this._audio.get$ended(), false))
    this._audio.set$currentTime(0);
},
 _onAudioEnded$1: function(event$) {
  var audio, i, soundChannel;
  audio = event$.get$target();
  i = 0;
  soundChannel = null;
  while (true) {
    if (!($.ltB(i, $.get$length(this._soundChannels)) && soundChannel == null))
      break;
    soundChannel = $.eqB($.index(this._soundChannels, i).get$_audio(), audio) ? $.index(this._soundChannels, i) : soundChannel;
    ++i;
  }
  if (!(soundChannel == null))
    soundChannel.stop$0();
},
 get$_onAudioEnded: function() { return new $.BoundClosure(this, '_onAudioEnded$1'); },
 AudioElementSound$0: function() {
  this._soundChannels = $._ListImpl_List(null);
  this._audio = $.AudioElement_AudioElement($);
  $.add$1(this._audio.get$on().get$ended(), this.get$_onAudioEnded());
  this._audioPool = $._ListImpl_List(null);
  $.add$1(this._audioPool, this._audio);
  $.add$1($.document().get$body().get$elements(), this._audio);
}
};

$$.AudioElementSoundChannel = {"": ["_audioElementSound", "_audio?", "_loop", "_soundTransform", "_eventListenerLists"],
 "super": "SoundChannel",
 get$soundTransform: function() {
  return this._soundTransform;
},
 set$soundTransform: function(value) {
  var t1, t2;
  this._soundTransform = value;
  t1 = this._audio;
  if (!(t1 == null)) {
    t2 = this._soundTransform;
    t1.set$volume(!(t2 == null) ? t2.get$volume() : 1);
  }
},
 stop$0: function() {
  var t1 = this._audio;
  if (!(t1 == null)) {
    if ($.eqB(t1.get$ended(), false))
      this._audio.pause$0();
    this._audioElementSound._releaseAudioElement$1(this);
    this._audio = null;
  }
},
 AudioElementSoundChannel$3: function(audioElementSound, loop, soundTransform) {
  var t1;
  this._audioElementSound = audioElementSound;
  this._loop = loop;
  this._soundTransform = soundTransform;
  this._audio = audioElementSound._getAudioElement$1(this);
  t1 = this._loop;
  this._audio.set$loop(t1);
  this.set$soundTransform(soundTransform);
  this._audio.play$0();
}
};

$$.WebAudioApiSound = {"": ["_lib1_buffer="],
 "super": "Sound",
 get$length: function() {
  return this._lib1_buffer.get$duration();
},
 play$2: function(loop, soundTransform) {
  if (soundTransform == null)
    soundTransform = $.SoundTransform$(1, 0);
  return $.WebAudioApiSoundChannel$(this, loop, soundTransform);
},
 play$0: function() {
  return this.play$2(false,null)
},
 WebAudioApiSound$0: function() {
  if ($.SoundMixer__audioContext() == null)
    throw $.$$throw($.UnsupportedError$('This browser does not support Web Audio API.'));
}
};

$$.WebAudioApiSoundChannel = {"": ["_webAudioApiSound", "_soundTransform", "_loop", "_gainNode", "_sourceNode", "_eventListenerLists"],
 "super": "SoundChannel",
 get$soundTransform: function() {
  return this._soundTransform;
},
 set$soundTransform: function(value) {
  var t1;
  this._soundTransform = value;
  t1 = this._soundTransform;
  t1 = !(t1 == null) ? $.pow(t1.get$volume(), 2) : 1;
  this._gainNode.get$gain().set$value(t1);
},
 stop$0: function() {
  this._sourceNode.stop$1(0);
},
 WebAudioApiSoundChannel$3: function(webAudioApiSound, loop, soundTransform) {
  var context, t1;
  this._webAudioApiSound = webAudioApiSound;
  this._loop = loop;
  this._soundTransform = soundTransform;
  context = $.SoundMixer__audioContext();
  this._gainNode = context.createGain$0();
  this._gainNode.connect$3(context.get$destination(), 0, 0);
  t1 = this._soundTransform;
  t1 = !(t1 == null) ? $.pow(t1.get$volume(), 2) : 1;
  this._gainNode.get$gain().set$value(t1);
  this._sourceNode = context.createBufferSource$0();
  t1 = this._webAudioApiSound.get$_lib1_buffer();
  this._sourceNode.set$buffer(t1);
  this._sourceNode.set$loop(loop);
  this._sourceNode.connect$3(this._gainNode, 0, 0);
  this._sourceNode.start$1(0);
}
};

$$.MockSound = {"": [],
 "super": "Sound",
 get$length: function() {
  return (0/0);
},
 play$2: function(loop, soundTransform) {
  if (soundTransform == null)
    soundTransform = $.SoundTransform$(1, 0);
  return $.MockSoundChannel$(this, loop, soundTransform);
},
 play$0: function() {
  return this.play$2(false,null)
}
};

$$.MockSoundChannel = {"": ["_loop", "_soundTransform", "_eventListenerLists"],
 "super": "SoundChannel",
 get$soundTransform: function() {
  return this._soundTransform;
},
 set$soundTransform: function(value) {
  this._soundTransform = value;
},
 stop$0: function() {
},
 MockSoundChannel$3: function(mockSound, loop, soundTransform) {
  this._loop = loop;
  this._soundTransform = soundTransform;
}
};

$$.TextField = {"": ["_text", "_textColor", "_defaultTextFormat", "_autoSize", "_gridFitType", "_lib1_type", "_wordWrap", "_background", "_backgroundColor", "_border", "_borderColor", "_textWidth", "_textHeight", "_linesText", "_linesMetrics", "_canvasRefreshPending", "_canvasWidth", "_canvasHeight", "_canvas", "_context", "doubleClickEnabled", "mouseEnabled", "tabEnabled", "tabIndex", "_x", "_y", "_pivotX", "_pivotY", "_scaleX", "_scaleY", "_rotation", "_transformationMatrixPrivate", "_transformationMatrixRefresh", "_alpha", "_visible", "_name", "_lib1_parent", "mask", "_tmpMatrix", "_tmpMatrixIdentity", "_eventListenerLists"],
 "super": "InteractiveObject",
 get$type: function() {
  return this._lib1_type;
},
 get$width: function() {
  return this._canvasWidth;
},
 get$height: function() {
  return this._canvasHeight;
},
 set$text: function(value) {
  this._text = value;
  this._canvasRefreshPending = true;
},
 set$defaultTextFormat: function(value) {
  this._defaultTextFormat = value;
  this._textColor = this._defaultTextFormat.get$color();
  this._canvasRefreshPending = true;
},
 set$wordWrap: function(value) {
  this._wordWrap = value;
  this._canvasRefreshPending = true;
},
 set$width: function(value) {
  this._canvasWidth = value;
  this._canvasRefreshPending = true;
},
 set$height: function(value) {
  this._canvasHeight = value;
  this._canvasRefreshPending = true;
},
 get$textWidth: function() {
  this._canvasRefresh$0();
  return this._textWidth;
},
 get$textHeight: function() {
  this._canvasRefresh$0();
  return this._textHeight;
},
 getBoundsTransformed$2: function(matrix, returnRectangle) {
  return $._getBoundsTransformedHelper(matrix, this._canvasWidth, this._canvasHeight, returnRectangle);
},
 getBoundsTransformed$1: function(matrix) {
  return this.getBoundsTransformed$2(matrix,null)
},
 hitTestInput$2: function(localX, localY) {
  var t1;
  if (typeof localX !== 'number')
    return this.hitTestInput$2$bailout(1, localX, localY);
  if (typeof localY !== 'number')
    return this.hitTestInput$2$bailout(1, localX, localY);
  if (localX >= 0)
    if (localY >= 0) {
      t1 = this._canvasWidth;
      if (typeof t1 !== 'number')
        return this.hitTestInput$2$bailout(2, localX, localY, t1);
      if (localX < t1) {
        t1 = this._canvasHeight;
        if (typeof t1 !== 'number')
          return this.hitTestInput$2$bailout(3, localY, t1);
        t1 = localY < t1;
      } else
        t1 = false;
    } else
      t1 = false;
  else
    t1 = false;
  if (t1)
    return this;
  return;
},
 hitTestInput$2$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      localX = env0;
      localY = env1;
      break;
    case 2:
      localX = env0;
      localY = env1;
      t1 = env2;
      break;
    case 3:
      localY = env0;
      t1 = env1;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    default:
      var localX, localY, t1;
      if (state0 === 3 || state0 === 2 || state0 === 0 && $.geB(localX, 0))
        switch (state0) {
          case 0:
          default:
            if (state0 === 3 || state0 === 2 || state0 === 0 && $.geB(localY, 0))
              switch (state0) {
                case 0:
                  t1 = this._canvasWidth;
                case 2:
                  state0 = 0;
                case 3:
                  if (state0 === 3 || state0 === 0 && $.ltB(localX, t1))
                    switch (state0) {
                      case 0:
                        t1 = this._canvasHeight;
                      case 3:
                        state0 = 0;
                        t1 = $.ltB(localY, t1);
                    }
                  else
                    t1 = false;
              }
            else
              t1 = false;
        }
      else
        t1 = false;
      if (t1)
        return this;
      return;
  }
},
 render$1: function(renderState) {
  this._canvasRefresh$0();
  renderState._context.drawImage$3(this._canvas, 0, 0);
},
 _processTextLines$0: function() {
  var lineBuffer, t1, line, previousLength, word, t2, metrics, offsetX, textLineMetrics, t3;
  $.clear(this._linesText);
  $.clear(this._linesMetrics);
  if ($.eqB(this._wordWrap, false))
    this._linesText.push(this._text);
  else {
    lineBuffer = $.StringBuffer_StringBuffer('');
    for (t1 = $.iterator($.split(this._text, ' ')), line = null, previousLength = null; t1.get$hasNext() === true;) {
      word = t1.next$0();
      previousLength = $.get$length(lineBuffer);
      $.add$1(lineBuffer, $.gtB(previousLength, 0) ? ' ' + $.S(word) : word);
      line = $.toString(lineBuffer);
      if ($.gtB(this._context.measureText$1(line).get$width(), this._canvasWidth)) {
        if ($.gtB(previousLength, 0))
          line = $.substring$2(line, 0, previousLength);
        else
          word = '';
        this._linesText.push(line);
        $.clear(lineBuffer);
        $.add$1(lineBuffer, word);
      }
    }
    if ($.eqB($.get$isEmpty(lineBuffer), false))
      this._linesText.push($.toString(lineBuffer));
  }
  this._textWidth = 0;
  this._textHeight = 0;
  for (t1 = $.iterator(this._linesText); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    metrics = this._context.measureText$1(t2);
    offsetX = $.eqB(this._defaultTextFormat.get$align(), 'center') || $.eqB(this._defaultTextFormat.get$align(), 'justify') ? $.div($.sub(this._canvasWidth, metrics.get$width()), 2) : 0;
    if ($.eqB(this._defaultTextFormat.get$align(), 'right') || $.eqB(this._defaultTextFormat.get$align(), 'end'))
      offsetX = $.sub(this._canvasWidth, metrics.get$width());
    textLineMetrics = $.TextLineMetrics$(offsetX, metrics.get$width(), this._defaultTextFormat.get$size(), 0, 0, 0);
    this._linesMetrics.push(textLineMetrics);
    this._textWidth = $.max(this._textWidth, textLineMetrics.width);
    t2 = this._textHeight;
    t3 = textLineMetrics.height;
    if (typeof t3 !== 'number')
      throw $.iae(t3);
    this._textHeight = t2 + t3;
  }
},
 _canvasRefresh$0: function() {
  var canvasWidthInt, canvasHeightInt, fontStyle, t1, i, offsetY, metrics, t2;
  if (this._canvasRefreshPending) {
    this._canvasRefreshPending = false;
    canvasWidthInt = $.toInt($.ceil(this._canvasWidth));
    canvasHeightInt = $.toInt($.ceil(this._canvasHeight));
    if (this._canvas == null) {
      this._canvas = $.CanvasElement_CanvasElement(canvasHeightInt, canvasWidthInt);
      this._context = this._canvas.get$context2d();
    }
    if (!$.eqB(this._canvas.get$width(), canvasWidthInt))
      this._canvas.set$width(canvasWidthInt);
    if (!$.eqB(this._canvas.get$height(), canvasHeightInt))
      this._canvas.set$height(canvasHeightInt);
    fontStyle = $.StringBuffer_StringBuffer('');
    $.add$1(fontStyle, this._defaultTextFormat.get$italic() === true ? 'italic ' : 'normal ');
    $.add$1(fontStyle, 'normal ');
    $.add$1(fontStyle, this._defaultTextFormat.get$bold() === true ? 'bold ' : 'normal ');
    $.add$1(fontStyle, $.S(this._defaultTextFormat.get$size()) + 'px ');
    $.add$1(fontStyle, $.S(this._defaultTextFormat.get$font()) + ',sans-serif');
    t1 = $.toString(fontStyle);
    this._context.set$font(t1);
    this._context.set$textAlign('start');
    this._context.set$textBaseline('top');
    t1 = $._color2rgb(this._textColor);
    this._context.set$fillStyle(t1);
    this._processTextLines$0();
    if (this._background) {
      t1 = $._color2rgb(this._backgroundColor);
      this._context.set$fillStyle(t1);
      this._context.fillRect$4(0, 0, this._canvasWidth, this._canvasHeight);
    } else
      this._context.clearRect$4(0, 0, this._canvasWidth, this._canvasHeight);
    for (i = 0, offsetY = 0; i < this._linesText.length; ++i) {
      t1 = this._linesMetrics;
      if (i >= t1.length)
        throw $.ioore(i);
      metrics = t1[i];
      t1 = $._color2rgb(this._textColor);
      this._context.set$fillStyle(t1);
      t1 = this._context;
      t2 = this._linesText;
      if (i >= t2.length)
        throw $.ioore(i);
      t1.fillText$3(t2[i], metrics.get$x(), offsetY);
      t1 = metrics.get$height();
      if (typeof t1 !== 'number')
        throw $.iae(t1);
      offsetY += t1;
    }
    if (this._border) {
      t1 = $._color2rgb(this._borderColor);
      this._context.set$strokeStyle(t1);
      this._context.set$lineWidth(1);
      this._context.strokeRect$4(0, 0, this._canvasWidth, this._canvasHeight);
    }
  }
},
 TextField$0: function() {
  this._defaultTextFormat = $.TextFormat$('Arial', 12, 0, 'left', false, 0, false, 0, 0, 0, false);
  this._linesText = $._ListImpl_List(null);
  this._linesMetrics = $._ListImpl_List(null);
}
};

$$.TextFormat = {"": ["font=", "size?", "color=", "bold?", "italic?", "underline", "align?", "leftMargin", "rightMargin", "indent", "leading", "letterSpacing", "blockIndent", "bullet", "kerning"],
 "super": "Object"
};

$$.TextLineMetrics = {"": ["ascent", "descent", "height=", "leading", "width=", "x="],
 "super": "Object"
};

$$.Resource = {"": ["_images?", "_sounds?", "_textureAtlases?", "_texts", "_loader", "_loaderPendingCount=", "_loaderErrorCount="],
 "super": "Object",
 addImage$2: function(name$, url) {
  var future = $.BitmapData_loadImage(url);
  this._loaderPendingCount = $.add(this._loaderPendingCount, 1);
  future.then$1(new $.Resource_addImage_anon(this, name$));
  future.handleException$1(new $.Resource_addImage_anon0(this));
},
 addSound$2: function(name$, url) {
  var future = $.Sound_loadAudio(url);
  this._loaderPendingCount = $.add(this._loaderPendingCount, 1);
  future.then$1(new $.Resource_addSound_anon(this, name$));
  future.handleException$1(new $.Resource_addSound_anon0(this));
},
 addTextureAtlas$3: function(name$, url, textureAtlasFormat) {
  var future = $.TextureAtlas_load(url, textureAtlasFormat);
  this._loaderPendingCount = $.add(this._loaderPendingCount, 1);
  future.then$1(new $.Resource_addTextureAtlas_anon(this, name$));
  future.handleException$1(new $.Resource_addTextureAtlas_anon0(this));
},
 addText$2: function(name$, text) {
  this._texts.operator$indexSet$2(name$, text);
},
 load$0: function() {
  this._loader = $.Completer_Completer();
  this._loaderCheck$0();
  return this._loader.get$future();
},
 get$load: function() { return new $.BoundClosure0(this, 'load$0'); },
 getBitmapData$1: function(name$) {
  var t1 = this._images.containsKey$1(name$);
  if (typeof t1 !== 'boolean')
    return this.getBitmapData$1$bailout(1, name$, t1);
  if (!t1)
    throw $.$$throw($.ArgumentError$('Resource not found: \'' + $.S(name$) + '\''));
  return this._images.operator$index$1(name$);
},
 getBitmapData$1$bailout: function(state0, name$, t1) {
  if ($.eqB(t1, false))
    throw $.$$throw($.ArgumentError$('Resource not found: \'' + $.S(name$) + '\''));
  return this._images.operator$index$1(name$);
},
 getSound$1: function(name$) {
  var t1 = this._sounds.containsKey$1(name$);
  if (typeof t1 !== 'boolean')
    return this.getSound$1$bailout(1, name$, t1);
  if (!t1)
    throw $.$$throw($.ArgumentError$('Resource not found: \'' + name$ + '\''));
  return this._sounds.operator$index$1(name$);
},
 getSound$1$bailout: function(state0, name$, t1) {
  if ($.eqB(t1, false))
    throw $.$$throw($.ArgumentError$('Resource not found: \'' + name$ + '\''));
  return this._sounds.operator$index$1(name$);
},
 getTextureAtlas$1: function(name$) {
  if ($.eqB(this._textureAtlases.containsKey$1(name$), false))
    throw $.$$throw($.ArgumentError$('Resource not found: \'' + name$ + '\''));
  return this._textureAtlases.operator$index$1(name$);
},
 getText$1: function(name$) {
  if ($.eqB(this._texts.containsKey$1(name$), false))
    return '[[' + name$ + ']]';
  return this._texts.operator$index$1(name$);
},
 _loaderCheck$0: function() {
  var t1, t2;
  if (!(this._loader == null) && $.eqB(this._loaderPendingCount, 0)) {
    t1 = $.eqB(this._loaderErrorCount, 0);
    t2 = this._loader;
    if (t1)
      t2.complete$1(this);
    else
      t2.completeException$1(this);
  }
},
 Resource$0: function() {
  this._images = $.HashMapImplementation$();
  this._sounds = $.HashMapImplementation$();
  this._textureAtlases = $.HashMapImplementation$();
  this._texts = $.HashMapImplementation$();
  this._loader = null;
  this._loaderPendingCount = 0;
  this._loaderErrorCount = 0;
}
};

$$.TextureAtlas = {"": ["_imageElement?", "_frames?"],
 "super": "Object",
 get$imageElement: function() {
  return this._imageElement;
},
 getBitmapData$1: function(name$) {
  var bitmapData, i, t1, t2;
  bitmapData = null;
  i = 0;
  while (true) {
    t1 = this._frames;
    t2 = t1.length;
    if (!(i < t2 && bitmapData == null))
      break;
    if (i >= t2)
      throw $.ioore(i);
    if ($.eqB(t1[i].get$name(), name$)) {
      t1 = this._frames;
      if (i >= t1.length)
        throw $.ioore(i);
      bitmapData = $.BitmapData$fromTextureAtlasFrame(t1[i]);
    }
    ++i;
  }
  if (bitmapData == null)
    throw $.$$throw($.ArgumentError$('TextureAtlasFrame not found: \'' + $.S(name$) + '\''));
  return bitmapData;
},
 TextureAtlas$0: function() {
  this._imageElement = $.ImageElement_ImageElement($, $, $);
  this._frames = $._ListImpl_List(null);
}
};

$$.TextureAtlasFrame = {"": ["_name", "_textureAtlas", "_frameX", "_frameY", "_frameWidth", "_frameHeight", "_offsetX", "_offsetY", "_originalWidth", "_originalHeight", "_rotated"],
 "super": "Object",
 get$textureAtlas: function() {
  return this._textureAtlas;
},
 get$name: function() {
  return this._name;
},
 get$frameX: function() {
  return this._frameX;
},
 get$frameY: function() {
  return this._frameY;
},
 get$frameWidth: function() {
  return this._frameWidth;
},
 get$frameHeight: function() {
  return this._frameHeight;
},
 get$offsetX: function() {
  return this._offsetX;
},
 get$offsetY: function() {
  return this._offsetY;
},
 get$originalWidth: function() {
  return this._originalWidth;
},
 get$originalHeight: function() {
  return this._originalHeight;
},
 get$rotated: function() {
  return this._rotated;
},
 TextureAtlasFrame$2: function(name$, textureAtlas) {
  this._name = name$;
  this._textureAtlas = textureAtlas;
}
};

$$.main_anon = {"": [],
 "super": "Closure",
 call$1: function(bitmapData) {
  var t1;
  $.loadingBitmap = $.Bitmap$(bitmapData, 'auto');
  $.loadingBitmap.set$pivotX(20);
  $.loadingBitmap.set$pivotY(20);
  $.loadingBitmap.set$x(400);
  $.loadingBitmap.set$y(270);
  $.stageForeground.addChild$1($.loadingBitmap);
  $.loadingBitmapTween = $.Tween$($.loadingBitmap, 100, $.Transitions_linear);
  $.loadingBitmapTween.animate$2('rotation', 628.3185307179587);
  $.add$1($.renderJuggler, $.loadingBitmapTween);
  $.loadingTextField = $.TextField$();
  t1 = $.TextFormat$('Arial', 20, 10526880, 'left', true, 0, false, 0, 0, 0, false);
  $.loadingTextField.set$defaultTextFormat(t1);
  $.loadingTextField.set$width(240);
  $.loadingTextField.set$height(40);
  $.loadingTextField.set$text('... loading ...');
  t1 = $.div($.loadingTextField.get$textWidth(), 2);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  t1 = 400 - t1;
  $.loadingTextField.set$x(t1);
  $.loadingTextField.set$y(320);
  t1 = $.loadingTextField;
  t1.set$mouseEnabled(false);
  $.stageForeground.addChild$1(t1);
  $.loadGame();
}
};

$$.BitmapData_loadImage_anon = {"": ["image_1", "completer_0"],
 "super": "Closure",
 call$1: function(event$) {
  return this.completer_0.complete$1($.BitmapData$fromImageElement(this.image_1));
}
};

$$.BitmapData_loadImage_anon0 = {"": ["completer_2"],
 "super": "Closure",
 call$1: function(event$) {
  return this.completer_2.completeException$1('Failed to load image.');
}
};

$$.Maps__emitMap_anon = {"": ["box_0", "visiting_3", "result_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_1 !== true)
    $.add$1(this.result_2, ', ');
  t1.first_1 = false;
  t1 = this.result_2;
  t2 = this.visiting_3;
  $.Collections__emitObject(k, t1, t2);
  $.add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, length$, i, t2;
  t1 = this.values_2;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout(1, value, t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_3, null);
  return length$;
},
 call$1$bailout: function(state0, value, t1) {
  var length$, i, t2;
  length$ = $.get$length(t1);
  for (i = 0; $.ltB(i, length$); ++i) {
    t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_3, null);
  return length$;
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": ["readSlot_8", "findSlot_7", "writeSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, j, t4;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$('structured clone of Date'));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
  if (typeof e === 'object' && e !== null && e.is$_FileImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$File())
    throw $.$$throw($.UnimplementedError$('structured clone of File'));
  if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    throw $.$$throw($.UnimplementedError$('structured clone of Blob'));
  if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    throw $.$$throw($.UnimplementedError$('structured clone of ImageData'));
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    throw $.$$throw($.UnimplementedError$('structured clone of ArrayBuffer'));
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    throw $.$$throw($.UnimplementedError$('structured clone of ArrayBufferView'));
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_7.call$1(e);
    t1.copy_1 = this.readSlot_8.call$1(slot);
    t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_6.call$2(slot, t1.copy_1);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    length$ = e.length;
    slot = this.findSlot_7.call$1(e);
    t2 = this.readSlot_8;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_6.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_6;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy = t2.call$1(slot);
          if (true === copy) {
            copy = new Array(length$);
            t3.call$2(slot, copy);
          }
          if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(2, e, t3, length$, elementCopy, slot, copy, i);
          for (t1 = e.length, t2 = copy.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy[i] = elementCopy;
          ++i;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(3, e, copy, length$, i);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$('structured clone of other type'));
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      e = env0;
      t3 = env1;
      length$ = env2;
      elementCopy = env3;
      slot = env4;
      copy = env5;
      i = env6;
      break;
    case 3:
      e = env0;
      copy = env1;
      length$ = env2;
      i = env3;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$('structured clone of Date'));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
      if (typeof e === 'object' && e !== null && e.is$_FileImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$File())
        throw $.$$throw($.UnimplementedError$('structured clone of File'));
      if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        throw $.$$throw($.UnimplementedError$('structured clone of Blob'));
      if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        throw $.$$throw($.UnimplementedError$('structured clone of ImageData'));
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        throw $.$$throw($.UnimplementedError$('structured clone of ArrayBuffer'));
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        throw $.$$throw($.UnimplementedError$('structured clone of ArrayBufferView'));
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_7.call$1(e);
        t1.copy_1 = this.readSlot_8.call$1(slot);
        t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_6.call$2(slot, t1.copy_1);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
        return t1.copy_1;
      }
    default:
      var t1, slot, t2, e, length$, copy, t3, i, element, elementCopy, j;
      if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            length$ = $.get$length(e);
            slot = this.findSlot_7.call$1(e);
            t2 = this.readSlot_8;
            copy = t2.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_6.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t3 = this.writeSlot_6;
          case 2:
            if (state0 === 2 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t3.call$2(slot, true);
                  i = 0;
                case 2:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          element = $.index(e, i);
                          elementCopy = this.call$1(element);
                        case 2:
                          if (state0 === 2 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy = t2.call$1(slot);
                                if (true === copy) {
                                  copy = new Array(length$);
                                  t3.call$2(slot, copy);
                                }
                              case 2:
                                state0 = 0;
                                for (j = 0; j < i; ++j)
                                  $.indexSet(copy, j, $.index(e, j));
                                $.indexSet(copy, i, elementCopy);
                                ++i;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t3.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 3:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$('structured clone of other type'));
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": ["walk_9", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.invokeClosure_anon = {"": ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"": ["arg1_2", "closure_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_1.call$1(this.arg1_2);
}
};

$$.invokeClosure_anon1 = {"": ["arg1_5", "arg2_4", "closure_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_3.call$2(this.arg1_5, this.arg2_4);
}
};

$$.DoubleLinkedQueue_length__ = {"": ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$.LinkedHashMapImplementation_forEach__ = {"": ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.NoSuchMethodError_toString_anon = {"": ["box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.box_0;
  if ($.gtB(t1.i_2, 0))
    $.add$1(t1.sb_1, ', ');
  $.add$1(t1.sb_1, key);
  $.add$1(t1.sb_1, ': ');
  $.add$1(t1.sb_1, $.NoSuchMethodError_safeToString(value));
  t1.i_2 = $.add(t1.i_2, 1);
}
};

$$._DateImpl_toString_fourDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  var absN, sign;
  absN = $.abs(n);
  sign = $.ltB(n, 0) ? '-' : '';
  if ($.geB(absN, 1000))
    return $.S(n);
  if ($.geB(absN, 100))
    return sign + '0' + $.S(absN);
  if ($.geB(absN, 10))
    return sign + '00' + $.S(absN);
  return sign + '000' + $.S(absN);
}
};

$$._DateImpl_toString_threeDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 100))
    return $.S(n);
  if ($.geB(n, 10))
    return '0' + $.S(n);
  return '00' + $.S(n);
}
};

$$._DateImpl_toString_twoDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 10))
    return $.S(n);
  return '0' + $.S(n);
}
};

$$.loadGame_anon = {"": ["resource_0"],
 "super": "Closure",
 call$1: function(res) {
  var t1, backgroundBitmap, game;
  $.stageForeground.removeChild$1($.loadingBitmap);
  $.stageForeground.removeChild$1($.loadingTextField);
  $.renderJuggler.remove$1($.loadingBitmapTween);
  t1 = this.resource_0;
  $.Grafix_resource = t1;
  $.Sounds_resource = t1;
  $.Texts_resource = t1;
  backgroundBitmap = $.Bitmap$($.Grafix_resource.getBitmapData$1('Background'), 'auto');
  $.stageBackground.addChild$1(backgroundBitmap);
  $.stageBackground.set$renderMode('once');
  game = $.Game$();
  $.stageForeground.addChild$1(game);
  game.start$0();
}
};

$$.Resource_addSound_anon = {"": ["this_1", "name_0"],
 "super": "Closure",
 call$1: function(sound) {
  var t1 = this.this_1;
  $.indexSet(t1.get$_sounds(), this.name_0, sound);
  t1.set$_loaderPendingCount($.sub(t1.get$_loaderPendingCount(), 1));
  t1._loaderCheck$0();
}
};

$$.Resource_addSound_anon0 = {"": ["this_2"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = this.this_2;
  t1.set$_loaderErrorCount($.add(t1.get$_loaderErrorCount(), 1));
  t1.set$_loaderPendingCount($.sub(t1.get$_loaderPendingCount(), 1));
  t1._loaderCheck$0();
}
};

$$.MockSound_loadAudio_anon = {"": ["sound_1", "loadCompleter_0"],
 "super": "Closure",
 call$0: function() {
  return this.loadCompleter_0.complete$1(this.sound_1);
}
};

$$.AudioElementSound_loadAudio_onAudioCanPlayThrough = {"": ["sound_1", "loadCompleter_0"],
 "super": "Closure",
 call$1: function(event$) {
  var t1 = this.loadCompleter_0;
  if ($.eqB(t1.get$future().get$isComplete(), false))
    t1.complete$1(this.sound_1);
}
};

$$.AudioElementSound_loadAudio_onAudioError = {"": ["loadCompleter_2"],
 "super": "Closure",
 call$1: function(event$) {
  var t1 = this.loadCompleter_2;
  if ($.eqB(t1.get$future().get$isComplete(), false))
    t1.completeException$1('Failed to load audio.');
}
};

$$._FilteredElementList__filtered_anon = {"": [],
 "super": "Closure",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
}
};

$$._ChildrenElementList_filter_anon = {"": ["output_1", "f_0"],
 "super": "Closure",
 call$1: function(element) {
  if (this.f_0.call$1(element) === true)
    $.add$1(this.output_1, element);
}
};

$$._FilteredElementList_removeRange_anon = {"": [],
 "super": "Closure",
 call$1: function(el) {
  return el.remove$0();
}
};

$$.WebAudioApiSound_loadAudio_audioBufferLoaded = {"": ["sound_1", "loadCompleter_0"],
 "super": "Closure",
 call$1: function(buffer) {
  var t1, t2;
  t1 = this.sound_1;
  t1.set$_lib1_buffer(buffer);
  t2 = this.loadCompleter_0;
  if ($.eqB(t2.get$future().get$isComplete(), false))
    t2.complete$1(t1);
}
};

$$.WebAudioApiSound_loadAudio_audioBufferError = {"": ["loadCompleter_2"],
 "super": "Closure",
 call$1: function(error) {
  var t1 = this.loadCompleter_2;
  if ($.eqB(t1.get$future().get$isComplete(), false))
    t1.completeException$1('Failed to decode audio.');
}
};

$$.WebAudioApiSound_loadAudio_onRequestLoad = {"": ["audioBufferError_5", "audioBufferLoaded_4", "request_3"],
 "super": "Closure",
 call$1: function(event$) {
  $.SoundMixer__audioContext().decodeAudioData$3(this.request_3.get$response(), this.audioBufferLoaded_4, this.audioBufferError_5);
}
};

$$.WebAudioApiSound_loadAudio_onRequestError = {"": ["loadCompleter_6"],
 "super": "Closure",
 call$1: function(event$) {
  var t1 = this.loadCompleter_6;
  if ($.eqB(t1.get$future().get$isComplete(), false))
    t1.completeException$1('Failed to load audio.');
}
};

$$.Resource_addTextureAtlas_anon = {"": ["this_1", "name_0"],
 "super": "Closure",
 call$1: function(textureAtlas) {
  var t1 = this.this_1;
  $.indexSet(t1.get$_textureAtlases(), this.name_0, textureAtlas);
  t1.set$_loaderPendingCount($.sub(t1.get$_loaderPendingCount(), 1));
  t1._loaderCheck$0();
}
};

$$.Resource_addTextureAtlas_anon0 = {"": ["this_2"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = this.this_2;
  t1.set$_loaderErrorCount($.add(t1.get$_loaderErrorCount(), 1));
  t1.set$_loaderPendingCount($.sub(t1.get$_loaderPendingCount(), 1));
  t1._loaderCheck$0();
}
};

$$.TextureAtlas_load_anon = {"": ["url_3", "textureAtlas_2", "completer_1", "request_0"],
 "super": "Closure",
 call$1: function(event$) {
  var t1, t2, data, frames$, meta, t3, t4;
  t1 = this.textureAtlas_2;
  t2 = new $.TextureAtlas_load_parseFrame(t1);
  data = $.JSON_parse(this.request_0.get$responseText());
  frames$ = $.index(data, 'frames');
  meta = $.index(data, 'meta');
  if (typeof frames$ === 'object' && frames$ !== null && (frames$.constructor === Array || frames$.is$List())) {
    for (t3 = $.iterator(frames$); t3.get$hasNext() === true;) {
      t4 = t3.next$0();
      t2.call$2($.index(t4, 'filename'), t4);
    }
    frames$ = frames$;
  }
  if (typeof frames$ === 'object' && frames$ !== null && frames$.is$Map())
    for (t3 = $.iterator(frames$.getKeys$0()); t3.get$hasNext() === true;) {
      t4 = t3.next$0();
      t2.call$2(t4, frames$.operator$index$1(t4));
    }
  t2 = t1.get$_imageElement().get$on().get$load();
  t3 = this.completer_1;
  $.add$1(t2, new $.TextureAtlas_load_anon1(t1, t3));
  $.add$1(t1.get$_imageElement().get$on().get$error(), new $.TextureAtlas_load_anon2(t3));
  t2 = $.TextureAtlas__replaceFilename(this.url_3, $.index(meta, 'image'));
  t1.get$_imageElement().set$src(t2);
}
};

$$.TextureAtlas_load_parseFrame = {"": ["textureAtlas_4"],
 "super": "Closure",
 call$2: function(filename, frame) {
  var frameName, t1, taf;
  frameName = $.TextureAtlas__getFilenameWithoutExtension(filename);
  t1 = this.textureAtlas_4;
  taf = $.TextureAtlasFrame$(frameName, t1);
  taf._frameX = $.toInt($.index($.index(frame, 'frame'), 'x'));
  taf._frameY = $.toInt($.index($.index(frame, 'frame'), 'y'));
  taf._frameWidth = $.toInt($.index($.index(frame, 'frame'), 'w'));
  taf._frameHeight = $.toInt($.index($.index(frame, 'frame'), 'h'));
  taf._offsetX = $.toInt($.index($.index(frame, 'spriteSourceSize'), 'x'));
  taf._offsetY = $.toInt($.index($.index(frame, 'spriteSourceSize'), 'y'));
  taf._originalWidth = $.toInt($.index($.index(frame, 'sourceSize'), 'w'));
  taf._originalHeight = $.toInt($.index($.index(frame, 'sourceSize'), 'h'));
  taf._rotated = $.boolTypeCast($.index(frame, 'rotated'));
  $.add$1(t1.get$_frames(), taf);
}
};

$$.TextureAtlas_load_anon1 = {"": ["textureAtlas_6", "completer_5"],
 "super": "Closure",
 call$1: function(e) {
  return this.completer_5.complete$1(this.textureAtlas_6);
}
};

$$.TextureAtlas_load_anon2 = {"": ["completer_7"],
 "super": "Closure",
 call$1: function(e) {
  return this.completer_7.completeException$1('Failed to load image.');
}
};

$$.TextureAtlas_load_anon0 = {"": ["completer_8"],
 "super": "Closure",
 call$1: function(event$) {
  return this.completer_8.completeException$1('Failed to load json file.');
}
};

$$.Resource_addImage_anon = {"": ["this_1", "name_0"],
 "super": "Closure",
 call$1: function(bitmapData) {
  var t1 = this.this_1;
  $.indexSet(t1.get$_images(), this.name_0, bitmapData);
  t1.set$_loaderPendingCount($.sub(t1.get$_loaderPendingCount(), 1));
  t1._loaderCheck$0();
}
};

$$.Resource_addImage_anon0 = {"": ["this_2"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = this.this_2;
  t1.set$_loaderErrorCount($.add(t1.get$_loaderErrorCount(), 1));
  t1.set$_loaderPendingCount($.sub(t1.get$_loaderPendingCount(), 1));
  t1._loaderCheck$0();
}
};

$$.Game_start_anon = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  return this.this_0.get$_head().nod$1(21);
}
};

$$.Game_start_anon0 = {"": ["this_1"],
 "super": "Closure",
 call$0: function() {
  return $.renderJuggler.delayCall$2(new $.Game_start_anon1(this.this_1), 0.5);
}
};

$$.Game_start_anon1 = {"": ["this_2"],
 "super": "Closure",
 call$0: function() {
  return this.this_2._nextLevel$0();
}
};

$$.MessageBox_show_anon = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = $.renderJuggler;
  t2 = this.this_0;
  t1 = t1.delayCall$2(t2.get$_hide(), 10);
  t2.set$_showTimeout(t1);
  return t1;
}
};

$$.MessageBox__hide_anon = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_0;
  return t1.get$parent().removeChild$1(t1);
}
};

$$.Game__nextLevel_anon = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  var t1, transition;
  t1 = this.this_0;
  t1.get$_board().set$mouseEnabled(true);
  t1.get$_timeGauge().start$0();
  if (!(t1.get$_introSound() == null)) {
    transition = $.Transition$(1, 0, 4, $.Transitions_linear);
    transition.set$onUpdate(new $.Game__nextLevel_anon0(t1));
    transition.set$onComplete(new $.Game__nextLevel_anon1(t1));
    $.add$1($.renderJuggler, transition);
    t1.set$_introSound(null);
  }
}
};

$$.Game__nextLevel_anon0 = {"": ["this_1"],
 "super": "Closure",
 call$1: function(volume) {
  var t1, t2;
  t1 = this.this_1;
  t1.get$_introSoundChannel().get$soundTransform().set$volume(volume);
  t2 = t1.get$_introSoundChannel().get$soundTransform();
  t1.get$_introSoundChannel().set$soundTransform(t2);
}
};

$$.Game__nextLevel_anon1 = {"": ["this_2"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_2;
  t1.get$_introSoundChannel().stop$0();
  t1.get$_head().nodStop$0();
}
};

$$.anon = {"": ["field_0"],
 "super": "Closure",
 call$1: function(value) {
  this.field_0.set$y(value);
}
};

$$.anon0 = {"": ["completeCounter_2", "this_1"],
 "super": "Closure",
 call$0: function() {
  if ($.eqB(this.completeCounter_2.increment$0(), 100)) {
    var t1 = this.this_1;
    t1._updateLinks$0();
    t1.set$_animationRunning(false);
    $.clear(t1.get$_mouseBuffer());
    t1.set$mask(null);
  }
}
};

$$.Board_shuffleField_anon = {"": ["field_0"],
 "super": "Closure",
 call$1: function(value) {
  this.field_0.set$sinScale(value);
}
};

$$.Board_shuffleField_anon0 = {"": ["this_2", "field_1"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = this.field_1;
  t2 = this.this_2;
  t1.updateDisplayObjects$3(t2.get$_chainLayer(), t2.get$_linkLayer(), t2.get$_specialLayer());
}
};

$$.Board_shuffleField_anon1 = {"": ["this_4", "completeCounter_3"],
 "super": "Closure",
 call$0: function() {
  if ($.eqB(this.completeCounter_3.increment$0(), 100)) {
    var t1 = this.this_4;
    t1._updateLinks$0();
    t1._processCombinations$0();
    $.clear(t1.get$_mouseBuffer());
  }
}
};

$$.Board__processCombinationsExplosion_anon = {"": ["py_4", "px_3", "animationCounter_2", "field_1", "this_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, explosion;
  t1 = this.field_1;
  t1.set$empty(true);
  t2 = this.this_0;
  t1.updateDisplayObjects$3(t2.get$_chainLayer(), t2.get$_linkLayer(), t2.get$_specialLayer());
  $.Sounds_resource.getSound$1('ChainBlast').play$0();
  explosion = $.Explosion$(t1.get$color(), t1.get$direction());
  explosion.set$x($.mul(this.px_3, 50));
  explosion.set$y($.mul(this.py_4, 50));
  $.add$1($.renderJuggler, explosion);
  t2.get$_explosionLayer().addChild$1(explosion);
  t2.processSpecial$1(t1);
  if ($.eqB(this.animationCounter_2.decrement$0(), 0))
    t2._fillEmptyFields$0();
}
};

$$.Board__fillEmptyFields_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(value) {
  this.box_0.fieldTarget_1.set$y(value);
}
};

$$.Board__fillEmptyFields_anon0 = {"": ["animationCounter_3", "this_2"],
 "super": "Closure",
 call$0: function() {
  if ($.eqB(this.animationCounter_3.decrement$0(), 0)) {
    var t1 = this.this_2;
    t1._updateLinks$0();
    t1._processCombinations$0();
    t1._checkMouseBuffer$0();
  }
}
};

$$.anon1 = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return $.add$1($.renderJuggler, this.this_0);
}
};

$$.anon2 = {"": ["this_1"],
 "super": "Closure",
 call$1: function(e) {
  return $.renderJuggler.remove$1(this.this_1);
}
};

$$.anon3 = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return $.add$1($.renderJuggler, this.this_0);
}
};

$$.anon4 = {"": ["this_1"],
 "super": "Closure",
 call$1: function(e) {
  return $.renderJuggler.remove$1(this.this_1);
}
};

$$.anon5 = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return $.add$1($.renderJuggler, this.this_0);
}
};

$$.anon6 = {"": ["this_1"],
 "super": "Closure",
 call$1: function(e) {
  return $.renderJuggler.remove$1(this.this_1);
}
};

$$.Board_processSpecial_anon = {"": ["this_1", "special_0"],
 "super": "Closure",
 call$0: function() {
  return this.this_1.removeChild$1(this.special_0);
}
};

$$.Board_processSpecial_anon0 = {"": ["lockNumber_3", "this_2"],
 "super": "Closure",
 call$0: function() {
  return this.this_2.openLock$1(this.lockNumber_3);
}
};

$$.Board_openLock_anon = {"": ["lockNumber_3", "box_0", "this_2"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_2;
  return $.index(t1.get$_locks(), $.mod($.add(this.box_0.i_1, this.lockNumber_3), $.get$length(t1.get$_locks()))).showHappy$0();
}
};

$$.Board_openLock_anon0 = {"": ["this_4"],
 "super": "Closure",
 call$0: function() {
  return this.this_4.dispatchEvent$1($.BoardEvent$('Unlocked', $.makeLiteralMap(['Type', 'All', 'Position', $.Point$(280, 550)]), false));
}
};

$$._ElementImpl_rect_anon = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  return $._ElementRectImpl$(this.this_0);
}
};

$$._MutationObserverImpl_observe_anon = {"": ["parsedOptions_0"],
 "super": "Closure",
 call$2: function(k, v) {
  if ($.CTC8.containsKey$1(k) === true)
    this.parsedOptions_0[k] = true === v;
  else if ($.eqB(k, 'attributeFilter'))
    this.parsedOptions_0[k] = v;
  else
    throw $.$$throw($.ArgumentError$('Illegal MutationObserver.observe option \'' + $.S(k) + '\''));
}
};

$$._MutationObserverImpl_observe_override = {"": ["parsedOptions_1"],
 "super": "Closure",
 call$2: function(key, value) {
  if (!(value == null))
    this.parsedOptions_1[key] = value;
}
};

$$.ConstantMap_forEach_anon = {"": ["f_1", "this_0"],
 "super": "Closure",
 call$1: function(key) {
  return this.f_1.call$2(key, $.index(this.this_0, key));
}
};

$$._DocumentFragmentImpl_rect_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.CTC10;
}
};

$$.Lock_showHappy_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1, t2;
  t1 = 1 + 0.2 * $.sin($.mul($.mul(value, 4), 3.141592653589793));
  t2 = this.this_0;
  t2.set$scaleY(t1);
  t2.set$scaleX(t1);
}
};

$$.Lock_showHappy_anon0 = {"": ["this_1"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, t3;
  t1 = this.this_1;
  t2 = t1.get$_locked();
  t3 = t1.get$_lockBitmapDatas();
  t2 = $.index(t3, t2 === true ? 0 : 4);
  t1.get$_bitmap().set$bitmapData(t2);
  return;
}
};

$$.Game__onBoardEventTimeouted_anon = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, tween;
  t1 = $.renderJuggler;
  t2 = this.this_0;
  t1.delayCall$2(new $.Game__onBoardEventTimeouted_anon2(t2), 0.5);
  tween = $.Tween$(t2.get$_infoBox(), 0.5, $.Transitions_easeOutCubic);
  tween.animate$2('y', -210);
  $.add$1($.renderJuggler, tween);
}
};

$$.Game__onBoardEventTimeouted_anon2 = {"": ["this_1"],
 "super": "Closure",
 call$0: function() {
  return this.this_1._nextLevel$0();
}
};

$$.Game__onBoardEventTimeouted_anon0 = {"": ["this_2"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, tween;
  t1 = $.renderJuggler;
  t2 = this.this_2;
  t1.delayCall$2(new $.Game__onBoardEventTimeouted_anon1(t2), 0.5);
  tween = $.Tween$(t2.get$_infoBox(), 0.5, $.Transitions_easeOutCubic);
  tween.animate$2('y', -210);
  $.add$1($.renderJuggler, tween);
}
};

$$.Game__onBoardEventTimeouted_anon1 = {"": ["this_3"],
 "super": "Closure",
 call$0: function() {
  return this.this_3._gameOver$0();
}
};

$$.Game__gameOver_anon = {"": ["laugh_0"],
 "super": "Closure",
 call$0: function() {
  return this.laugh_0.play$0();
}
};

$$.Game__gameOver_anon0 = {"": ["this_1"],
 "super": "Closure",
 call$0: function() {
  return this.this_1._exitGame$1(true);
}
};

$$.Game__gameOver_anon1 = {"": ["this_2"],
 "super": "Closure",
 call$1: function(me) {
  return this.this_2._exitGame$1(true);
}
};

$$.Board_dropFields_anon = {"": ["field_0"],
 "super": "Closure",
 call$1: function(value) {
  this.field_0.set$y(value);
}
};

$$.Game__onBoardEventFinalized_anon = {"": ["levelUp_1", "this_0"],
 "super": "Closure",
 call$0: function() {
  this.this_0.get$_board().dropFields$0();
  this.levelUp_1.play$0();
}
};

$$.Game__onBoardEventFinalized_anon0 = {"": ["this_2"],
 "super": "Closure",
 call$0: function() {
  var t1, timePoints, timeBonus, t2;
  t1 = this.this_2;
  timePoints = $.toInt($.mul(t1.get$_timeGauge().get$restTime(), 1000));
  timeBonus = $.Bonus$(timePoints);
  timeBonus.set$x(704);
  timeBonus.set$y(360);
  t1.get$_gameLayer().addChild$1(timeBonus);
  t1.set$_points($.add(t1.get$_points(), timePoints));
  t2 = $.S(t1.get$_points());
  t1.get$_pointsTextField().set$text(t2);
}
};

$$.Game__onBoardEventFinalized_anon1 = {"": ["levelUpAnimation_4", "this_3"],
 "super": "Closure",
 call$0: function() {
  this.this_3.get$_gameLayer().removeChild$1(this.levelUpAnimation_4);
}
};

$$.Game__onBoardEventFinalized_anon2 = {"": ["this_5"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_5;
  t1.set$_level($.add(t1.get$_level(), 1));
  t1._nextLevel$0();
}
};

$$.anon7 = {"": ["this_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1, t2, t3;
  if (typeof value !== 'number')
    throw $.iae(value);
  t1 = 1 - value;
  t2 = this.this_0;
  t2.get$_textFieldContainer().set$alpha(t1);
  t1 = -value * 50;
  t2.get$_textFieldContainer().set$y(t1);
  t1 = value * 10;
  t3 = 1 + 0.1 * $.sin(t1);
  t2.get$_textFieldContainer().set$scaleX(t3);
  t3 = 1 + 0.1 * $.cos(t1);
  t2.get$_textFieldContainer().set$scaleY(t3);
}
};

$$.anon8 = {"": ["this_1"],
 "super": "Closure",
 call$0: function() {
  this.this_1.removeFromParent$0();
}
};

$$.Alarm_start_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(value) {
  var frame, t1, t2, t3;
  frame = $.mod($.toInt(value), 8);
  t1 = this.this_0;
  t2 = t1.get$_alarmBitmapDatas();
  if ($.leB(frame, 4))
    t3 = $.add(frame, 1);
  else {
    if (typeof frame !== 'number')
      throw $.iae(frame);
    t3 = 8 - frame;
  }
  t3 = $.index(t2, t3);
  t1.get$_alarmBitmap().set$bitmapData(t3);
}
};

$$.Head_nod_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1, frame, t2, t3;
  t1 = this.this_0;
  frame = $.toInt($.mod($.mul(value, $.get$length(t1.get$_headBitmapDatas())), $.get$length(t1.get$_headBitmapDatas())));
  t2 = $.index(t1.get$_headBitmapDatas(), frame);
  t1.get$_headBitmap().set$bitmapData(t2);
  t2 = $.sin($.mul($.mul(value, 2), 3.141592653589793)) * 3;
  t3 = $.div(t1.get$_headBitmap().get$height(), 2);
  if (typeof t3 !== 'number')
    throw $.iae(t3);
  t3 = t2 - t3;
  t1.get$_headBitmap().set$y(t3);
}
};

$$.TimeGauge_ratio_anon = {"": ["this_1", "oldRatio_0"],
 "super": "Closure",
 call$2: function(alarmName, alarmRatio) {
  if ($.ltB(alarmRatio, this.oldRatio_0) && $.geB(alarmRatio, this.this_1.get$ratio()))
    this.this_1.dispatchEvent$1($.Event$(alarmName, false));
}
};

$$.Game__onExitButtonClick_anon = {"": ["dark_2", "exitBox_1", "this_0"],
 "super": "Closure",
 call$1: function(exit) {
  var t1 = this.this_0;
  t1.get$_exitLayer().removeChild$1(this.exitBox_1);
  if ($.eqB(exit, false))
    t1.get$_exitLayer().removeChild$1(this.dark_2);
  else
    t1._exitGame$1(false);
}
};

$$.anon9 = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return $.add$1($.renderJuggler, this.this_0.get$_timeGauge());
}
};

$$.anon10 = {"": ["this_1"],
 "super": "Closure",
 call$1: function(e) {
  return $.renderJuggler.remove$1(this.this_1.get$_timeGauge());
}
};

$$.startRootIsolate_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$._BaseSendPort_call_anon = {"": ["completer_1", "port_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  var t1, t2;
  this.port_0.close$0();
  t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  t2 = this.completer_1;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._WorkerSendPort_send_anon = {"": ["replyTo_2", "message_1", "this_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, workerMessage, t3;
  t1 = this.this_0;
  t2 = this.replyTo_2;
  t1._checkReplyTo$1(t2);
  workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_1, 'replyTo', t2]));
  t2 = $._globalState().get$isWorker() === true;
  t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._waitForPendingPorts_anon = {"": ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$.Futures_wait_anon = {"": ["box_0", "pos_5", "result_4", "completer_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, t2, remaining;
  t1 = this.values_2;
  $.indexSet(t1, this.pos_5, value);
  t2 = this.box_0;
  remaining = $.sub(t2.remaining_1, 1);
  t2.remaining_1 = remaining;
  if ($.eqB(remaining, 0) && this.result_4.get$isComplete() !== true)
    this.completer_3.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"": ["future_8", "result_7", "completer_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (this.result_7.get$isComplete() !== true)
    this.completer_6.completeException$2(exception, this.future_8.get$stackTrace());
  return true;
}
};

$$._PendingSendPortFinder_visitMap_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._StorageImpl_values_anon = {"": ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return $.add$1(this.values_0, v);
}
};

$$.HashMapImplementation_values__ = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_10;
  t2.i_10 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
}
};

$$.LinkedHashMapImplementation_values__ = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_1;
  t2.index_1 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
}
};

$$.ConstantMap_values_anon = {"": ["this_1", "result_0"],
 "super": "Closure",
 call$1: function(key) {
  return $.add$1(this.result_0, $.index(this.this_1, key));
}
};

$$._PendingSendPortFinder_visitList_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._NativeJsSendPort_send_anon = {"": ["message_5", "this_4", "replyTo_3"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, t3, isolate, shouldSerialize, msg;
  t1 = {};
  t2 = this.this_4;
  t3 = this.replyTo_3;
  t2._checkReplyTo$1(t3);
  isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_lib4_callback() == null)
    return;
  shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  msg = this.message_5;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send_anon0(shouldSerialize, t2, t1), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send_anon0 = {"": ["shouldSerialize_7", "this_6", "box_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = this.this_6;
  if (!(t1.get$_receivePort().get$_lib4_callback() == null)) {
    if (this.shouldSerialize_7 === true) {
      t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._lib4_callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$._StorageImpl_keys_anon = {"": ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return $.add$1(this.keys_0, k);
}
};

$$.HashMapImplementation_keys__ = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_11;
  t2.i_11 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
}
};

$$.LinkedHashMapImplementation_keys__ = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_10;
  t2.index_10 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
}
};

$$._Copier_visitMap_anon = {"": ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1, t2;
  t1 = this.box_0.copy_10;
  t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._EventLoop__runHelper_next = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.anon11 = {"": ["callback_1", "this_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_1.call$1(this.this_0);
}
};

$$.anon12 = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.BoundClosure = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure0 = {'':
['self', 'target'],
'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$$.BoundClosure1 = {'':
['self', 'target'],
'super': 'Closure',
call$2: function(p0, p1) { return this.self[this.target](p0, p1); }
};
$._MutationObserverFactoryProvider_createMutationObserver = function(callback) {
  callback = $.convertDartClosureToJS(callback, 2);
    var constructor =
        window.MutationObserver || window.WebKitMutationObserver ||
        window.MozMutationObserver;
    return new constructor(callback);
  
};

$._BatteryManagerEventsImpl$ = function(_ptr) {
  return new $._BatteryManagerEventsImpl(_ptr);
};

$.AudioContext_AudioContext = function() {
  return $._AudioContextFactoryProvider_createAudioContext();
};

$._TextTrackCueEventsImpl$ = function(_ptr) {
  return new $._TextTrackCueEventsImpl(_ptr);
};

$._EventListenerUseCapture$ = function(eventListener, useCapture) {
  return new $._EventListenerUseCapture(eventListener, useCapture);
};

$._SimpleClientRect$ = function(left, top$, width, height) {
  return new $._SimpleClientRect(left, top$, width, height);
};

$._DedicatedWorkerContextEventsImpl$ = function(_ptr) {
  return new $._DedicatedWorkerContextEventsImpl(_ptr);
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl__FutureImpl$immediate(value);
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.TextEvent$ = function(type, bubbles) {
  var t1 = new $.TextEvent('', null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  return t1;
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.index = function(a, index) {
  var key;
  if (typeof a == "string" || a.constructor === Array) {
    key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else {
      $.checkNull(b);
      throw $.$$throw($.ArgumentError$(b));
    }
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.truncate(a / b);
  return a.operator$tdiv$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.negate$0();
};

$.index$slow = function(a, index) {
  var t1;
  if (!(typeof a === 'string'))
    t1 = !(a == null) && a.constructor === Array;
  else
    t1 = true;
  if (t1) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.truncate(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.toString(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.le = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.NullPointerException$(null, $.CTC0));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.AudioElement_AudioElement = function(src) {
  var t1 = $ === src;
  if (t1)
    src = null;
  if (t1)
    return $._AudioElementFactoryProvider_createAudioElement(null);
  return $._AudioElementFactoryProvider_createAudioElement(src);
};

$.checkString = function(value) {
  if (!(typeof value === 'string')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.substringUnchecked = function(receiver, startIndex, endIndex) {
  return receiver.substring(startIndex, endIndex);
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CTC;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  return $.toString(this.dartException);
};

$._AudioContextEventsImpl$ = function(_ptr) {
  return new $._AudioContextEventsImpl(_ptr);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if ($.eqB(type, 'property_not_function') || $.eqB(type, 'called_non_callable') || $.eqB(type, 'non_object_property_call') || $.eqB(type, 'non_object_property_load'))
      return $.NullPointerException$(null, $.CTC0);
    else if ($.eqB(type, 'undefined_method'))
      return $.NoSuchMethodError$('', name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.endsWith(message, 'is null') === true || $.endsWith(message, 'is undefined') === true || $.endsWith(message, 'is null or undefined') === true)
        return $.NullPointerException$(null, $.CTC0);
      else {
        if ($.contains$1(message, ' is not a function') !== true)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$('', '<unknown>', [], $.makeLiteralMap([]), null);
      }
    return $._ExceptionImplementation$(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && $.contains$1(message, 'call stack') === true)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === 'too much recursion')
      return $.StackOverflowError$();
  return ex;
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.iterator(keyValuePairs);
  result = $.LinkedHashMapImplementation$();
  for (; iterator.get$hasNext() === true;)
    result.operator$indexSet$2(iterator.next$0(), iterator.next$0());
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(arg1, closure));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(arg1, arg2, closure));
  else
    throw $.$$throw($._ExceptionImplementation$('Unsupported number of arguments for wrapped closure'));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.mod = function(a, b) {
  var result;
  if ($.checkNumbers(a, b)) {
    result = a % b;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (b < 0)
      return result - b;
    else
      return result + b;
  }
  return a.operator$mod$1(b);
};

$.boolTypeCast = function(value) {
  if (typeof value === 'boolean' || value == null)
    return value;
  throw $.$$throw($.CastErrorImplementation$($.Primitives_objectTypeName(value), 'bool'));
};

$.propertyTypeCastError = function(value, property) {
  throw $.$$throw($.CastErrorImplementation$($.Primitives_objectTypeName(value), $.substring$2(property, 3, $.get$length(property))));
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.listInsertRange = function(receiver, start, length$, initialValue) {
  var receiverLength, t1, t2, t3, i;
  if (typeof receiver !== 'object' || receiver === null || (receiver.constructor !== Array || !!receiver.immutable$list) && !receiver.is$JavaScriptIndexingBehavior())
    return $.listInsertRange$bailout(1, receiver, start, length$, initialValue);
  if ($.eqB(length$, 0))
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  receiverLength = receiver.length;
  if (start < 0 || start > receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = receiverLength + length$;
  $.set$length(receiver, t1);
  t2 = start + length$;
  $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
  if (!(initialValue == null))
    for (t3 = receiver.length, i = start; i < t2; ++i) {
      if (i < 0 || i >= t3)
        throw $.ioore(i);
      receiver[i] = initialValue;
    }
  $.set$length(receiver, t1);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.Date_Date$now = function() {
  return $._DateImpl$now();
};

$.Date_Date$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  return $._DateImpl$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$('Cyclic initialization for static ' + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'AudioChannelMerger')
    return 'ChannelMergerNode';
  if (name$ === 'AudioChannelSplitter')
    return 'ChannelSplitterNode';
  if (name$ === 'AudioGainNode')
    return 'GainNode';
  if (name$ === 'AudioPannerNode')
    return 'PannerNode';
  if (name$ === 'JavaScriptAudioNode')
    return 'ScriptProcessorNode';
  if (name$ === 'Oscillator')
    return 'OscillatorNode';
  if (name$ === 'RealtimeAnalyserNode')
    return 'AnalyserNode';
  return name$;
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'AudioChannelMerger')
    return 'ChannelMergerNode';
  if (name$ === 'AudioChannelSplitter')
    return 'ChannelSplitterNode';
  if (name$ === 'AudioGainNode')
    return 'GainNode';
  if (name$ === 'AudioPannerNode')
    return 'PannerNode';
  if (name$ === 'JavaScriptAudioNode')
    return 'ScriptProcessorNode';
  if (name$ === 'Oscillator')
    return 'OscillatorNode';
  if (name$ === 'RealtimeAnalyserNode')
    return 'AnalyserNode';
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return 'Null';
  constructor$ = object.constructor;
  if (typeof(constructor$) === 'function') {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype');
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document')
    return 'HTMLDocument';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'MouseScrollEvent')
    return 'WheelEvent';
  if (name$ === 'OfflineResourceList')
    return 'DOMApplicationCache';
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'ApplicationCache')
    return 'DOMApplicationCache';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  return name$;
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf('Chrome') !== -1 || userAgent.indexOf('DumpRenderTree') !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf('Firefox') !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf('MSIE') !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf('Opera') !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf('AppleWebKit') !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result === null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, multiLine, ignoreCase, sb, t1, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer('');
  if (multiLine === true)
    $.add$1(sb, 'm');
  if (ignoreCase === true)
    $.add$1(sb, 'i');
  if (global === true)
    $.add$1(sb, 'g');
  try {
    return new RegExp(pattern, $.toString(sb));
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.regExpAttachGlobalNative = function(regExp) {
  regExp._re = $.regExpMakeNative(regExp, true);
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === 'string')
    return !$.eqB($.indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === 'object' && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.substring$1(receiver, startIndex));
  else
    return $.iterator($.allMatches(other, $.substring$1(receiver, startIndex))).get$hasNext();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$.regExpMatchStart = function(m) {
  return m.index;
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, i;
  if (from === '')
    if (receiver === '')
      return to;
    else {
      result = $.StringBuffer_StringBuffer('');
      length$ = receiver.length;
      $.add$1(result, to);
      for (i = 0; i < length$; ++i) {
        $.add$1(result, receiver[i]);
        $.add$1(result, to);
      }
      return $.toString(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.CTC2, true), "\\$&"), false, false), true), to);
};

$.add$1 = function(receiver, value) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'add');
    receiver.push(value);
    return;
  }
  return receiver.add$1(value);
};

$.removeAt$1 = function(receiver, index) {
  if ($.isJsArray(receiver)) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.get$length(receiver)))
      throw $.$$throw($.RangeError$value(index));
    $.checkGrowable(receiver, 'removeAt');
    return receiver.splice(index, 1)[0];
  }
  return receiver.removeAt$1(index);
};

$.removeLast = function(receiver) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'removeLast');
    if ($.eqB($.get$length(receiver), 0))
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  }
  return receiver.removeLast$0();
};

$.get$length = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length;
  else
    return receiver.get$length();
};

$.set$length = function(receiver, newLength) {
  if ($.isJsArray(receiver)) {
    $.checkNull(newLength);
    if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, 'set length');
    receiver.length = newLength;
  } else
    receiver.set$length(newLength);
  return newLength;
};

$.toString = function(value) {
  if (typeof value == "object" && value !== null)
    if ($.isJsArray(value))
      return $.Collections_collectionToString(value);
    else
      return value.toString$0();
  if (value === 0 && (1 / value) < 0)
    return '-0.0';
  if (value == null)
    return 'null';
  if (typeof value == "function")
    return 'Closure';
  return String(value);
};

$.iterator = function(receiver) {
  if ($.isJsArray(receiver))
    return $.ListIterator$(receiver);
  return receiver.iterator$0();
};

$.charCodeAt = function(receiver, index) {
  if (typeof receiver === 'string') {
    if (!(typeof index === 'number'))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  } else
    return receiver.charCodeAt$1(index);
};

$.get$isEmpty = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length === 0;
  return receiver.get$isEmpty();
};

$.clear = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.clear$0();
  $.set$length(receiver, 0);
};

$.forEach = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.forEach$1(f);
  else
    return $.Collections_forEach(receiver, f);
};

$.addLast = function(receiver, value) {
  if (!$.isJsArray(receiver))
    return receiver.addLast$1(value);
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, length$, patternLength, startIndex, position, endIndex;
  result = $._ListImpl_List(null);
  length$ = $.get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = $.add(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.add(startIndex, 1) : endIndex;
  }
  return result;
};

$.indexOf$1 = function(receiver, element) {
  if ($.isJsArray(receiver))
    return $.Arrays_indexOf(receiver, element, 0, receiver.length);
  else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof element === 'string'))
      throw $.$$throw($.ArgumentError$(element));
    return receiver.indexOf(element);
  }
  return receiver.indexOf$1(element);
};

$.indexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver)) {
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  } else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof element === 'string'))
      throw $.$$throw($.ArgumentError$(element));
    if (start < 0)
      return -1;
    return receiver.indexOf(element, start);
  }
  return receiver.indexOf$2(element, start);
};

$.NoSuchMethodError_safeToString = function(object) {
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.toString(object);
  if (typeof object === 'string')
    return '"' + $.S($.replaceAll($.replaceAll($.replaceAll($.replaceAll(object, '\\', '\\\\'), '\n', '\\n'), '\r', '\\r'), '"', '\\"')) + '"';
  return $.Primitives_objectToString(object);
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.get$last = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.get$last();
  return $.index(receiver, $.sub($.get$length(receiver), 1));
};

$.removeRange = function(receiver, start, length$) {
  var receiverLength, t1, t2;
  if (!$.isJsArray(receiver))
    return receiver.removeRange$2(start, length$);
  $.checkGrowable(receiver, 'removeRange');
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.RangeError$value(t1));
  t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.set$length(receiver, t2);
};

$.filter = function(receiver, predicate) {
  if (!$.isJsArray(receiver))
    return receiver.filter$1(predicate);
  else
    return $.Collections_filter(receiver, [], predicate);
};

$.get$isNaN = function(receiver) {
  if (typeof receiver === 'number')
    return isNaN(receiver);
  else
    return receiver.get$isNaN();
};

$.abs = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.abs$0();
  return Math.abs(receiver);
};

$.toInt = function(receiver) {
  var truncated;
  if (!(typeof receiver === 'number'))
    return receiver.toInt$0();
  if ($.get$isNaN(receiver) === true)
    throw $.$$throw($.FormatException$('NaN'));
  if ($.get$isInfinite(receiver) === true)
    throw $.$$throw($.FormatException$('Infinity'));
  truncated = $.truncate(receiver);
  return truncated == -0.0 ? 0 : truncated;
};

$.ceil = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.ceil$0();
  return Math.ceil(receiver);
};

$.floor = function(receiver) {
  return Math.floor(receiver);
};

$.get$isInfinite = function(receiver) {
  return receiver == Infinity || receiver == -Infinity;
};

$.round = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.round$0();
  if (receiver < 0)
    return -Math.round(-receiver);
  else
    return Math.round(receiver);
};

$.toDouble = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.toDouble$0();
  return receiver;
};

$.truncate = function(receiver) {
  return receiver < 0 ? $.ceil(receiver) : $.floor(receiver);
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, array, tags, set, tagNames, index, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    array = inputTable[i];
    tags = array[1];
    set = {};
    tagNames = tags.split('|');
    for (index = 1, j = 0; j < tagNames.length; ++j) {
      set[tagNames[j]] = true;
      array = tagNames;
      index = j;
    }
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.getRange = function(receiver, start, length$) {
  var t1, end;
  if (!$.isJsArray(receiver))
    return receiver.getRange$2(start, length$);
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  end = start + length$;
  if ($.gtB(end, $.get$length(receiver)))
    throw $.$$throw($.RangeError$value(length$));
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  return receiver.slice(start, end);
};

$.allMatches = function(receiver, str) {
  if (!(typeof receiver === 'string'))
    return receiver.allMatches$1(str);
  $.checkString(str);
  return $.allMatchesInStringUnchecked(receiver, str);
};

$.concat = function(receiver, other) {
  if (!(typeof receiver === 'string'))
    return receiver.concat$1(other);
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  return receiver + other;
};

$.contains$1 = function(receiver, other) {
  var t1, i;
  if (typeof receiver !== 'string' && (typeof receiver !== 'object' || receiver === null || receiver.constructor !== Array && !receiver.is$JavaScriptIndexingBehavior()))
    return $.contains$1$bailout(1, receiver, other);
  if (typeof receiver === 'string')
    return $.contains$2(receiver, other, 0);
  else if ($.isJsArray(receiver)) {
    for (t1 = receiver.length, i = 0; i < t1; ++i)
      if (other === receiver[i])
        return true;
    return false;
  }
  return receiver.contains$1(other);
};

$.contains$2 = function(receiver, other, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$2(other, startIndex);
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
};

$.replaceAll = function(receiver, from, to) {
  if (!(typeof receiver === 'string'))
    return receiver.replaceAll$2(from, to);
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
};

$.endsWith = function(receiver, other) {
  var receiverLength, otherLength;
  $.checkString(other);
  receiverLength = receiver.length;
  otherLength = other.length;
  if (otherLength > receiverLength)
    return false;
  return other === $.substring$1(receiver, receiverLength - otherLength);
};

$.substring$1 = function(receiver, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$1(startIndex);
  return $.substring$2(receiver, startIndex, null);
};

$.substring$2 = function(receiver, startIndex, endIndex) {
  var length$;
  if (!(typeof receiver === 'string'))
    return receiver.substring$2(startIndex, endIndex);
  $.checkNum(startIndex);
  length$ = receiver.length;
  if (endIndex == null)
    endIndex = length$;
  $.checkNum(endIndex);
  if ($.ltB(startIndex, 0))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, length$))
    throw $.$$throw($.RangeError$value(endIndex));
  return $.substringUnchecked(receiver, startIndex, endIndex);
};

$.get$hashCode = function(receiver) {
  var length$, hash, i, hash0, hash1;
  if (receiver == null)
    return 0;
  if (typeof receiver === 'number')
    return receiver & 0x1FFFFFFF;
  if (typeof receiver === 'boolean')
    return receiver ? 1077375012 : 3247177846;
  if ($.isJsArray(receiver))
    return $.Primitives_objectHashCode(receiver);
  if (!(typeof receiver === 'string'))
    return receiver.get$hashCode();
  length$ = receiver.length;
  for (hash = 0, i = 0; i < length$; ++i) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + 524287 & hash0 << 10;
    hash1 = (hash1 ^ $.shr(hash1, 6)) >>> 0;
    hash = hash1;
  }
  hash0 = 536870911 & hash + 67108863 & hash << 3;
  hash0 = (hash0 ^ $.shr(hash0, 11)) >>> 0;
  return 536870911 & hash0 + 16383 & hash0 << 15;
};

$._RTCPeerConnectionEventsImpl$ = function(_ptr) {
  return new $._RTCPeerConnectionEventsImpl(_ptr);
};

$.get$isEven = function(receiver) {
  if (!(typeof receiver === 'number' && Math.floor(receiver) === receiver))
    return receiver.get$isEven();
  return (receiver & 1) === 0;
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation(actualType, expectedType);
};

$.toLowerCase = function(receiver) {
  if (!(typeof receiver === 'string'))
    return receiver.toLowerCase$0();
  return receiver.toLowerCase();
};

$.stringSplitUnchecked = function(receiver, pattern) {
  return receiver.split(pattern);
};

$.split = function(receiver, pattern) {
  if (!(typeof receiver === 'string'))
    return receiver.split$1(pattern);
  $.checkNull(pattern);
  return $.stringSplitUnchecked(receiver, pattern);
};

$.insertRange$3 = function(receiver, start, length$, initialValue) {
  if (!$.isJsArray(receiver))
    return receiver.insertRange$3(start, length$, initialValue);
  return $.listInsertRange(receiver, start, length$, initialValue);
};

$.get$isNegative = function(receiver) {
  return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, method, i, entry, proto;
  tag = $.getTypeNameOf(obj);
  method = methods[tag];
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if (entry.get$_set()[tag]) {
        method = methods[entry.get$_tag()];
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = methods['Object'];
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!proto.hasOwnProperty(name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.Explosion$ = function(color, direction) {
  var t1 = new $.Explosion(null, null, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.Explosion$2(color, direction);
  return t1;
};

$.ExplosionParticle$ = function() {
  return new $.ExplosionParticle(null, null, null, null, null, null);
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CTC11)[name$];
  if (!(dartMethod == null))
    methods['Object'] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.LinkedHashMapImplementation$ = function() {
  var t1 = new $.LinkedHashMapImplementation(null, null);
  t1.LinkedHashMapImplementation$0();
  return t1;
};

$.main = function() {
  $.stageBackground = $.Stage$('StageBackground', $.query('#stageBackground'));
  $.stageForeground = $.Stage$('StageForeground', $.query('#stageForeground'));
  $.renderLoop = $.RenderLoop$();
  $.renderLoop.addStage$1($.stageBackground);
  $.renderLoop.addStage$1($.stageForeground);
  $.renderJuggler = $.renderLoop.get$juggler();
  $.BitmapData_loadImage('images/Loading.png').then$1(new $.main_anon());
};

$.loadGame = function() {
  var resource = $.Resource$();
  resource.addImage$2('Background', 'images/Background.jpg');
  resource.addImage$2('ExitBox', 'images/ExitBox.png');
  resource.addImage$2('ExitButtonNormal', 'images/ExitButtonNormal.png');
  resource.addImage$2('ExitButtonPressed', 'images/ExitButtonPressed.png');
  resource.addImage$2('ExitGauge', 'images/ExitGauge.png');
  resource.addImage$2('ExitNoButtonNormal', 'images/ExitNoButtonNormal.png');
  resource.addImage$2('ExitNoButtonPressed', 'images/ExitNoButtonPressed.png');
  resource.addImage$2('ExitYesButtonNormal', 'images/ExitYesButtonNormal.png');
  resource.addImage$2('ExitYesButtonPressed', 'images/ExitYesButtonPressed.png');
  resource.addImage$2('InfoBox', 'images/InfoBox.png');
  resource.addImage$2('MessageBox', 'images/MessageBox.png');
  resource.addImage$2('ShuffleButtonNormal', 'images/ShuffleButtonNormal.png');
  resource.addImage$2('ShuffleButtonPressed', 'images/ShuffleButtonPressed.png');
  resource.addImage$2('TimeGauge', 'images/TimeGauge.png');
  resource.addTextureAtlas$3('Alarm', 'images/AlarmTextureAtlas.json', 'jsonarray');
  resource.addTextureAtlas$3('Head', 'images/HeadTextureAtlas.json', 'jsonarray');
  resource.addTextureAtlas$3('Elements', 'images/ElementsTextureAtlas.json', 'jsonarray');
  resource.addTextureAtlas$3('Levelup', 'images/LevelupTextureAtlas.json', 'jsonarray');
  resource.addTextureAtlas$3('Locks', 'images/LocksTextureAtlas.json', 'jsonarray');
  resource.addSound$2('BonusAllUnlock', 'sounds/BonusAllUnlock.mp3');
  resource.addSound$2('BonusUniversal', 'sounds/BonusUniversal.mp3');
  resource.addSound$2('ChainBlast', 'sounds/ChainBlast.mp3');
  resource.addSound$2('ChainBlastSpecial', 'sounds/ChainBlastSpecial.mp3');
  resource.addSound$2('ChainError', 'sounds/ChainError.mp3');
  resource.addSound$2('ChainFall', 'sounds/ChainFall.mp3');
  resource.addSound$2('ChainHelp', 'sounds/ChainHelp.mp3');
  resource.addSound$2('ChainLink', 'sounds/ChainLink.mp3');
  resource.addSound$2('ChainRotate', 'sounds/ChainRotate.mp3');
  resource.addSound$2('Click', 'sounds/Click.mp3');
  resource.addSound$2('GameOver', 'sounds/GameOver.mp3');
  resource.addSound$2('Laugh', 'sounds/Laugh.mp3');
  resource.addSound$2('LevelUp', 'sounds/LevelUp.mp3');
  resource.addSound$2('PointsCounter', 'sounds/PointsCounter.mp3');
  resource.addSound$2('Unlock', 'sounds/Unlock.mp3');
  resource.addSound$2('Warning', 'sounds/Warning.mp3');
  resource.addSound$2('Intro', 'sounds/Intro.mp3');
  resource.addText$2('ESCAPE_INS_AIM_0', 'Connect at least 3 chain links of the same colour to a horizontal or vertical chain.');
  resource.addText$2('ESCAPE_INS_DES_0', 'You can change the direction of a chain link by touching it.');
  resource.addText$2('ESCAPE_INS_TIP_0', 'Earn extra points for connecting chain links displaying a key symbol.');
  resource.addText$2('ESCBlockErrorHint', 'Sorry but block chains can\xb4t be twisted!');
  resource.addText$2('ESCLevelBoxText', 'Connect {0} chain links and help the crook to escape!');
  resource.addText$2('ESCNoActionHint', 'Press on the chain links to twist them.');
  resource.addText$2('ESCNoComboHint', 'You have to connect at least 3 chain links of the same colour.');
  resource.addText$2('ESCStartText', 'Form horizontal or vertical same-colour chains and become an escape agent!');
  resource.addText$2('ESCtogo', 'Chain links:');
  resource.addText$2('GENexitquery', 'Do you really want to quit the game?');
  resource.addText$2('GEN2ndchancetime', 'Time is up. Second chance!');
  resource.addText$2('GENtimeup', 'Sorry! Your time is up.');
  resource.addText$2('GENgameover', 'Game Over');
  resource.load$0().then$1(new $.loadGame_anon(resource));
};

$.SpecialJokerChain$ = function(direction) {
  var t1 = new $.SpecialJokerChain(null, null, null, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.SpecialJokerChain$1(direction);
  return t1;
};

$.KeyValuePair$ = function(key, value) {
  return new $.KeyValuePair(key, value);
};

$.SpecialJokerLink$ = function(direction) {
  var t1 = new $.SpecialJokerLink(null, null, null, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.SpecialJokerLink$1(direction);
  return t1;
};

$.SpecialWobble$ = function(special) {
  var t1 = new $.SpecialWobble(null, null, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.SpecialWobble$1(special);
  return t1;
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$._document = function() {
  return document;
};

$.query = function(selector) {
  return $._document().query$1(selector);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = '-moz-';
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = '-ms-';
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = '-o-';
    else
      $._cachedBrowserPrefix = '-webkit-';
  return $._cachedBrowserPrefix;
};

$._WebSocketEventsImpl$ = function(_ptr) {
  return new $._WebSocketEventsImpl(_ptr);
};

$.Stage$ = function(name$, canvas) {
  var t1 = new $.Stage(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.Stage$2(name$, canvas);
  return t1;
};

$._RTCDataChannelEventsImpl$ = function(_ptr) {
  return new $._RTCDataChannelEventsImpl(_ptr);
};

$._InputElementEventsImpl$ = function(_ptr) {
  return new $._InputElementEventsImpl(_ptr);
};

$.EventDispatcher$ = function() {
  return new $.EventDispatcher(null);
};

$._DOMApplicationCacheEventsImpl$ = function(_ptr) {
  return new $._DOMApplicationCacheEventsImpl(_ptr);
};

$.RenderState$fromCanvasRenderingContext2D = function(context) {
  var t1 = new $.RenderState(null, null, null, null);
  t1.RenderState$fromCanvasRenderingContext2D$1(context);
  return t1;
};

$.TextureAtlasFrame$ = function(name$, textureAtlas) {
  var t1 = new $.TextureAtlasFrame(null, null, null, null, null, null, null, null, null, null, null);
  t1.TextureAtlasFrame$2(name$, textureAtlas);
  return t1;
};

$.MouseEvent$ = function(type, bubbles) {
  var t1 = new $.MouseEvent(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  t1.MouseEvent$2(type, bubbles);
  return t1;
};

$.ExitBox$ = function() {
  var t1 = new $.ExitBox(null, null, null, null, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.ExitBox$0();
  return t1;
};

$.Event$ = function(type, bubbles) {
  var t1 = new $.Event(null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  return t1;
};

$.KeyboardEvent$ = function(type, bubbles) {
  var t1 = new $.KeyboardEvent(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  t1.KeyboardEvent$2(type, bubbles);
  return t1;
};

$._PeerConnection00EventsImpl$ = function(_ptr) {
  return new $._PeerConnection00EventsImpl(_ptr);
};

$._IDBVersionChangeRequestEventsImpl$ = function(_ptr) {
  return new $._IDBVersionChangeRequestEventsImpl(_ptr);
};

$._IDBRequestEventsImpl$ = function(_ptr) {
  return new $._IDBRequestEventsImpl(_ptr);
};

$.DisplayObjectContainerEvents$ = function(target) {
  var t1 = new $.DisplayObjectContainerEvents(null);
  t1.Events$1(target);
  return t1;
};

$.InteractiveObjectEvents$ = function(target) {
  var t1 = new $.InteractiveObjectEvents(null);
  t1.Events$1(target);
  return t1;
};

$.DisplayObjectEvents$ = function(target) {
  var t1 = new $.DisplayObjectEvents(null);
  t1.Events$1(target);
  return t1;
};

$.Events$ = function(eventDispatcher) {
  var t1 = new $.Events(null);
  t1.Events$1(eventDispatcher);
  return t1;
};

$.Mouse__eventDispatcher = function() {
  if ($.Mouse___eventDispatcher == null)
    $.Mouse___eventDispatcher = $.EventDispatcher$();
  return $.Mouse___eventDispatcher;
};

$._SpeechRecognitionEventsImpl$ = function(_ptr) {
  return new $._SpeechRecognitionEventsImpl(_ptr);
};

$.Mouse__getCssStyle = function(mouseCursor) {
  var cursor, style;
  cursor = !$.eqB($.Mouse__customCursor, 'auto') ? $.Mouse__customCursor : mouseCursor;
  style = 'auto';
  switch (cursor) {
    case 'auto':
      style = 'auto';
      break;
    case 'arrow':
      style = 'default';
      break;
    case 'button':
      style = 'pointer';
      break;
    case 'hand':
      style = 'move';
      break;
    case 'ibeam':
      style = 'text';
      break;
    case 'wait':
      style = 'wait';
      break;
  }
  return $.Mouse__isCursorHidden === true ? 'none' : style;
};

$._IDBTransactionEventsImpl$ = function(_ptr) {
  return new $._IDBTransactionEventsImpl(_ptr);
};

$.Matrix$fromIdentity = function() {
  return new $.Matrix(1, 0, 0, 1, 0, 0, 1);
};

$.Rectangle$ = function(x, y, width, height) {
  return new $.Rectangle(x, y, width, height);
};

$.Rectangle$zero = function() {
  return new $.Rectangle(0, 0, 0, 0);
};

$._DateImpl$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $._DateImpl(millisecondsSinceEpoch, isUtc);
  t1._DateImpl$fromMillisecondsSinceEpoch$2(millisecondsSinceEpoch, isUtc);
  return t1;
};

$._DateImpl$now = function() {
  var t1 = new $._DateImpl($.Primitives_dateNow(), false);
  t1._DateImpl$now$0();
  return t1;
};

$._IDBOpenDBRequestEventsImpl$ = function(_ptr) {
  return new $._IDBOpenDBRequestEventsImpl(_ptr);
};

$.Mask$rectangle = function(x, y, width, height) {
  var t1 = new $.Mask(null, null, null, null);
  t1.Mask$rectangle$4(x, y, width, height);
  return t1;
};

$.Point$ = function(x, y) {
  return new $.Point(x, y);
};

$.Point$zero = function() {
  return new $.Point(0, 0);
};

$.EventListenerList$ = function(eventDispatcher, eventType) {
  var t1 = new $.EventListenerList(null, null, null);
  t1.EventListenerList$2(eventDispatcher, eventType);
  return t1;
};

$._MediaElementEventsImpl$ = function(_ptr) {
  return new $._MediaElementEventsImpl(_ptr);
};

$.RenderLoop$ = function() {
  var t1 = new $.RenderLoop(null, null, null, null, null);
  t1.RenderLoop$0();
  return t1;
};

$.Juggler$ = function() {
  var t1 = new $.Juggler(null, null, null);
  t1.Juggler$0();
  return t1;
};

$._EventListenerListIndex$ = function() {
  var t1 = new $._EventListenerListIndex(null);
  t1._EventListenerListIndex$0();
  return t1;
};

$._ElementEventsImpl$ = function(_ptr) {
  return new $._ElementEventsImpl(_ptr);
};

$.EnterFrameEvent$ = function(passedTime) {
  var t1 = new $.EnterFrameEvent(null, null, null, null, null, null, null, null);
  t1.Event$2('enterFrame', false);
  t1.EnterFrameEvent$1(passedTime);
  return t1;
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$());
};

$.BitmapData$ = function(width, height, transparent, fillColor) {
  var t1 = new $.BitmapData(null, null, null, null, null, null, null, null, null, null, null, null);
  t1.BitmapData$4(width, height, transparent, fillColor);
  return t1;
};

$.BitmapData$fromImageElement = function(imageElement) {
  var t1 = new $.BitmapData(null, null, null, null, null, null, null, null, null, null, null, null);
  t1.BitmapData$fromImageElement$1(imageElement);
  return t1;
};

$.BitmapData$fromTextureAtlasFrame = function(textureAtlasFrame) {
  var t1 = new $.BitmapData(null, null, null, null, null, null, null, null, null, null, null, null);
  t1.BitmapData$fromTextureAtlasFrame$1(textureAtlasFrame);
  return t1;
};

$.BitmapData_loadImage = function(url) {
  var completer, image;
  completer = $.Completer_Completer();
  image = $.ImageElement_ImageElement($, $, $);
  $.add$1(image.get$on().get$load(), new $.BitmapData_loadImage_anon(image, completer));
  $.add$1(image.get$on().get$error(), new $.BitmapData_loadImage_anon0(completer));
  image.set$src(url);
  return completer.get$future();
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(false, null, null, null, false, [], [], []);
};

$._FutureImpl__FutureImpl$immediate = function(value) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.Bitmap$ = function(bitmapData, pixelSnapping) {
  var t1 = new $.Bitmap(bitmapData, pixelSnapping, null, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.Bitmap$2(bitmapData, pixelSnapping);
  return t1;
};

$.Tween$ = function(displayObject, time, transitionFunction) {
  var t1 = new $.Tween(null, null, null, null, null, null, null, null, null, null, null);
  t1.Tween$3(displayObject, time, transitionFunction);
  return t1;
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$.Transitions_linear = function(ratio) {
  return ratio;
};

$.Transitions_easeOutCubic = function(ratio) {
  if (typeof ratio !== 'number')
    throw $.iae(ratio);
  ratio = 1 - ratio;
  return 1 - ratio * ratio * ratio;
};

$.Transitions_easeInCubic = function(ratio) {
  return $.mul($.mul(ratio, ratio), ratio);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.Transitions_easeOutElastic = function(ratio) {
  if ($.eqB(ratio, 0) || $.eqB(ratio, 1))
    return ratio;
  if (typeof ratio !== 'number')
    throw $.iae(ratio);
  return $.pow(2, -10 * ratio) * $.sin((ratio - 0.075) * 6.283185307179586 / 0.3) + 1;
};

$.SoundMixer__audioContext = function() {
  if ($.SoundMixer__audioContextPrivate == null)
    try {
      $.SoundMixer__audioContextPrivate = $.AudioContext_AudioContext();
    } catch (exception) {
      $.unwrapException(exception);
      $.SoundMixer__audioContextPrivate = null;
    }

  return $.SoundMixer__audioContextPrivate;
};

$.SoundMixer_engine = function() {
  var ua, t1;
  if ($.SoundMixer__engine == null) {
    $.SoundMixer__engine = !($.SoundMixer__audioContext() == null) ? 'WebAudioApi' : 'AudioElement';
    ua = $.window().get$navigator().get$userAgent();
    if ($.contains$1(ua, 'IEMobile') === true && $.contains$1(ua, '9.0') === true)
      $.SoundMixer__engine = 'Mock';
    if ($.contains$1(ua, 'iPhone') === true || $.contains$1(ua, 'iPad') === true)
      t1 = $.contains$1(ua, 'OS 3') === true || $.contains$1(ua, 'OS 4') === true || $.contains$1(ua, 'OS 5') === true;
    else
      t1 = false;
    if (t1)
      $.SoundMixer__engine = 'Mock';
  }
  return $.SoundMixer__engine;
};

$.WebAudioApiSound_loadAudio = function(url) {
  var sound, loadCompleter, request, t1, t2;
  sound = $.WebAudioApiSound$();
  loadCompleter = $.Completer_Completer();
  request = $.HttpRequest_HttpRequest();
  t1 = new $.WebAudioApiSound_loadAudio_audioBufferLoaded(sound, loadCompleter);
  t1 = new $.WebAudioApiSound_loadAudio_onRequestLoad(new $.WebAudioApiSound_loadAudio_audioBufferError(loadCompleter), t1, request);
  t2 = new $.WebAudioApiSound_loadAudio_onRequestError(loadCompleter);
  request.open$3('GET', $.Sound_adaptAudioUrl(url), true);
  request.set$responseType('arraybuffer');
  $.add$1(request.get$on().get$load(), t1);
  $.add$1(request.get$on().get$error(), t2);
  request.send$0();
  return loadCompleter.get$future();
};

$.WebAudioApiSound$ = function() {
  var t1 = new $.WebAudioApiSound(null);
  t1.WebAudioApiSound$0();
  return t1;
};

$.AudioElementSound_loadAudio = function(url) {
  var sound, loadCompleter, t1, t2, t3;
  sound = $.AudioElementSound$();
  loadCompleter = $.Completer_Completer();
  t1 = new $.AudioElementSound_loadAudio_onAudioCanPlayThrough(sound, loadCompleter);
  t2 = new $.AudioElementSound_loadAudio_onAudioError(loadCompleter);
  t3 = $.Sound_adaptAudioUrl(url);
  sound._audio.set$src(t3);
  $.add$1(sound._audio.get$on().get$canPlayThrough(), t1);
  $.add$1(sound._audio.get$on().get$error(), t2);
  sound._audio.load$0();
  return loadCompleter.get$future();
};

$.AudioElementSound$ = function() {
  var t1 = new $.AudioElementSound(null, null, null);
  t1.AudioElementSound$0();
  return t1;
};

$.MockSound_loadAudio = function(url) {
  var sound, loadCompleter;
  sound = $.MockSound$();
  loadCompleter = $.Completer_Completer();
  $.window().setTimeout$2(new $.MockSound_loadAudio_anon(sound, loadCompleter), 1);
  return loadCompleter.get$future();
};

$.MockSound$ = function() {
  return new $.MockSound();
};

$._TweenProperty$ = function(name$, startValue, targetValue) {
  return new $._TweenProperty(name$, startValue, targetValue);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._IDBDatabaseEventsImpl$ = function(_ptr) {
  return new $._IDBDatabaseEventsImpl(_ptr);
};

$._SharedWorkerContextEventsImpl$ = function(_ptr) {
  return new $._SharedWorkerContextEventsImpl(_ptr);
};

$.TextField$ = function() {
  var t1 = new $.TextField('', 0, null, 'none', 'pixel', 'dynamic', false, false, 0, false, 0, 0, 0, null, null, true, 100, 100, null, null, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.TextField$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue());
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._NotificationEventsImpl$ = function(_ptr) {
  return new $._NotificationEventsImpl(_ptr);
};

$._maybeScheduleMeasurementFrame = function() {
  if ($._measurementScheduler == null)
    $._measurementScheduler = $._MeasurementScheduler__MeasurementScheduler$best($._completeMeasurementFutures);
  $._measurementScheduler.maybeSchedule$0();
};

$._createMeasurementFuture = function(computeValue, completer) {
  if ($._pendingRequests == null) {
    $._pendingRequests = [];
    $._maybeScheduleMeasurementFrame();
  }
  $.add$1($._pendingRequests, $._MeasurementRequest$(computeValue, completer));
  return completer.get$future();
};

$._completeMeasurementFutures = function() {
  var t1, request, t2, e, completedRequests, readyMeasurementFrameCallbacks, t3, t4;
  t1 = $._pendingRequests;
  if (!(t1 == null))
    for (t1 = $.iterator(t1); t1.get$hasNext() === true;) {
      request = t1.next$0();
      try {
        t2 = request.computeValue$0();
        request.set$value(t2);
      } catch (exception) {
        t2 = $.unwrapException(exception);
        e = t2;
        t2 = e;
        request.set$value(t2);
        request.set$exception(true);
      }

    }
  completedRequests = $._pendingRequests;
  readyMeasurementFrameCallbacks = $._pendingMeasurementFrameCallbacks;
  $._pendingRequests = null;
  $._pendingMeasurementFrameCallbacks = null;
  if (!(completedRequests == null))
    for (t1 = $.iterator(completedRequests); t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      t3 = t2.get$exception() === true;
      t4 = t2.get$completer();
      if (t3)
        t4.completeException$1(t2.get$value());
      else
        t4.complete$1(t2.get$value());
    }
  if (!(readyMeasurementFrameCallbacks == null))
    for (t1 = $.iterator(readyMeasurementFrameCallbacks); t1.get$hasNext() === true;)
      t1.next$0().call$0();
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrameImpl__createSafe(win);
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrameImpl__createSafe(e);
  else
    return e;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t2, t1, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.TextFormat$ = function(font, size, color, align, bold, indent, italic, leading, leftMargin, rightMargin, underline) {
  return new $.TextFormat(font, size, color, bold, italic, underline, align, leftMargin, rightMargin, indent, leading, 0, 0, false, false);
};

$._Timer$repeating = function(milliSeconds, callback) {
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$.TextLineMetrics$ = function(x, width, height, ascent, descent, leading) {
  return new $.TextLineMetrics(ascent, descent, height, leading, width, x);
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $globals = rootContext.isolateStatics;
  $static_init();
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$._timerFactory = function(millis, callback, repeating) {
  return repeating === true ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$._HttpRequestUploadEventsImpl$ = function(_ptr) {
  return new $._HttpRequestUploadEventsImpl(_ptr);
};

$.double_parse = function(source) {
  return $.Primitives_parseDouble(source);
};

$.Resource$ = function() {
  var t1 = new $.Resource(null, null, null, null, null, null, null);
  t1.Resource$0();
  return t1;
};

$.max = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return a + b;
        if ($.get$isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.sin = function(x) {
  return Math.sin($.checkNum(x));
};

$.cos = function(x) {
  return Math.cos($.checkNum(x));
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.Sound_loadAudio = function(url) {
  var engine = $.SoundMixer_engine();
  if ($.eqB(engine, 'WebAudioApi'))
    return $.WebAudioApiSound_loadAudio(url);
  if ($.eqB(engine, 'AudioElement'))
    return $.AudioElementSound_loadAudio(url);
  return $.MockSound_loadAudio(url);
};

$.min = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.get$isNegative(b) === true || $.get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.Sound_adaptAudioUrl = function(url) {
  var audio, valid, match, fileType;
  if ($.Sound__supportedTypes == null) {
    $.Sound__supportedTypes = $._ListImpl_List(null);
    audio = $.AudioElement_AudioElement($);
    valid = ['maybe', 'probably'];
    if (!$.eqB($.indexOf$1(valid, audio.canPlayType$2('audio/ogg', '')), -1))
      $.add$1($.Sound__supportedTypes, 'ogg');
    if (!$.eqB($.indexOf$1(valid, audio.canPlayType$2('audio/mp3', '')), -1))
      $.add$1($.Sound__supportedTypes, 'mp3');
    if (!$.eqB($.indexOf$1(valid, audio.canPlayType$2('audio/wav', '')), -1))
      $.add$1($.Sound__supportedTypes, 'wav');
  }
  match = $.CTC4.firstMatch$1(url);
  if (match == null)
    throw $.$$throw($.ArgumentError$('Unsupported file extension.'));
  fileType = $.toLowerCase(match.group$1(1));
  return $.eqB($.indexOf$1($.Sound__supportedTypes, fileType), -1) && $.gtB($.get$length($.Sound__supportedTypes), 0) ? $.S($.substring$2(url, 0, url.length - 3)) + $.S($.index($.Sound__supportedTypes, 0)) : url;
};

$.TextureAtlas$ = function() {
  var t1 = new $.TextureAtlas(null, null);
  t1.TextureAtlas$0();
  return t1;
};

$.TextureAtlas_load = function(url, textureAtlasFormat) {
  var completer, textureAtlas, request;
  completer = $.Completer_Completer();
  textureAtlas = $.TextureAtlas$();
  switch (textureAtlasFormat) {
    case 'json':
    case 'jsonarray':
      request = $.HttpRequest_HttpRequest();
      request.open$3('GET', url, true);
      $.add$1(request.get$on().get$load(), new $.TextureAtlas_load_anon(url, textureAtlas, completer, request));
      $.add$1(request.get$on().get$error(), new $.TextureAtlas_load_anon0(completer));
      request.send$0();
      break;
  }
  return completer.get$future();
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$.pow = function(x, exponent) {
  $.checkNum(x);
  $.checkNum(exponent);
  return Math.pow(x, exponent);
};

$.TextureAtlas__getFilenameWithoutExtension = function(filename) {
  return $.CTC6.firstMatch$1(filename).group$1(1);
};

$.TextureAtlas__replaceFilename = function(url, filename) {
  var path = $.CTC5.firstMatch$1(url).group$1(1);
  return path == null ? filename : $.S(path) + $.S(filename);
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$.HttpRequest_HttpRequest = function() {
  return new XMLHttpRequest();;
};

$.Grafix_getChain = function(color, direction) {
  var bitmap = $.Bitmap$($.Grafix_resource.getTextureAtlas$1('Elements').getBitmapData$1('Chain' + $.S(color) + $.S(direction)), 'auto');
  bitmap.set$pivotX(25);
  bitmap.set$pivotY(25);
  return bitmap;
};

$.Grafix_getLink = function(color, direction) {
  var bitmap = $.Bitmap$($.Grafix_resource.getTextureAtlas$1('Elements').getBitmapData$1('Link' + $.S(color) + $.S(direction)), 'auto');
  bitmap.set$pivotX(25);
  bitmap.set$pivotY(25);
  return bitmap;
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$.Grafix_getSpecial = function(special) {
  var bitmap = $.Bitmap$($.Grafix_resource.getTextureAtlas$1('Elements').getBitmapData$1(special), 'auto');
  bitmap.set$pivotX(25);
  bitmap.set$pivotY(25);
  return bitmap;
};

$.Grafix_getJokerLink = function(direction) {
  var textureAtlas, tmp;
  textureAtlas = $.Grafix_resource.getTextureAtlas$1('Elements');
  tmp = $._ListImpl_List(null);
  tmp.push(textureAtlas.getBitmapData$1('JokerLink' + $.S(direction) + '0'));
  tmp.push(textureAtlas.getBitmapData$1('JokerLink' + $.S(direction) + '1'));
  tmp.push(textureAtlas.getBitmapData$1('JokerLink' + $.S(direction) + '2'));
  tmp.push(textureAtlas.getBitmapData$1('JokerLink' + $.S(direction) + '3'));
  tmp.push(textureAtlas.getBitmapData$1('JokerLink' + $.S(direction) + '4'));
  return tmp;
};

$.Grafix_getLevelUpAnimation = function() {
  var sprite, textureAtlas, offset, i, bitmap, subSprite, t1, tween1, tween2, t2, t3;
  sprite = $.Sprite$();
  textureAtlas = $.Grafix_resource.getTextureAtlas$1('Levelup');
  for (offset = 0, i = 0; i < 7; ++i) {
    bitmap = $.Bitmap$(textureAtlas.getBitmapData$1('LevelUp' + $.S(i)), 'auto');
    bitmap.set$x($.div($.neg(bitmap.get$width()), 2));
    bitmap.set$y($.div($.neg(bitmap.get$height()), 2));
    subSprite = $.Sprite$();
    subSprite.addChild$1(bitmap);
    t1 = $.div(bitmap.get$width(), 2);
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    subSprite.set$x(offset + t1);
    subSprite.set$scaleX(0);
    subSprite.set$scaleY(0);
    sprite.addChild$1(subSprite);
    tween1 = $.Tween$(subSprite, 2, $.Transitions_easeOutElastic);
    tween1.animate$2('scaleX', 1);
    tween1.animate$2('scaleY', 1);
    tween1.set$delay(i * 0.05);
    tween2 = $.Tween$(subSprite, 0.4, $.Transitions_linear);
    tween2.animate$2('scaleX', 0);
    tween2.animate$2('scaleY', 0);
    tween2.set$delay(3);
    $.add$1($.renderJuggler, tween1);
    $.add$1($.renderJuggler, tween2);
    t2 = offset + 5;
    t3 = bitmap.get$width();
    if (typeof t3 !== 'number')
      throw $.iae(t3);
    offset = t2 + t3;
  }
  return sprite;
};

$.Grafix_getJokerChain = function(direction) {
  var textureAtlas, tmp;
  textureAtlas = $.Grafix_resource.getTextureAtlas$1('Elements');
  tmp = $._ListImpl_List(null);
  tmp.push(textureAtlas.getBitmapData$1('JokerChain' + $.S(direction) + '0'));
  tmp.push(textureAtlas.getBitmapData$1('JokerChain' + $.S(direction) + '1'));
  tmp.push(textureAtlas.getBitmapData$1('JokerChain' + $.S(direction) + '2'));
  tmp.push(textureAtlas.getBitmapData$1('JokerChain' + $.S(direction) + '3'));
  tmp.push(textureAtlas.getBitmapData$1('JokerChain' + $.S(direction) + '4'));
  return tmp;
};

$.Grafix_getLock = function(color) {
  var textureAtlas, tmp;
  textureAtlas = $.Grafix_resource.getTextureAtlas$1('Locks');
  tmp = $._ListImpl_List(null);
  tmp.push(textureAtlas.getBitmapData$1('Lock' + $.S(color) + '0'));
  tmp.push(textureAtlas.getBitmapData$1('Lock' + $.S(color) + '1'));
  tmp.push(textureAtlas.getBitmapData$1('Lock' + $.S(color) + '2'));
  tmp.push(textureAtlas.getBitmapData$1('Lock' + $.S(color) + '3'));
  tmp.push(textureAtlas.getBitmapData$1('Lock' + $.S(color) + '4'));
  return tmp;
};

$.Grafix_getHeads = function() {
  var textureAtlas, tmp;
  textureAtlas = $.Grafix_resource.getTextureAtlas$1('Head');
  tmp = $._ListImpl_List(null);
  tmp.push(textureAtlas.getBitmapData$1('Head1'));
  tmp.push(textureAtlas.getBitmapData$1('Head2'));
  tmp.push(textureAtlas.getBitmapData$1('Head3'));
  tmp.push(textureAtlas.getBitmapData$1('Head2'));
  tmp.push(textureAtlas.getBitmapData$1('Head1'));
  return tmp;
};

$.Grafix_getAlarms = function() {
  var textureAtlas, tmp;
  textureAtlas = $.Grafix_resource.getTextureAtlas$1('Alarm');
  tmp = $._ListImpl_List(null);
  tmp.push(textureAtlas.getBitmapData$1('Alarm0'));
  tmp.push(textureAtlas.getBitmapData$1('Alarm1'));
  tmp.push(textureAtlas.getBitmapData$1('Alarm2'));
  tmp.push(textureAtlas.getBitmapData$1('Alarm3'));
  tmp.push(textureAtlas.getBitmapData$1('Alarm4'));
  tmp.push(textureAtlas.getBitmapData$1('Alarm5'));
  return tmp;
};

$._HttpRequestEventsImpl$ = function(_ptr) {
  return new $._HttpRequestEventsImpl(_ptr);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$.Sprite$ = function() {
  var t1 = new $.Sprite(false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  return t1;
};

$.Game$ = function() {
  var t1 = new $.Game(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.Game$0();
  return t1;
};

$.InfoBox$ = function() {
  var t1 = new $.InfoBox(null, null, null, null, null, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.InfoBox$0();
  return t1;
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.SimpleButton$ = function(upState, overState, downState, hitTestState) {
  var t1 = new $.SimpleButton(upState, overState, downState, hitTestState, true, true, null, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.SimpleButton$4(upState, overState, downState, hitTestState);
  return t1;
};

$._ScriptProcessorNodeEventsImpl$ = function(_ptr) {
  return new $._ScriptProcessorNodeEventsImpl(_ptr);
};

$.Board$ = function(chains, locks, jokers, blocks, doubles, quints, colors) {
  var t1 = new $.Board(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.Board$7(chains, locks, jokers, blocks, doubles, quints, colors);
  return t1;
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$.TimeGauge$ = function(time, bitmapData, direction) {
  var t1 = new $.TimeGauge(false, 0, 0, null, true, null, null, null, null, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.Gauge$2(bitmapData, direction);
  t1.TimeGauge$3(time, bitmapData, direction);
  return t1;
};

$.Futures_wait = function(futures) {
  var t1, completer, result, values, i, future;
  t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC0);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_1 = futures.length;
  values = $._ListImpl_List(futures.length);
  for (i = 0; i < futures.length; ++i) {
    future = futures[i];
    future.then$1(new $.Futures_wait_anon(t1, i, result, completer, values));
    future.handleException$1(new $.Futures_wait_anon0(future, result, completer));
  }
  return result;
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$.Head$ = function() {
  var t1 = new $.Head(null, null, null, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.Head$0();
  return t1;
};

$._color2rgb = function(color) {
  var r, g, b;
  r = $.and($.shr(color, 16), 255);
  g = $.and($.shr(color, 8), 255);
  b = $.and($.shr(color, 0), 255);
  return 'rgb(' + $.S(r) + ',' + $.S(g) + ',' + $.S(b) + ')';
};

$._color2rgba = function(color) {
  var a, r, g, b;
  a = $.and($.shr(color, 24), 255);
  r = $.and($.shr(color, 16), 255);
  g = $.and($.shr(color, 8), 255);
  b = $.and($.shr(color, 0), 255);
  return 'rgba(' + $.S(r) + ',' + $.S(g) + ',' + $.S(b) + ',' + $.S($.div(a, 255)) + ')';
};

$._getBoundsTransformedHelper = function(matrix, width, height, returnRectangle) {
  var x2, y2, x3, y3, x4, y4, left, top$, right, bottom;
  x2 = $.mul(width, matrix.get$a());
  y2 = $.mul(width, matrix.get$b());
  x3 = $.add($.mul(width, matrix.get$a()), $.mul(height, matrix.get$c()));
  y3 = $.add($.mul(width, matrix.get$b()), $.mul(height, matrix.get$d()));
  x4 = $.mul(height, matrix.get$c());
  y4 = $.mul(height, matrix.get$d());
  left = $.gtB(0, x2) ? x2 : 0;
  if ($.gtB(left, x3))
    left = x3;
  if ($.gtB(left, x4))
    left = x4;
  top$ = $.gtB(0, y2) ? y2 : 0;
  if ($.gtB(top$, y3))
    top$ = y3;
  if ($.gtB(top$, y4))
    top$ = y4;
  right = $.ltB(0, x2) ? x2 : 0;
  if ($.ltB(right, x3))
    right = x3;
  if ($.ltB(right, x4))
    right = x4;
  bottom = $.ltB(0, y2) ? y2 : 0;
  if ($.ltB(bottom, y3))
    bottom = y3;
  if ($.ltB(bottom, y4))
    bottom = y4;
  if (returnRectangle == null)
    returnRectangle = $.Rectangle$zero();
  returnRectangle.set$x($.add(matrix.get$tx(), left));
  returnRectangle.set$y($.add(matrix.get$ty(), top$));
  returnRectangle.set$width($.sub(right, left));
  returnRectangle.set$height($.sub(bottom, top$));
  return returnRectangle;
};

$.Alarm$ = function() {
  var t1 = new $.Alarm(null, null, null, null, null, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.Alarm$0();
  return t1;
};

$.MutationObserver_MutationObserver = function(callback) {
  return $._MutationObserverFactoryProvider_createMutationObserver(callback);
};

$.BoardEvent$ = function(type, info, bubbles) {
  var t1 = new $.BoardEvent(null, null, null, null, null, null, null, null);
  t1.Event$2(type, bubbles);
  t1.BoardEvent$3(type, info, bubbles);
  return t1;
};

$._StringImpl_String$fromCharCodes = function(charCodes) {
  $.checkNull(charCodes);
  if (!$.isJsArray(charCodes))
    charCodes = $._ListImpl_List$from(charCodes);
  return $.Primitives_stringFromCharCodes(charCodes);
};

$._StringImpl__toJsStringArray = function(strings) {
  var length$, i, string, array;
  if (typeof strings !== 'object' || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $._StringImpl__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $._ListImpl_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$.MessageBox$ = function(text) {
  var t1 = new $.MessageBox(null, null, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.MessageBox$1(text);
  return t1;
};

$._ListImpl_List = function(length$) {
  return $.Primitives_newList(length$);
};

$._ListImpl_List$from = function(other) {
  var result, t1;
  result = $._ListImpl_List(null);
  for (t1 = $.iterator(other); t1.get$hasNext() === true;)
    result.push(t1.next$0());
  return result;
};

$.DelayedCall$ = function(action, delay) {
  var t1 = new $.DelayedCall(0, 0, 1, null);
  t1.DelayedCall$2(action, delay);
  return t1;
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.HashMapImplementation$ = function() {
  var t1 = new $.HashMapImplementation(null, null, null, null, null);
  t1.HashMapImplementation$0();
  return t1;
};

$.HashMapImplementation__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.HashMapImplementation__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return (currentProbe + numberOfProbes & length$ - 1) >>> 0;
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, 'Object')) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.charCodeAt(name$, 0) === 36 ? $.substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.iterator(charCodes); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
  }
  return String.fromCharCode.apply(null, charCodes);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$.Primitives_parseInt = function(string) {
  var match, base, result;
  $.checkString(string);
  match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  base = !($.index(match, 1) == null) ? 16 : 10;
  result = parseInt(string, base);
  if ($.get$isNaN(result) === true)
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.int_parse = function(source) {
  return $.Primitives_parseInt(source);
};

$.Primitives_parseDouble = function(string) {
  var result;
  $.checkString(string);
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(string))
    throw $.$$throw($.FormatException$(string));
  result = parseFloat(string);
  if ($.get$isNaN(result) === true && !$.eqB(string, 'NaN'))
    throw $.$$throw($.FormatException$(string));
  return result;
};

$._MessagePortEventsImpl$ = function(_ptr) {
  return new $._MessagePortEventsImpl(_ptr);
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DOMWindowCrossFrameImpl$ = function(_window) {
  return new $._DOMWindowCrossFrameImpl(_window);
};

$._DOMWindowCrossFrameImpl__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrameImpl$(w);
};

$.SoundTransform$ = function(volume, pan) {
  return new $.SoundTransform(volume, pan, 1, 0, 1, 0);
};

$._FrameSetElementEventsImpl$ = function(_ptr) {
  return new $._FrameSetElementEventsImpl(_ptr);
};

$.MockSoundChannel$ = function(mockSound, loop, soundTransform) {
  var t1 = new $.MockSoundChannel(null, null, null);
  t1.MockSoundChannel$3(mockSound, loop, soundTransform);
  return t1;
};

$._SVGElementInstanceEventsImpl$ = function(_ptr) {
  return new $._SVGElementInstanceEventsImpl(_ptr);
};

$.AudioElementSoundChannel$ = function(audioElementSound, loop, soundTransform) {
  var t1 = new $.AudioElementSoundChannel(null, null, null, null, null);
  t1.AudioElementSoundChannel$3(audioElementSound, loop, soundTransform);
  return t1;
};

$.NullPointerException$ = function(functionName, arguments$) {
  return new $.NullPointerException(functionName, arguments$);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$._EventListenerListImpl$ = function(_ptr, _type) {
  return new $._EventListenerListImpl(_ptr, _type);
};

$._MediaStreamTrackListEventsImpl$ = function(_ptr) {
  return new $._MediaStreamTrackListEventsImpl(_ptr);
};

$.Random_Random = function(seed) {
  return $.CTC7;
};

$.Field$ = function(color, direction) {
  var t1 = new $.Field(null, null, null, null, null, null, null, null, null, null, null);
  t1.Field$2(color, direction);
  return t1;
};

$._MediaStreamTrackEventsImpl$ = function(_ptr) {
  return new $._MediaStreamTrackEventsImpl(_ptr);
};

$.ImageElement_ImageElement = function(height, src, width) {
  var t1, t2, t3;
  t1 = $ === height;
  if (t1)
    height = null;
  t2 = $ === src;
  if (t2)
    src = null;
  t3 = $ === width;
  if (t3)
    width = null;
  if (t2)
    return $._Elements_createImageElement(null, null, null);
  if (t3)
    return $._Elements_createImageElement(src, null, null);
  if (t1)
    return $._Elements_createImageElement(src, width, null);
  return $._Elements_createImageElement(src, width, height);
};

$.ValueCounter$ = function() {
  return new $.ValueCounter(0);
};

$.Lock$ = function(color) {
  var t1 = new $.Lock(null, null, null, null, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.Lock$1(color);
  return t1;
};

$._AudioElementFactoryProvider_createAudioElement = function(src) {
  if (src == null)
    return new Audio();
  return new Audio(src);
};

$.CanvasElement_CanvasElement = function(height, width) {
  var t1, t2;
  t1 = $ === height;
  if (t1)
    height = null;
  t2 = $ === width;
  if (t2)
    width = null;
  if (t2)
    return $._Elements_createCanvasElement(null, null);
  if (t1)
    return $._Elements_createCanvasElement(width, null);
  return $._Elements_createCanvasElement(width, height);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.Transition$ = function(startValue, targetValue, time, transitionFunction) {
  var t1 = new $.Transition(null, null, null, null, null, null, null, null, null, null, null, null);
  t1.Transition$4(startValue, targetValue, time, transitionFunction);
  return t1;
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$._MediaStreamEventsImpl$ = function(_ptr) {
  return new $._MediaStreamEventsImpl(_ptr);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$._FilteredElementList$ = function(node) {
  return new $._FilteredElementList(node, node.get$nodes());
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$.Collections_filter = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.iterator(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      destination.push(t2);
  }
  return destination;
};

$.Collections__emitCollection = function(c, result, visiting) {
  var isList, t1, first, t2;
  $.add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  $.add$1(result, isList ? '[' : '{');
  for (t1 = $.iterator(c), first = true; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (!first)
      $.add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
    first = false;
  }
  $.add$1(result, isList ? ']' : '}');
  $.removeLast(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer('');
  $.Collections__emitCollection(c, result, $._ListImpl_List(null));
  return $.toString(result);
};

$.RangeError$value = function(value) {
  return new $.RangeError('value ' + $.S(value));
};

$._DocumentEventsImpl$ = function(_ptr) {
  return new $._DocumentEventsImpl(_ptr);
};

$._FileWriterEventsImpl$ = function(_ptr) {
  return new $._FileWriterEventsImpl(_ptr);
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer('');
  $.Maps__emitMap(m, result, $._ListImpl_List(null));
  return $.toString(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.add$1(visiting, m);
  $.add$1(result, '{');
  t1.first_1 = true;
  $.forEach(m, new $.Maps__emitMap_anon(t1, visiting, result));
  $.add$1(result, '}');
  $.removeLast(visiting);
};

$._NodeListWrapper$ = function(list) {
  return new $._NodeListWrapper(list);
};

$._Collections_filter = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.iterator(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      destination.push(t2);
  }
  return destination;
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$._FileReaderEventsImpl$ = function(_ptr) {
  return new $._FileReaderEventsImpl(_ptr);
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$._LocalWindowEventsImpl$ = function(_ptr) {
  return new $._LocalWindowEventsImpl(_ptr);
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$multiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$ignoreCase(), t2);
  $.regExpAttachGlobalNative(re);
  return re;
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$._FixedSizeListIterator$ = function(array) {
  return new $._FixedSizeListIterator($.get$length(array), array, 0);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$._Collections_contains = function(iterable, element) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$._Elements_createCanvasElement = function(width, height) {
  var _e = $._document().$dom_createElement$1('canvas');
  if (!(width == null))
    _e.set$width(width);
  if (!(height == null))
    _e.set$height(height);
  return _e;
};

$._Elements_createImageElement = function(src, width, height) {
  var _e = $._document().$dom_createElement$1('img');
  if (!(src == null))
    _e.set$src(src);
  if (!(width == null))
    _e.set$width(width);
  if (!(height == null))
    _e.set$height(height);
  return _e;
};

$._WorkerEventsImpl$ = function(_ptr) {
  return new $._WorkerEventsImpl(_ptr);
};

$._AbstractWorkerEventsImpl$ = function(_ptr) {
  return new $._AbstractWorkerEventsImpl(_ptr);
};

$._EventsImpl$ = function(_ptr) {
  return new $._EventsImpl(_ptr);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$._AudioContextFactoryProvider_createAudioContext = function() {
  return new (window.AudioContext || window.webkitAudioContext)();
};

$.WebAudioApiSoundChannel$ = function(webAudioApiSound, loop, soundTransform) {
  var t1 = new $.WebAudioApiSoundChannel(null, null, null, null, null, null);
  t1.WebAudioApiSoundChannel$3(webAudioApiSound, loop, soundTransform);
  return t1;
};

$.JSON_parse = function(json) {
  return $._JsonParser$(json).parseToplevel$0();
};

$._EventSourceEventsImpl$ = function(_ptr) {
  return new $._EventSourceEventsImpl(_ptr);
};

$._WorkerContextEventsImpl$ = function(_ptr) {
  return new $._WorkerContextEventsImpl(_ptr);
};

$._JsonParser$ = function(json) {
  var t1 = new $._JsonParser(json, $.get$length(json), 0);
  t1._JsonParser$1(json);
  return t1;
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isIE = function() {
  return $._Device_isOpera() !== true && $.contains$2($._Device_userAgent(), 'MSIE', 0) === true;
};

$._Device_isOpera = function() {
  return $.contains$2($._Device_userAgent(), 'Opera', 0);
};

$._Device_isFirefox = function() {
  return $.contains$2($._Device_userAgent(), 'Firefox', 0);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$._TextTrackListEventsImpl$ = function(_ptr) {
  return new $._TextTrackListEventsImpl(_ptr);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== 'string' && (typeof src !== 'object' || src === null || src.constructor !== Array && !src.is$JavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null, false);
};

$._TextTrackEventsImpl$ = function(_ptr) {
  return new $._TextTrackEventsImpl(_ptr);
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._Lists_getRange = function(a, start, length$, accumulator) {
  var end, i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== 'number')
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$('length'));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  end = start + length$;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$._BodyElementEventsImpl$ = function(_ptr) {
  return new $._BodyElementEventsImpl(_ptr);
};

$.Bonus$ = function(points) {
  var t1 = new $.Bonus(null, false, false, null, true, true, false, true, true, 0, 0, 0, 0, 0, 1, 1, 0, null, null, 1, true, '', null, null, null, null, null);
  t1.DisplayObject$0();
  t1.DisplayObjectContainer$0();
  t1.Bonus$1(points);
  return t1;
};

$.DivElement_DivElement = function() {
  return $._document().$dom_createElement$1('div');
};

$._ElementRectImpl$ = function(element) {
  return new $._ElementRectImpl($._SimpleClientRect$(element.get$clientLeft(), element.get$clientTop(), element.get$clientWidth(), element.get$clientHeight()), $._SimpleClientRect$(element.get$offsetLeft(), element.get$offsetTop(), element.get$offsetWidth(), element.get$offsetHeight()), $._SimpleClientRect$(element.get$scrollLeft(), element.get$scrollTop(), element.get$scrollWidth(), element.get$scrollHeight()), element.getBoundingClientRect$0(), element.getClientRects$0());
};

$._MeasurementRequest$ = function(computeValue, completer) {
  return new $._MeasurementRequest(computeValue, completer, null, false);
};

$._MeasurementScheduler__MeasurementScheduler$best = function(callback) {
  if (!!(window.MutationObserver || window.WebKitMutationObserver))
    return $._MutationObserverScheduler$(callback);
  return $._PostMessageScheduler$(callback);
};

$._MutationObserverScheduler$ = function(callback) {
  var t1 = new $._MutationObserverScheduler(null, null, false, callback);
  t1._MutationObserverScheduler$1(callback);
  return t1;
};

$._PostMessageScheduler$ = function(callback) {
  var t1 = new $._PostMessageScheduler('DART-MEASURE', false, callback);
  t1._PostMessageScheduler$1(callback);
  return t1;
};

$.contains$1$bailout = function(state0, receiver, other) {
  var i;
  if (typeof receiver === 'string')
    return $.contains$2(receiver, other, 0);
  else if ($.isJsArray(receiver)) {
    for (i = 0; $.ltB(i, $.get$length(receiver)); ++i)
      if (other === $.index(receiver, i))
        return true;
    return false;
  }
  return receiver.contains$1(other);
};

$._Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var i;
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.add(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._Lists_getRange$bailout = function(state0, a, start, length$, accumulator) {
  var end, i;
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$('length'));
  if ($.ltB(start, 0))
    throw $.$$throw($.RangeError$value(start));
  end = $.add(start, length$);
  if ($.gtB(end, $.get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; $.ltB(i, end); i = $.add(i, 1))
    accumulator.push($.index(a, i));
  return accumulator;
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j)
      $.indexSet(dst, j, $.index(src, i));
  else
    for (j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j)
      $.indexSet(dst, j, $.index(src, i));
};

$.Arrays_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var i;
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i)
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._StringImpl__toJsStringArray$bailout = function(state0, strings) {
  var length$, i, string, array;
  $.checkNull(strings);
  length$ = $.get$length(strings);
  if ($.isJsArray(strings)) {
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $._ListImpl_List(length$);
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      if (i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.listInsertRange$bailout = function(state0, receiver, start, length$, initialValue) {
  var receiverLength, t1, t2, i;
  if ($.eqB(length$, 0))
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  receiverLength = receiver.length;
  if (start < 0 || start > receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = receiverLength + length$;
  $.set$length(receiver, t1);
  t2 = start + length$;
  $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
  if (!(initialValue == null))
    for (i = start; i < t2; ++i)
      $.indexSet(receiver, i, initialValue);
  $.set$length(receiver, t1);
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  var completer, result, values, i, future;
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC0);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_1 = $.get$length(futures);
  values = $._ListImpl_List($.get$length(futures));
  for (i = 0; $.ltB(i, $.get$length(futures)); ++i) {
    future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(t1, i, result, completer, values));
    future.handleException$1(new $.Futures_wait_anon0(future, result, completer));
  }
  return result;
};

$.Transitions_easeInCubic.call$1 = $.Transitions_easeInCubic;
$.Transitions_easeInCubic.$name = "Transitions_easeInCubic";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.Transitions_easeOutCubic.call$1 = $.Transitions_easeOutCubic;
$.Transitions_easeOutCubic.$name = "Transitions_easeOutCubic";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._completeMeasurementFutures.call$0 = $._completeMeasurementFutures;
$._completeMeasurementFutures.$name = "_completeMeasurementFutures";
$.Transitions_linear.call$1 = $.Transitions_linear;
$.Transitions_linear.$name = "Transitions_linear";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.Transitions_easeOutElastic.call$1 = $.Transitions_easeOutElastic;
$.Transitions_easeOutElastic.$name = "Transitions_easeOutElastic";
Isolate.$finishClasses($$);
$$ = {};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC0 = Isolate.makeConstantList([]);
$.CTC12 = Isolate.makeConstantList(['childList', 'attributes', 'characterData', 'subtree', 'attributeOldValue', 'characterDataOldValue']);
$.CTC8 = new Isolate.$isolateProperties.ConstantMap(6, {'childList': true, 'attributes': true, 'characterData': true, 'subtree': true, 'attributeOldValue': true, 'characterDataOldValue': true}, Isolate.$isolateProperties.CTC12);
$.CTC9 = new Isolate.$isolateProperties._ExceptionImplementation('Incorrect number or type of arguments');
$.CTC1 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC3 = new Isolate.$isolateProperties.JSSyntaxRegExp('^#[_a-zA-Z]\\w*$', false, false);
$.CTC = new Isolate.$isolateProperties.NullPointerException(null, Isolate.$isolateProperties.CTC0);
$.CTC13 = new Isolate.$isolateProperties._SimpleClientRect(0, 0, 0, 0);
$.CTC11 = new Isolate.$isolateProperties.Object();
$.CTC2 = new Isolate.$isolateProperties.JSSyntaxRegExp('[-[\\]{}()*+?.,\\\\^$|#\\s]', false, false);
$.CTC7 = new Isolate.$isolateProperties._Random();
$.CTC6 = new Isolate.$isolateProperties.JSSyntaxRegExp('(.+?)(\\.[^.]*$|$)', false, true);
$.CTC5 = new Isolate.$isolateProperties.JSSyntaxRegExp('^(.*/)?(?:$|(.+?)(?:(\\.[^.]*$)|$))', false, true);
$.CTC4 = new Isolate.$isolateProperties.JSSyntaxRegExp('\\.(ogg|mp3|wav)$', false, true);
$.CTC10 = new Isolate.$isolateProperties.EmptyElementRect(Isolate.$isolateProperties.CTC13, Isolate.$isolateProperties.CTC13, Isolate.$isolateProperties.CTC13, Isolate.$isolateProperties.CTC13, Isolate.$isolateProperties.CTC0);
$.TextEvent_TEXT_INPUT = 'textInput';
$.KeyLocation_STANDARD = 0;
$.KeyLocation_LEFT = 1;
$.KeyLocation_RIGHT = 2;
$.BoardStatus_Playing = 1;
$.KeyLocation_NUM_PAD = 3;
$.BoardStatus_Finalizing = 2;
$.KeyLocation_D_PAD = 4;
$.BoardStatus_Timeouting = 3;
$.KeyLocation_LEFT0 = 1;
$.KeyLocation_RIGHT0 = 2;
$.KeyLocation_NUMPAD = 3;
$.KeyLocation_MOBILE = 4;
$.KeyLocation_JOYSTICK = 5;
$.EventPhase_CAPTURING_PHASE = 1;
$.EventPhase_AT_TARGET = 2;
$.EventPhase_BUBBLING_PHASE = 3;
$._getTypeNameOf = null;
$.stageBackground = null;
$.stageForeground = null;
$.renderLoop = null;
$.renderJuggler = null;
$.loadingBitmap = null;
$.loadingBitmapTween = null;
$.loadingTextField = null;
$._cachedBrowserPrefix = null;
$.MouseEvent_CLICK = 'click';
$.MouseEvent_DOUBLE_CLICK = 'doubleClick';
$.MouseEvent_MOUSE_DOWN = 'mouseDown';
$.MouseEvent_MOUSE_UP = 'mouseUp';
$.MouseEvent_MOUSE_MOVE = 'mouseMove';
$.MouseEvent_MOUSE_OUT = 'mouseOut';
$.MouseEvent_MOUSE_OVER = 'mouseOver';
$.MouseEvent_MOUSE_WHEEL = 'mouseWheel';
$.MouseEvent_MIDDLE_CLICK = 'middleClick';
$.MouseEvent_MIDDLE_MOUSE_DOWN = 'middleMouseDown';
$.MouseEvent_MIDDLE_MOUSE_UP = 'middleMouseUp';
$.MouseEvent_RIGHT_CLICK = 'rightClick';
$.MouseEvent_RIGHT_MOUSE_DOWN = 'rightMouseDown';
$.MouseEvent_RIGHT_MOUSE_UP = 'rightMouseUp';
$.Event_ADDED = 'added';
$.Event_ADDED_TO_STAGE = 'addedToStage';
$.Event_ENTER_FRAME = 'enterFrame';
$.Event_REMOVED = 'removed';
$.Event_REMOVED_FROM_STAGE = 'removedFromStage';
$.KeyboardEvent_KEY_DOWN = 'keyDown';
$.KeyboardEvent_KEY_UP = 'keyUp';
$.MouseCursor_AUTO = 'auto';
$.MouseCursor_ARROW = 'arrow';
$.MouseCursor_BUTTON = 'button';
$.MouseCursor_HAND = 'hand';
$.MouseCursor_IBEAM = 'ibeam';
$.MouseCursor_WAIT = 'wait';
$.Mouse___eventDispatcher = null;
$.Mouse__isCursorHidden = false;
$.Mouse__customCursor = 'auto';
$._DateImpl__MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
$.SoundMixer__audioContextPrivate = null;
$.SoundMixer__engine = null;
$._pendingRequests = null;
$._pendingMeasurementFrameCallbacks = null;
$._measurementScheduler = null;
$._TimerFactory__factory = null;
$.double_NAN = (0/0);
$.double_INFINITY = (1/0);
$.double_NEGATIVE_INFINITY = (-1/0);
$.PI = 3.141592653589793;
$.Sound__supportedTypes = null;
$.TextureAtlasFormat_JSON = 'json';
$.TextureAtlasFormat_JSONARRAY = 'jsonarray';
$.Grafix_resource = null;
$.Sounds_resource = null;
$.Texts_resource = null;
$.StageRenderMode_AUTO = 'auto';
$.StageRenderMode_STOP = 'stop';
$.StageRenderMode_ONCE = 'once';
$._ReceivePortImpl__nextFreeId = 1;
$.TimeGauge_TIME_OUT = 'TIME_OUT';
$.Gauge_DIRECTION_UP = 'DIRECTION_UP';
$.Gauge_DIRECTION_RIGHT = 'DIRECTION_RIGHT';
$.Gauge_DIRECTION_DOWN = 'DIRECTION_DOWN';
$.Gauge_DIRECTION_LEFT = 'DIRECTION_LEFT';
$.BoardEvent_Explosion = 'Explosion';
$.BoardEvent_Unlocked = 'Unlocked';
$.BoardEvent_Finalized = 'Finalized';
$.BoardEvent_Timeouted = 'Timeouted';
$.HashMapImplementation__DELETED_KEY = Isolate.$isolateProperties.CTC1;
$.HashMapImplementation__INITIAL_CAPACITY = 8;
$.Primitives_hashCodeSeed = 0;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.TextFormatAlign_CENTER = 'center';
$.TextFormatAlign_END = 'end';
$.TextFormatAlign_JUSTIFY = 'justify';
$.TextFormatAlign_RIGHT = 'right';
$.TextFieldType_DYNAMIC = 'dynamic';
$.GridFitType_PIXEL = 'pixel';
$.TextFieldAutoSize_NONE = 'none';
$._JsonParser_BACKSPACE = 8;
$._JsonParser_TAB = 9;
$._JsonParser_NEW_LINE = 10;
$._JsonParser_SPACE = 32;
$._JsonParser_QUOTE = 34;
$._JsonParser_MINUS = 45;
$._JsonParser_DOT = 46;
$._JsonParser_SLASH = 47;
$._JsonParser_CHAR_0 = 48;
$._JsonParser_COMMA = 44;
$._JsonParser_FORM_FEED = 12;
$._JsonParser_CHAR_2 = 50;
$._JsonParser_PLUS = 43;
$._JsonParser_CHAR_3 = 51;
$._JsonParser_CHAR_1 = 49;
$._JsonParser_CHAR_5 = 53;
$._JsonParser_CHAR_6 = 54;
$._JsonParser_CHAR_7 = 55;
$._JsonParser_CHAR_9 = 57;
$._JsonParser_CHAR_8 = 56;
$._JsonParser_COLON = 58;
$._JsonParser_CHAR_CAPITAL_E = 69;
$._JsonParser_LBRACKET = 91;
$._JsonParser_BACKSLASH = 92;
$._JsonParser_RBRACKET = 93;
$._JsonParser_CHAR_B = 98;
$._JsonParser_CHAR_E = 101;
$._JsonParser_CHAR_N = 110;
$._JsonParser_CHAR_F = 102;
$._JsonParser_CHAR_T = 116;
$._JsonParser_CHAR_U = 117;
$._JsonParser_LBRACE = 123;
$._JsonParser_STRING_LITERAL = 34;
$._JsonParser_NUMBER_LITERAL = 45;
$._JsonParser_NULL_LITERAL = 110;
$._JsonParser_FALSE_LITERAL = 102;
$._JsonParser_TRUE_LITERAL = 116;
$._JsonParser_WHITESPACE = 32;
$._JsonParser_CHAR_R = 114;
$._JsonParser_RBRACE = 125;
$._JsonParser_NULL_STRING = 'null';
$._JsonParser_TRUE_STRING = 'true';
$._JsonParser_FALSE_STRING = 'false';
$._JsonParser_tokens = null;
$._JsonParser_LAST_ASCII = 125;
$.Special_Joker = 'Joker';
$.Special_Block = 'Block';
$._JsonParser_CHAR_4 = 52;
$._JsonParser_CARRIAGE_RETURN = 13;
$.Special_Quint = 'Quint';
$.Special_Double = 'Double';
$.Special_None = 'None';
Isolate.$lazy($, 'enterFrame', '_EventListenerListIndex_enterFrame', 'get$_EventListenerListIndex_enterFrame', function() {
  return $._EventListenerListIndex$();
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''] || [];
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method !== '') {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$_FileImpl: function() { return false; },
 is$Element: function() { return false; },
 is$_ImageDataImpl: function() { return false; },
 is$_BlobImpl: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$_ArrayBufferViewImpl: function() { return false; },
 is$Collection: function() { return false; },
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$_FileListImpl: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$ImageData: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$List: function() { return false; },
 is$_ArrayBufferImpl: function() { return false; },
 is$Map: function() { return false; },
 is$File: function() { return false; },
 is$Blob: function() { return false; }
});

$.$defineNativeClass('HTMLElement', {"": []
});

$.$defineNativeClass('AbstractWorker', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._AbstractWorkerEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('AnalyserNode', {"": []
});

$.$defineNativeClass('HTMLAnchorElement', {"": ["name?", "target?", "type?"],
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationEvent', {"": []
});

$.$defineNativeClass('WebKitAnimation', {"": ["direction?", "duration?", "ended?", "name?"],
 pause$0: function() {
  return this.pause();
},
 play$0: function() {
  return this.play();
}
});

$.$defineNativeClass('HTMLAppletElement', {"": ["align?", "height=", "name?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', {"": ["target?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', {"": [],
 is$_ArrayBufferImpl: function() { return true; },
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {"": [],
 is$_ArrayBufferViewImpl: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"": ["name?", "value="]
});

$.$defineNativeClass('AudioBuffer', {"": ["duration?", "gain?", "length?"]
});

$.$defineNativeClass('AudioBufferSourceNode', {"": ["buffer!", "gain?", "loop!"],
 start$3: function(when, grainOffset, grainDuration) {
  var t1, t2;
  t1 = $ === grainOffset;
  if (t1)
    grainOffset = null;
  t1 = !t1;
  t2 = $ === grainDuration;
  if (t2)
    grainDuration = null;
  t2 = !t2;
  if (!!this.start)
    if (t2)
      this.start(when, grainOffset, grainDuration);
    else if (t1)
      this.start(when, grainOffset);
    else
      this.start(when);
  else if (t2)
    this.noteOn(when, grainOffset, grainDuration);
  else if (t1)
    this.noteOn(when, grainOffset);
  else
    this.noteOn(when);
},
 start$1: function(when) {
  return this.start$3(when,$,$)
},
 stop$1: function(when) {
  if (!!this.stop)
    this.stop(when);
  else
    this.noteOff(when);
}
});

$.$defineNativeClass('AudioContext', {"": ["currentTime?", "destination?"],
 get$on: function() {
  return $._AudioContextEventsImpl$(this);
},
 createBufferSource$0: function() {
  return this.createBufferSource();
},
 decodeAudioData$3: function(audioData, successCallback, errorCallback) {
  return this.decodeAudioData(audioData,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
},
 createGain$0: function() {
  if (this.createGain !== undefined)
    return this.createGain();
  else
    return this.createGainNode();
}
});

$.$defineNativeClass('AudioDestinationNode', {"": []
});

$.$defineNativeClass('HTMLAudioElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('AudioGain', {"": []
});

$.$defineNativeClass('AudioListener', {"": []
});

$.$defineNativeClass('AudioNode', {"": [],
 connect$3: function(destination, output, input) {
  return this.connect(destination,output,input);
}
});

$.$defineNativeClass('AudioParam', {"": ["name?", "value="]
});

$.$defineNativeClass('AudioProcessingEvent', {"": []
});

$.$defineNativeClass('AudioSourceNode', {"": []
});

$.$defineNativeClass('HTMLBRElement', {"": [],
 clear$0: function() { return this.clear.call$0(); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('BarInfo', {"": ["visible?"]
});

$.$defineNativeClass('HTMLBaseElement', {"": ["target?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', {"": ["color=", "size?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('BatteryManager', {"": [],
 get$on: function() {
  return $._BatteryManagerEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('BeforeLoadEvent', {"": []
});

$.$defineNativeClass('BiquadFilterNode', {"": ["gain?", "type?"]
});

$.$defineNativeClass('Blob', {"": ["size?", "type?"],
 is$_BlobImpl: function() { return true; },
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {"": [],
 get$on: function() {
  return $._BodyElementEventsImpl$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', {"": ["name?", "type?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('CDATASection', {"": []
});

$.$defineNativeClass('CSSCharsetRule', {"": []
});

$.$defineNativeClass('CSSFontFaceRule', {"": ["style?"]
});

$.$defineNativeClass('CSSImportRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframeRule', {"": ["style?"]
});

$.$defineNativeClass('WebKitCSSKeyframesRule', {"": ["name?"]
});

$.$defineNativeClass('WebKitCSSMatrix', {"": ["a?", "b?", "c?", "d?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSMediaRule', {"": []
});

$.$defineNativeClass('CSSPageRule', {"": ["style?"]
});

$.$defineNativeClass('CSSPrimitiveValue', {"": []
});

$.$defineNativeClass('CSSRule', {"": ["type?"]
});

$.$defineNativeClass('CSSRuleList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('CSSStyleDeclaration', {"": ["length?"],
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : '';
},
 setProperty$3: function(propertyName, value, priority) {
  this.setProperty(propertyName, value, priority);
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 get$bottom: function() {
  return this.getPropertyValue$1('bottom');
},
 set$bottom: function(value) {
  this.setProperty$3('bottom', value, '');
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 get$clip: function() {
  return this.getPropertyValue$1('clip');
},
 clip$0: function() { return this.get$clip().call$0(); },
 get$color: function() {
  return this.getPropertyValue$1('color');
},
 set$color: function(value) {
  this.setProperty$3('color', value, '');
},
 set$cursor: function(value) {
  this.setProperty$3('cursor', value, '');
},
 get$direction: function() {
  return this.getPropertyValue$1('direction');
},
 set$direction: function(value) {
  this.setProperty$3('direction', value, '');
},
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'filter');
},
 filter$1: function(arg0) { return this.get$filter().call$1(arg0); },
 get$font: function() {
  return this.getPropertyValue$1('font');
},
 set$font: function(value) {
  this.setProperty$3('font', value, '');
},
 get$height: function() {
  return this.getPropertyValue$1('height');
},
 set$height: function(value) {
  this.setProperty$3('height', value, '');
},
 get$left: function() {
  return this.getPropertyValue$1('left');
},
 set$left: function(value) {
  this.setProperty$3('left', value, '');
},
 get$mask: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'mask');
},
 set$mask: function(value) {
  this.setProperty$3($.S($._browserPrefix()) + 'mask', value, '');
},
 set$outline: function(value) {
  this.setProperty$3('outline', value, '');
},
 get$right: function() {
  return this.getPropertyValue$1('right');
},
 set$right: function(value) {
  this.setProperty$3('right', value, '');
},
 get$size: function() {
  return this.getPropertyValue$1('size');
},
 set$src: function(value) {
  this.setProperty$3('src', value, '');
},
 set$textAlign: function(value) {
  this.setProperty$3('text-align', value, '');
},
 get$top: function() {
  return this.getPropertyValue$1('top');
},
 set$top: function(value) {
  this.setProperty$3('top', value, '');
},
 get$transform: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'transform');
},
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.get$transform().call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 get$width: function() {
  return this.getPropertyValue$1('width');
},
 set$width: function(value) {
  this.setProperty$3('width', value, '');
},
 set$wordWrap: function(value) {
  this.setProperty$3('word-wrap', value, '');
}
});

$.$defineNativeClass('CSSStyleRule', {"": ["style?"]
});

$.$defineNativeClass('CSSStyleSheet', {"": []
});

$.$defineNativeClass('WebKitCSSTransformValue', {"": [],
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('CSSUnknownRule', {"": []
});

$.$defineNativeClass('CSSValue', {"": []
});

$.$defineNativeClass('CSSValueList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLCanvasElement', {"": ["height=", "width="],
 getContext$1: function(contextId) {
  return this.getContext(contextId);
},
 get$context2d: function() {
  return this.getContext$1('2d');
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('CanvasGradient', {"": []
});

$.$defineNativeClass('CanvasPattern', {"": []
});

$.$defineNativeClass('CanvasRenderingContext2D', {"": ["fillStyle!", "font=", "globalAlpha!", "lineWidth!", "strokeStyle!", "textAlign!", "textBaseline!"],
 arc$6: function(x, y, radius, startAngle, endAngle, anticlockwise) {
  return this.arc(x,y,radius,startAngle,endAngle,anticlockwise);
},
 beginPath$0: function() {
  return this.beginPath();
},
 clearRect$4: function(x, y, width, height) {
  return this.clearRect(x,y,width,height);
},
 clip$0: function() {
  return this.clip();
},
 drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
},
 drawImage$3: function(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y);
},
 fillRect$4: function(x, y, width, height) {
  return this.fillRect(x,y,width,height);
},
 fillText$4: function(text, x, y, maxWidth) {
  return this.fillText(text,x,y,maxWidth);
},
 fillText$3: function(text,x,y) {
  return this.fillText(text,x,y);
},
 lineTo$2: function(x, y) {
  return this.lineTo(x,y);
},
 measureText$1: function(text) {
  return this.measureText(text);
},
 moveTo$2: function(x, y) {
  return this.moveTo(x,y);
},
 rect$4: function(x, y, width, height) {
  return this.rect(x,y,width,height);
},
 restore$0: function() {
  return this.restore();
},
 save$0: function() {
  return this.save();
},
 setTransform$6: function(m11, m12, m21, m22, dx, dy) {
  return this.setTransform(m11,m12,m21,m22,dx,dy);
},
 strokeRect$5: function(x, y, width, height, lineWidth) {
  return this.strokeRect(x,y,width,height,lineWidth);
},
 strokeRect$4: function(x,y,width,height) {
  return this.strokeRect(x,y,width,height);
},
 transform$6: function(m11, m12, m21, m22, dx, dy) {
  return this.transform(m11,m12,m21,m22,dx,dy);
}
});

$.$defineNativeClass('CanvasRenderingContext', {"": ["canvas?"]
});

$.$defineNativeClass('ChannelMergerNode', {"": []
});

$.$defineNativeClass('ChannelSplitterNode', {"": []
});

$.$defineNativeClass('CharacterData', {"": ["length?"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ClientRect', {"": ["bottom?", "height?", "left?", "right?", "top?", "width?"]
});

$.$defineNativeClass('ClientRectList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Clipboard', {"": []
});

$.$defineNativeClass('CloseEvent', {"": []
});

$.$defineNativeClass('Comment', {"": []
});

$.$defineNativeClass('CompositionEvent', {"": []
});

_ConsoleImpl = (typeof console == 'undefined' ? {} : console);
_ConsoleImpl.error$1 = function(arg) {
  return this.error(arg);
};
_ConsoleImpl.get$error = function() { return new $.BoundClosure(this, 'error$1'); };
_ConsoleImpl.group$1 = function(arg) {
  return this.group(arg);
};
_ConsoleImpl.info$1 = function(arg) {
  return this.info(arg);
};
_ConsoleImpl.get$info = function() { return new $.BoundClosure(this, 'info$1'); };
$.$defineNativeClass('HTMLContentElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ConvolverNode', {"": ["buffer!"]
});

$.$defineNativeClass('Coordinates', {"": []
});

$.$defineNativeClass('Counter', {"": []
});

$.$defineNativeClass('Crypto', {"": []
});

$.$defineNativeClass('CustomEvent', {"": []
});

$.$defineNativeClass('HTMLDListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', {"": [],
 get$on: function() {
  return $._DOMApplicationCacheEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMError', {"": ["name?"]
});

$.$defineNativeClass('DOMException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMFileSystem', {"": ["name?"]
});

$.$defineNativeClass('DOMFileSystemSync', {"": ["name?"]
});

$.$defineNativeClass('DOMImplementation', {"": []
});

$.$defineNativeClass('MimeTypeArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('MimeType', {"": ["type?"]
});

$.$defineNativeClass('DOMParser', {"": []
});

$.$defineNativeClass('PluginArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Plugin', {"": ["length?", "name?"]
});

$.$defineNativeClass('Selection', {"": ["type?"],
 empty$0: function() {
  return this.empty();
},
 get$empty: function() { return new $.BoundClosure0(this, 'empty$0'); },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"": ["value="]
});

$.$defineNativeClass('DOMStringList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 contains$1: function(string) {
  return this.contains(string);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('DOMTokenList', {"": ["length?"],
 contains$1: function(token) {
  return this.contains(token);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('URL', {"": []
});

$.$defineNativeClass('HTMLDataListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DataTransferItem', {"": ["type?"]
});

$.$defineNativeClass('DataTransferItemList', {"": ["length?"],
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DataView', {"": [],
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Database', {"": []
});

$.$defineNativeClass('DatabaseSync', {"": []
});

$.$defineNativeClass('DedicatedWorkerContext', {"": [],
 get$on: function() {
  return $._DedicatedWorkerContextEventsImpl$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('DelayNode', {"": []
});

$.$defineNativeClass('HTMLDetailsElement', {"": [],
 open$3: function(arg0, arg1, arg2) { return this.open.call$3(arg0, arg1, arg2); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('DeviceMotionEvent', {"": []
});

$.$defineNativeClass('DeviceOrientationEvent', {"": ["alpha?"]
});

$.$defineNativeClass('HTMLDirectoryElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DirectoryEntry', {"": []
});

$.$defineNativeClass('DirectoryEntrySync', {"": []
});

$.$defineNativeClass('DirectoryReader', {"": []
});

$.$defineNativeClass('DirectoryReaderSync', {"": []
});

$.$defineNativeClass('HTMLDivElement', {"": ["align?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DocumentFragment', {"": [],
 get$elements: function() {
  if (this._elements == null)
    this._elements = $._FilteredElementList$(this);
  return this._elements;
},
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$rect: function() {
  return $._createMeasurementFuture(new $._DocumentFragmentImpl_rect_anon(), $.Completer_Completer());
},
 rect$4: function(arg0, arg1, arg2, arg3) { return this.get$rect().call$4(arg0, arg1, arg2, arg3); },
 get$hidden: function() {
  return false;
},
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 get$style: function() {
  return $.Element_Element$tag('div').get$style();
},
 focus$0: function() {
},
 set$hidden: function(value) {
  throw $.$$throw($.UnsupportedError$('Hidden can\'t be set for document fragments.'));
},
 get$on: function() {
  return $._ElementEventsImpl$(this);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', {"": ["body?"],
 get$on: function() {
  return $._DocumentEventsImpl$(this);
},
 $dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 query$1: function(selectors) {
  if ($.CTC3.hasMatch$1(selectors) === true)
    return this.$dom_getElementById$1($.substring$1(selectors, 1));
  return this.$dom_querySelector$1(selectors);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('DocumentType', {"": ["name?"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('DynamicsCompressorNode', {"": ["ratio?"]
});

$.$defineNativeClass('EXTTextureFilterAnisotropic', {"": []
});

$.$defineNativeClass('Element', {"": ["hidden=", "id?", "clientHeight?", "clientLeft?", "clientTop?", "clientWidth?", "offsetHeight?", "offsetLeft?", "offsetTop?", "offsetWidth?", "scrollHeight?", "scrollLeft?", "scrollTop?", "scrollWidth?", "style?"],
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
  {
  return $._ChildrenElementList$_wrap(this);
}
  } else {
    return Object.prototype.get$elements.call(this);
  }

},
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$rect: function() {
  return $._createMeasurementFuture(new $._ElementImpl_rect_anon(this), $.Completer_Completer());
},
 rect$4: function(arg0, arg1, arg2, arg3) { return this.get$rect().call$4(arg0, arg1, arg2, arg3); },
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._ElementEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 get$$$dom_children: function() {
  return this.children;
},
 get$$$dom_firstElementChild: function() {
  return this.firstElementChild;
},
 get$$$dom_lastElementChild: function() {
  return this.lastElementChild;
},
 focus$0: function() {
  return this.focus();
},
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 getClientRects$0: function() {
  return this.getClientRects();
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', {"": ["align?", "height=", "name?", "src!", "type?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('EntityReference', {"": []
});

$.$defineNativeClass('EntryArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Entry', {"": ["name?"],
 moveTo$4: function(parent, name, successCallback, errorCallback) {
  return this.moveTo(parent,name,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
},
 moveTo$2: function(parent$,name$) {
  return this.moveTo(parent$,name$);
},
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', {"": ["name?"],
 moveTo$2: function(parent, name) {
  return this.moveTo(parent,name);
},
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ErrorEvent', {"": ["message?"]
});

$.$defineNativeClass('EventException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Event', {"": ["bubbles?", "eventPhase?", "type?"],
 get$target: function() {
  return $._convertNativeToDart_EventTarget(this.get$_lib_target());
},
 get$_lib_target: function() {
  return this.target;
},
 preventDefault$0: function() {
  return this.preventDefault();
}
});

$.$defineNativeClass('EventSource', {"": [],
 get$on: function() {
  return $._EventSourceEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._EventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', {"": ["elements?", "name?", "type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('FileEntry', {"": []
});

$.$defineNativeClass('FileEntrySync', {"": []
});

$.$defineNativeClass('FileError', {"": []
});

$.$defineNativeClass('FileException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('File', {"": ["name?"],
 is$_FileImpl: function() { return true; },
 is$File: function() { return true; },
 is$Blob: function() { return true; }
});

$.$defineNativeClass('FileList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_FileListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('FileReader', {"": ["error?"],
 get$on: function() {
  return $._FileReaderEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileReaderSync', {"": []
});

$.$defineNativeClass('FileWriter', {"": ["error?", "length?"],
 get$on: function() {
  return $._FileWriterEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"": ["length?"]
});

$.$defineNativeClass('Float32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Float64Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', {"": ["color=", "size?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('FormData', {"": []
});

$.$defineNativeClass('HTMLFormElement', {"": ["length?", "name?", "target?"],
 reset$0: function() {
  return this.reset();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', {"": ["height?", "name?", "src!", "width?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', {"": [],
 get$on: function() {
  return $._FrameSetElementEventsImpl$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('GainNode', {"": ["gain?"]
});

$.$defineNativeClass('Gamepad', {"": ["id?"]
});

$.$defineNativeClass('GamepadList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Geolocation', {"": []
});

$.$defineNativeClass('Geoposition', {"": []
});

$.$defineNativeClass('HTMLHRElement', {"": ["align?", "size?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {"": [],
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HashChangeEvent', {"": []
});

$.$defineNativeClass('HTMLHeadElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', {"": ["align?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHtmlElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequestException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequest', {"": ["response?", "responseText?", "responseType!"],
 get$on: function() {
  return $._HttpRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 open$5: function(method, url, async, user, password) {
  return this.open(method,url,async,user,password);
},
 open$3: function(method,url,async) {
  return this.open(method,url,async);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
},
 send$0: function() {
  return this.send();
}
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', {"": []
});

$.$defineNativeClass('XMLHttpRequestUpload', {"": [],
 get$on: function() {
  return $._HttpRequestUploadEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBAny', {"": []
});

$.$defineNativeClass('IDBCursor', {"": ["direction?", "key?"]
});

$.$defineNativeClass('IDBCursorWithValue', {"": ["value?"]
});

$.$defineNativeClass('IDBDatabaseException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBDatabase', {"": ["name?"],
 get$on: function() {
  return $._IDBDatabaseEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBFactory', {"": []
});

$.$defineNativeClass('IDBIndex', {"": ["name?"]
});

$.$defineNativeClass('IDBKey', {"": []
});

$.$defineNativeClass('IDBKeyRange', {"": []
});

$.$defineNativeClass('IDBObjectStore', {"": ["name?"],
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
  return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('IDBOpenDBRequest', {"": [],
 get$on: function() {
  return $._IDBOpenDBRequestEventsImpl$(this);
}
});

$.$defineNativeClass('IDBRequest', {"": ["error?"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._IDBRequestEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBTransaction', {"": ["error?"],
 get$on: function() {
  return $._IDBTransactionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeRequest', {"": [],
 get$on: function() {
  return $._IDBVersionChangeRequestEventsImpl$(this);
}
});

$.$defineNativeClass('HTMLIFrameElement', {"": ["align?", "height=", "name?", "src!", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('IceCandidate', {"": []
});

$.$defineNativeClass('ImageData', {"": ["height?", "width?"],
 is$_ImageDataImpl: function() { return true; },
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"": ["align?", "height=", "name?", "naturalHeight?", "naturalWidth?", "src!", "width=", "x?", "y?"],
 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', {"": ["align?", "height=", "name?", "pattern?", "size?", "src!", "type?", "value=", "width="],
 get$on: function() {
  return $._InputElementEventsImpl$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Int16Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int8Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('JavaScriptCallFrame', {"": ["type?"]
});

$.$defineNativeClass('KeyboardEvent', {"": ["altKey?", "ctrlKey?", "keyLocation?", "shiftKey?"]
});

$.$defineNativeClass('HTMLKeygenElement', {"": ["name?", "type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', {"": ["type?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', {"": ["align?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', {"": ["target?", "type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('History', {"": ["length?"]
});

$.$defineNativeClass('Location', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('LocalMediaStream', {"": [],
 stop$0: function() {
  return this.stop();
}
});

$.$defineNativeClass('DOMWindow', {"": ["name?", "navigator?"],
 open$3: function(url, name$, options) {
  if (options == null)
    return $._DOMWindowCrossFrameImpl__createSafe(this.open(url,name$));
  else
    return $._DOMWindowCrossFrameImpl__createSafe(this.open(url,name$,options));
},
 requestAnimationFrame$1: function(callback) {
  this._ensureRequestAnimationFrame$0();
  return this._requestAnimationFrame$1(callback);
},
 _requestAnimationFrame$1: function(callback) {
  return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
},
 _ensureRequestAnimationFrame$0: function() {
  if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
    return;
    (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
},
 get$on: function() {
  return $._LocalWindowEventsImpl$(this);
},
 get$parent: function() {
  return $._convertNativeToDart_Window(this.get$_parent());
},
 get$_parent: function() {
  return this.parent;
},
 get$top: function() {
  return $._convertNativeToDart_Window(this.get$_top());
},
 get$_top: function() {
  return this.top;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 focus$0: function() {
  return this.focus();
},
 moveTo$2: function(x, y) {
  return this.moveTo(x,y);
},
 postMessage$3: function(message, targetOrigin, messagePorts) {
  var t1, t2;
  t1 = $ === message;
  if (t1)
    message = null;
  t1 = !t1;
  t2 = $ === messagePorts;
  if (t2)
    messagePorts = null;
  if (t1 && t2) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
    return;
  }
  if (t1)
    t1 = typeof messagePorts === 'object' && messagePorts !== null && (messagePorts.constructor === Array || messagePorts.is$List()) || messagePorts == null;
  else
    t1 = false;
  if (t1) {
    this._postMessage_2$3($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin, messagePorts);
    return;
  }
  throw $.$$throw($.CTC9);
},
 postMessage$2: function(message,targetOrigin) {
  return this.postMessage$3(message,targetOrigin,$)
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 _postMessage_2$3: function(message, targetOrigin, messagePorts) {
  return this.postMessage(message,targetOrigin,messagePorts);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 stop$0: function() {
  return this.stop();
}
});

$.$defineNativeClass('HTMLMapElement', {"": ["name?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', {"": ["direction=", "height=", "loop!", "width="],
 start$0: function() {
  return this.start();
},
 stop$0: function() {
  return this.stop();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaController', {"": ["currentTime=", "duration?", "volume="],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 pause$0: function() {
  return this.pause();
},
 play$0: function() {
  return this.play();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaElementAudioSourceNode', {"": []
});

$.$defineNativeClass('HTMLMediaElement', {"": ["currentTime=", "duration?", "ended?", "error?", "loop!", "src!", "volume="],
 get$on: function() {
  return $._MediaElementEventsImpl$(this);
},
 canPlayType$2: function(type, keySystem) {
  return this.canPlayType(type,keySystem);
},
 load$0: function() {
  return this.load();
},
 get$load: function() { return new $.BoundClosure0(this, 'load$0'); },
 pause$0: function() {
  return this.pause();
},
 play$0: function() {
  return this.play();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaError', {"": []
});

$.$defineNativeClass('MediaKeyError', {"": []
});

$.$defineNativeClass('MediaKeyEvent', {"": ["message?"]
});

$.$defineNativeClass('MediaList', {"": ["length?"]
});

$.$defineNativeClass('MediaQueryList', {"": []
});

$.$defineNativeClass('MediaSource', {"": ["duration?"],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaStreamEvent', {"": []
});

$.$defineNativeClass('MediaStream', {"": [],
 get$on: function() {
  return $._MediaStreamEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrackEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrack', {"": [],
 get$on: function() {
  return $._MediaStreamTrackEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackList', {"": ["length?"],
 get$on: function() {
  return $._MediaStreamTrackListEventsImpl$(this);
},
 add$1: function(track) {
  return this.add(track);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MemoryInfo', {"": []
});

$.$defineNativeClass('HTMLMenuElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MessageChannel', {"": []
});

$.$defineNativeClass('MessageEvent', {"": ["ports?"]
});

$.$defineNativeClass('MessagePort', {"": [],
 get$on: function() {
  return $._MessagePortEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
}
});

$.$defineNativeClass('HTMLMetaElement', {"": ["name?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Metadata', {"": ["size?"]
});

$.$defineNativeClass('HTMLMeterElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MouseEvent', {"": ["altKey?", "button?", "ctrlKey?", "shiftKey?", "x?", "y?"],
 get$offsetX: function() {
  if (!!this.offsetX)
    return this.offsetX;
  else {
    var target = this.get$target();
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.UnsupportedError$('offsetX is only supported on elements'));
    return $.sub(this.clientX, this.get$target().getBoundingClientRect$0().get$left());
  }
},
 get$offsetY: function() {
  if (!!this.offsetY)
    return this.offsetY;
  else {
    var target = this.get$target();
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.UnsupportedError$('offsetY is only supported on elements'));
    return $.sub(this.clientY, this.get$target().getBoundingClientRect$0().get$top());
  }
}
});

$.$defineNativeClass('MutationEvent', {"": []
});

$.$defineNativeClass('MutationObserver', {"": [],
 observe$9$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$options$subtree: function(target, attributeFilter, attributeOldValue, attributes, characterData, characterDataOldValue, childList, options, subtree) {
  var parsedOptions, t1;
  parsedOptions = {};
  if (!(options == null))
    $.forEach(options, new $._MutationObserverImpl_observe_anon(parsedOptions));
  t1 = new $._MutationObserverImpl_observe_override(parsedOptions);
  t1.call$2('childList', childList);
  t1.call$2('attributes', attributes);
  t1.call$2('characterData', characterData);
  t1.call$2('subtree', subtree);
  t1.call$2('attributeOldValue', attributeOldValue);
  t1.call$2('characterDataOldValue', characterDataOldValue);
  if (!(attributeFilter == null))
    t1.call$2('attributeFilter', attributeFilter);
  this._call$2(target, parsedOptions);
},
 observe$2$attributes: function(target,attributes) {
  return this.observe$9$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$options$subtree(target,null,null,attributes,null,null,null,null,null)
},
 _call$2: function(target, options) {
  return this.observe(target,options);
}
});

$.$defineNativeClass('MutationRecord', {"": ["target?", "type?"]
});

$.$defineNativeClass('NamedNodeMap', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Navigator', {"": ["userAgent?"]
});

$.$defineNativeClass('NavigatorUserMediaError', {"": []
});

$.$defineNativeClass('NodeFilter', {"": []
});

$.$defineNativeClass('Node', {"": [],
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
  {
  if (!(this.get$parent() == null))
    this.get$parent().$dom_removeChild$1(this);
}
  } else {
    return Object.prototype.remove$0.call(this);
  }

},
 replaceWith$1: function(otherNode) {
  var parent$;
  try {
    parent$ = this.get$parent();
    parent$.$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 get$$$dom_childNodes: function() {
  return this.childNodes;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
  return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  this.textContent = value;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 clone$1: function(deep) {
  if (Object.getPrototypeOf(this).hasOwnProperty('clone$1')) {
  {
  return this.cloneNode(deep);
}
  } else {
    return Object.prototype.clone$1.call(this, deep);
  }

},
 contains$1: function(other) {
  return this.contains(other);
},
 $dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
}
});

$.$defineNativeClass('NodeIterator', {"": [],
 filter$1: function(arg0) { return this.filter.call$1(arg0); }
});

$.$defineNativeClass('NodeList', {"": ["_parent?", "length?"],
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  this._parent.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._parent.$dom_appendChild$1(value);
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    this._parent.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._parent.set$text('');
},
 operator$indexSet$2: function(index, value) {
  this._parent.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 operator$index$1: function(index) {
  return this[index];
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Notation', {"": []
});

$.$defineNativeClass('NotificationCenter', {"": []
});

$.$defineNativeClass('Notification', {"": [],
 get$on: function() {
  return $._NotificationEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('OESElementIndexUint', {"": []
});

$.$defineNativeClass('OESStandardDerivatives', {"": []
});

$.$defineNativeClass('OESTextureFloat', {"": []
});

$.$defineNativeClass('OESVertexArrayObject', {"": []
});

$.$defineNativeClass('HTMLOListElement', {"": ["type?"],
 start$0: function() { return this.start.call$0(); },
 start$1: function(arg0) { return this.start.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', {"": ["align?", "height=", "name?", "type?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OfflineAudioCompletionEvent', {"": []
});

$.$defineNativeClass('HTMLOptGroupElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OscillatorNode', {"": ["type?"],
 start$1: function(when) {
  return this.start(when);
},
 stop$1: function(when) {
  return this.stop(when);
}
});

$.$defineNativeClass('HTMLOutputElement', {"": ["name?", "type?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OverflowEvent', {"": []
});

$.$defineNativeClass('PagePopupController', {"": []
});

$.$defineNativeClass('PageTransitionEvent', {"": []
});

$.$defineNativeClass('PannerNode', {"": []
});

$.$defineNativeClass('HTMLParagraphElement', {"": ["align?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', {"": ["name?", "type?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', {"": [],
 get$on: function() {
  return $._PeerConnection00EventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Performance', {"": []
});

$.$defineNativeClass('PerformanceNavigation', {"": ["type?"]
});

$.$defineNativeClass('PerformanceTiming', {"": []
});

$.$defineNativeClass('WebKitPoint', {"": ["x=", "y="]
});

$.$defineNativeClass('PopStateEvent', {"": []
});

$.$defineNativeClass('PositionError', {"": ["message?"]
});

$.$defineNativeClass('HTMLPreElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProcessingInstruction', {"": ["target?"]
});

$.$defineNativeClass('HTMLProgressElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProgressEvent', {"": []
});

$.$defineNativeClass('HTMLQuoteElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('RGBColor', {"": []
});

$.$defineNativeClass('RTCDataChannelEvent', {"": []
});

$.$defineNativeClass('RTCDataChannel', {"": [],
 get$on: function() {
  return $._RTCDataChannelEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCIceCandidateEvent', {"": []
});

$.$defineNativeClass('RTCIceCandidate', {"": []
});

$.$defineNativeClass('RTCPeerConnection', {"": [],
 get$on: function() {
  return $._RTCPeerConnectionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', {"": ["type?"]
});

$.$defineNativeClass('RTCStatsElement', {"": []
});

$.$defineNativeClass('RTCStatsReport', {"": []
});

$.$defineNativeClass('RTCStatsResponse', {"": []
});

$.$defineNativeClass('RadioNodeList', {"": ["value="],
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('RangeException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Range', {"": [],
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 getClientRects$0: function() {
  return this.getClientRects();
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Rect', {"": ["bottom?", "left?", "right?", "top?"]
});

$.$defineNativeClass('SQLError', {"": ["message?"]
});

$.$defineNativeClass('SQLException', {"": ["message?"]
});

$.$defineNativeClass('SQLResultSet', {"": []
});

$.$defineNativeClass('SQLResultSetRowList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SQLTransaction', {"": []
});

$.$defineNativeClass('SQLTransactionSync', {"": []
});

$.$defineNativeClass('SVGAElement', {"": ["target?"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphDefElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphItemElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAngle', {"": ["value="]
});

$.$defineNativeClass('SVGAnimateColorElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimateElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimateMotionElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimateTransformElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedAngle', {"": []
});

$.$defineNativeClass('SVGAnimatedBoolean', {"": []
});

$.$defineNativeClass('SVGAnimatedEnumeration', {"": []
});

$.$defineNativeClass('SVGAnimatedInteger', {"": []
});

$.$defineNativeClass('SVGAnimatedLength', {"": []
});

$.$defineNativeClass('SVGAnimatedLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumber', {"": []
});

$.$defineNativeClass('SVGAnimatedNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGAnimatedRect', {"": []
});

$.$defineNativeClass('SVGAnimatedString', {"": []
});

$.$defineNativeClass('SVGAnimatedTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGCircleElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGClipPathElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGColor', {"": []
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', {"": ["type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGCursorElement', {"": ["x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGDefsElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGDescElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGDocument', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGElement', {"": [],
 get$elements: function() {
  return $._FilteredElementList$(this);
},
 get$id: function() {
  return this.id;
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGElementInstance', {"": [],
 get$on: function() {
  return $._SVGElementInstanceEventsImpl$(this);
}
});

$.$defineNativeClass('SVGElementInstanceList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGEllipseElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"": ["type?", "height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFECompositeElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDistantLightElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDropShadowElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFloodElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncAElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncBElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncGElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncRElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEImageElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeNodeElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEMorphologyElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEOffsetElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEPointLightElement', {"": ["x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFESpotLightElement', {"": ["x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFETileElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFETurbulenceElement', {"": ["type?", "height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFilterElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceFormatElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceNameElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceSrcElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceUriElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGForeignObjectElement', {"": ["height?", "width?", "x?", "y?"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGlyphElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGlyphRefElement', {"": ["x=", "y="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGradientElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGHKernElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGImageElement', {"": ["height?", "width?", "x?", "y?"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGLength', {"": ["value="]
});

$.$defineNativeClass('SVGLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGLinearGradientElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMPathElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMarkerElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMaskElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMatrix', {"": ["a?", "b?", "c?", "d?"]
});

$.$defineNativeClass('SVGMetadataElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMissingGlyphElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGNumber', {"": ["value="]
});

$.$defineNativeClass('SVGNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGPaint', {"": []
});

$.$defineNativeClass('SVGPathElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcAbs', {"": ["angle?", "x=", "y="]
});

$.$defineNativeClass('SVGPathSegArcRel', {"": ["angle?", "x=", "y="]
});

$.$defineNativeClass('SVGPathSegClosePath', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSeg', {"": []
});

$.$defineNativeClass('SVGPathSegLinetoAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', {"": ["x="]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', {"": ["x="]
});

$.$defineNativeClass('SVGPathSegLinetoRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', {"": ["y="]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', {"": ["y="]
});

$.$defineNativeClass('SVGPathSegList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegMovetoRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPatternElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPoint', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPointList', {"": [],
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPolygonElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPolylineElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPreserveAspectRatio', {"": ["align?"]
});

$.$defineNativeClass('SVGRadialGradientElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGRectElement', {"": ["height?", "width?", "x?", "y?"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGRect', {"": ["height=", "width=", "x=", "y="]
});

$.$defineNativeClass('SVGRenderingIntent', {"": []
});

$.$defineNativeClass('SVGSVGElement', {"": ["height?", "width?", "x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGScriptElement', {"": ["type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSetElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGStopElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGStringList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {"": ["type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSwitchElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSymbolElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTRefElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTSpanElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextContentElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextPathElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextPositioningElement', {"": ["x?", "y?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTitleElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTransform', {"": ["angle?", "type?"]
});

$.$defineNativeClass('SVGTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGUnitTypes', {"": []
});

$.$defineNativeClass('SVGUseElement', {"": ["height?", "width?", "x?", "y?"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGVKernElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGViewElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGViewSpec', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGZoomEvent', {"": []
});

$.$defineNativeClass('Screen', {"": ["height?", "width?"]
});

$.$defineNativeClass('HTMLScriptElement', {"": ["src!", "type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ScriptProcessorNode', {"": [],
 get$on: function() {
  return $._ScriptProcessorNodeEventsImpl$(this);
}
});

$.$defineNativeClass('ScriptProfile', {"": []
});

$.$defineNativeClass('ScriptProfileNode', {"": ["visible?"]
});

$.$defineNativeClass('HTMLSelectElement', {"": ["length=", "name?", "size?", "type?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SessionDescription', {"": []
});

$.$defineNativeClass('HTMLShadowElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', {"": [],
 clone$1: function(deep) {
  return this.cloneNode(deep);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('SharedWorkerContext', {"": ["name?"],
 get$on: function() {
  return $._SharedWorkerContextEventsImpl$(this);
}
});

$.$defineNativeClass('SharedWorker', {"": []
});

$.$defineNativeClass('SourceBuffer', {"": []
});

$.$defineNativeClass('SourceBufferList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {"": ["src!", "type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SpeechGrammar', {"": ["src!"]
});

$.$defineNativeClass('SpeechGrammarList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SpeechInputEvent', {"": []
});

$.$defineNativeClass('SpeechInputResult', {"": []
});

$.$defineNativeClass('SpeechInputResultList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionAlternative', {"": []
});

$.$defineNativeClass('SpeechRecognitionError', {"": ["message?"]
});

$.$defineNativeClass('SpeechRecognitionEvent', {"": []
});

$.$defineNativeClass('SpeechRecognition', {"": [],
 get$on: function() {
  return $._SpeechRecognitionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
},
 stop$0: function() {
  return this.stop();
}
});

$.$defineNativeClass('SpeechRecognitionResult', {"": ["length?"]
});

$.$defineNativeClass('SpeechRecognitionResultList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"": ["key?"]
});

$.$defineNativeClass('Storage', {"": [],
 containsKey$1: function(key) {
  return !(this.$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$dom_getItem$1(key);
},
 operator$indexSet$2: function(key, value) {
  return this.$dom_setItem$2(key, value);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$dom_clear$0();
},
 forEach$1: function(f) {
  var i, key;
  for (i = 0; true; ++i) {
    key = this.$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$keys: function() {
  var keys = [];
  this.forEach$1(new $._StorageImpl_keys_anon(keys));
  return keys;
},
 get$values: function() {
  var values = [];
  this.forEach$1(new $._StorageImpl_values_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 get$isEmpty: function() {
  return this.$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
  return this.length;
},
 $dom_clear$0: function() {
  return this.clear();
},
 $dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $dom_key$1: function(index) {
  return this.key(index);
},
 $dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageInfo', {"": []
});

$.$defineNativeClass('HTMLStyleElement', {"": ["type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('StyleMedia', {"": ["type?"]
});

$.$defineNativeClass('StyleSheet', {"": ["type?"]
});

$.$defineNativeClass('StyleSheetList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLTableCaptionElement', {"": ["align?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', {"": ["align?", "height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', {"": ["align?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', {"": ["align?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', {"": ["align?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', {"": ["align?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTextAreaElement', {"": ["name?", "type?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TextEvent', {"": []
});

$.$defineNativeClass('Text', {"": []
});

$.$defineNativeClass('TextMetrics', {"": ["width?"]
});

$.$defineNativeClass('TextTrackCue', {"": ["align?", "id?", "size?", "text!"],
 get$on: function() {
  return $._TextTrackCueEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TextTrack', {"": [],
 get$on: function() {
  return $._TextTrackEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackList', {"": ["length?"],
 get$on: function() {
  return $._TextTrackListEventsImpl$(this);
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"": ["length?"],
 start$1: function(index) {
  return this.start(index);
}
});

$.$defineNativeClass('HTMLTitleElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TouchEvent', {"": ["altKey?", "ctrlKey?", "shiftKey?"]
});

$.$defineNativeClass('Touch', {"": [],
 get$target: function() {
  return $._convertNativeToDart_EventTarget(this.get$_lib_target());
},
 get$_lib_target: function() {
  return this.target;
}
});

$.$defineNativeClass('TouchList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {"": ["src!"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TrackEvent', {"": []
});

$.$defineNativeClass('WebKitTransitionEvent', {"": []
});

$.$defineNativeClass('TreeWalker', {"": [],
 filter$1: function(arg0) { return this.filter.call$1(arg0); }
});

$.$defineNativeClass('UIEvent', {"": ["charCode?", "keyCode?"]
});

$.$defineNativeClass('HTMLUListElement', {"": ["type?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Uint16Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', {"": [],
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLUnknownElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ValidityState', {"": []
});

$.$defineNativeClass('HTMLVideoElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('WaveShaperNode', {"": []
});

$.$defineNativeClass('WaveTable', {"": []
});

$.$defineNativeClass('WebGLActiveInfo', {"": ["name?", "size?", "type?"]
});

$.$defineNativeClass('WebGLBuffer', {"": []
});

$.$defineNativeClass('WebGLCompressedTextureS3TC', {"": []
});

$.$defineNativeClass('WebGLContextAttributes', {"": ["alpha="]
});

$.$defineNativeClass('WebGLContextEvent', {"": []
});

$.$defineNativeClass('WebGLDebugRendererInfo', {"": []
});

$.$defineNativeClass('WebGLDebugShaders', {"": []
});

$.$defineNativeClass('WebGLDepthTexture', {"": []
});

$.$defineNativeClass('WebGLFramebuffer', {"": []
});

$.$defineNativeClass('WebGLLoseContext', {"": []
});

$.$defineNativeClass('WebGLProgram', {"": []
});

$.$defineNativeClass('WebGLRenderbuffer', {"": []
});

$.$defineNativeClass('WebGLRenderingContext', {"": [],
 lineWidth$1: function(width) {
  return this.lineWidth(width);
}
});

$.$defineNativeClass('WebGLShader', {"": []
});

$.$defineNativeClass('WebGLShaderPrecisionFormat', {"": []
});

$.$defineNativeClass('WebGLTexture', {"": []
});

$.$defineNativeClass('WebGLUniformLocation', {"": []
});

$.$defineNativeClass('WebGLVertexArrayObjectOES', {"": []
});

$.$defineNativeClass('WebKitAnimationList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('WebKitCSSFilterValue', {"": [],
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('WebKitNamedFlow', {"": ["name?"],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {"": [],
 get$on: function() {
  return $._WebSocketEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WheelEvent', {"": [],
 get$deltaY: function() {
  if (this.deltaY !== undefined)
    return this.get$_lib_deltaY();
  else if (this.wheelDelta !== undefined)
    return this.get$_wheelDelta();
  else if (this.detail !== undefined) {
    if (this.axis == MouseScrollEvent.VERTICAL_AXIS) {
      var detail = this.get$_detail();
      if ($.ltB(detail, 100))
        return $.mul(detail, 40);
      return detail;
    }
    return 0;
  }
  throw $.$$throw($.UnsupportedError$('deltaY is not supported'));
},
 get$deltaX: function() {
  if (this.deltaX !== undefined)
    return this.get$_lib_deltaX();
  else if (this.wheelDeltaX !== undefined)
    return this.get$_wheelDeltaX();
  else if (this.detail !== undefined) {
    if (this.axis !== undefined && this.axis == MouseScrollEvent.HORIZONTAL_AXIS) {
      var detail = this.get$_detail();
      if ($.ltB(detail, 100))
        return $.mul(detail, 40);
      return detail;
    }
    return 0;
  }
  throw $.$$throw($.UnsupportedError$('deltaX is not supported'));
},
 get$_lib_deltaY: function() {
  return this.deltaY;
},
 get$_lib_deltaX: function() {
  return this.deltaX;
},
 get$_wheelDelta: function() {
  return this.wheelDelta;
},
 get$_wheelDeltaX: function() {
  return this.wheelDeltaX;
},
 get$_detail: function() {
  return this.detail;
}
});

$.$defineNativeClass('WorkerContext', {"": ["navigator?"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._WorkerContextEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('Worker', {"": [],
 get$on: function() {
  return $._WorkerEventsImpl$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerLocation', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', {"": ["userAgent?"]
});

$.$defineNativeClass('XMLSerializer', {"": []
});

$.$defineNativeClass('XPathEvaluator', {"": []
});

$.$defineNativeClass('XPathException', {"": ["message?", "name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XPathExpression', {"": []
});

$.$defineNativeClass('XPathNSResolver', {"": []
});

$.$defineNativeClass('XPathResult', {"": []
});

$.$defineNativeClass('XSLTProcessor', {"": [],
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('Worker', {"": [],
 get$id: function() {
  return this.id;
},
 postMessage$1: function(msg) {
  return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', {"": [],
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
}
});

// 527 dynamic classes.
// 527 classes
// 41 !leaf
(function(){
  var v0/*class(_SVGTextPositioningElementImpl)*/ = 'SVGTextPositioningElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement';
  var v1/*class(_Uint8ArrayImpl)*/ = 'Uint8Array|Uint8ClampedArray|Uint8ClampedArray';
  var v2/*class(_MouseEventImpl)*/ = 'MouseEvent|WheelEvent|WheelEvent';
  var v3/*class(_AudioSourceNodeImpl)*/ = 'AudioSourceNode|OscillatorNode|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode|OscillatorNode|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode';
  var v4/*class(_SVGColorImpl)*/ = 'SVGColor|SVGPaint|SVGPaint';
  var v5/*class(_CSSValueListImpl)*/ = 'CSSValueList|WebKitCSSFilterValue|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSTransformValue';
  var v6/*class(_TextImpl)*/ = 'Text|CDATASection|CDATASection';
  var v7/*class(_SVGTextContentElementImpl)*/ = [v0/*class(_SVGTextPositioningElementImpl)*/,v0/*class(_SVGTextPositioningElementImpl)*/,'SVGTextContentElement|SVGTextPathElement|SVGTextPathElement'].join('|');
  var v8/*class(_SVGGradientElementImpl)*/ = 'SVGGradientElement|SVGRadialGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGLinearGradientElement';
  var v9/*class(_SVGComponentTransferFunctionElementImpl)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement';
  var v10/*class(_SVGAnimationElementImpl)*/ = 'SVGAnimationElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement';
  var v11/*class(_SVGElementImpl)*/ = [v7/*class(_SVGTextContentElementImpl)*/,v8/*class(_SVGGradientElementImpl)*/,v9/*class(_SVGComponentTransferFunctionElementImpl)*/,v10/*class(_SVGAnimationElementImpl)*/,v7/*class(_SVGTextContentElementImpl)*/,v8/*class(_SVGGradientElementImpl)*/,v9/*class(_SVGComponentTransferFunctionElementImpl)*/,v10/*class(_SVGAnimationElementImpl)*/,'SVGElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement'].join('|');
  var v12/*class(_MediaElementImpl)*/ = 'HTMLMediaElement|HTMLVideoElement|HTMLAudioElement|HTMLVideoElement|HTMLAudioElement';
  var v13/*class(_UIEventImpl)*/ = [v2/*class(_MouseEventImpl)*/,v2/*class(_MouseEventImpl)*/,'UIEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent'].join('|');
  var v14/*class(_ProgressEventImpl)*/ = 'ProgressEvent|XMLHttpRequestProgressEvent|XMLHttpRequestProgressEvent';
  var v15/*class(_ElementImpl)*/ = [v11/*class(_SVGElementImpl)*/,v12/*class(_MediaElementImpl)*/,v11/*class(_SVGElementImpl)*/,v12/*class(_MediaElementImpl)*/,'Element|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement'].join('|');
  var v16/*class(_DocumentImpl)*/ = 'HTMLDocument|SVGDocument|SVGDocument';
  var v17/*class(_DocumentFragmentImpl)*/ = 'DocumentFragment|ShadowRoot|ShadowRoot';
  var v18/*class(_CharacterDataImpl)*/ = [v6/*class(_TextImpl)*/,v6/*class(_TextImpl)*/,'CharacterData|Comment|Comment'].join('|');
  var v19/*class(_WorkerContextImpl)*/ = 'WorkerContext|SharedWorkerContext|DedicatedWorkerContext|SharedWorkerContext|DedicatedWorkerContext';
  var v20/*class(_NodeImpl)*/ = [v15/*class(_ElementImpl)*/,v16/*class(_DocumentImpl)*/,v17/*class(_DocumentFragmentImpl)*/,v18/*class(_CharacterDataImpl)*/,v15/*class(_ElementImpl)*/,v16/*class(_DocumentImpl)*/,v17/*class(_DocumentFragmentImpl)*/,v18/*class(_CharacterDataImpl)*/,'Node|ProcessingInstruction|Notation|EntityReference|DocumentType|Attr|ProcessingInstruction|Notation|EntityReference|DocumentType|Attr'].join('|');
  var v21/*class(_MediaStreamImpl)*/ = 'MediaStream|LocalMediaStream|LocalMediaStream';
  var v22/*class(_IDBRequestImpl)*/ = 'IDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest';
  var v23/*class(_AbstractWorkerImpl)*/ = 'AbstractWorker|Worker|SharedWorker|Worker|SharedWorker';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['SVGTextPositioningElement', v0/*class(_SVGTextPositioningElementImpl)*/],
    ['SVGTextContentElement', v7/*class(_SVGTextContentElementImpl)*/],
    ['StyleSheet', 'StyleSheet|CSSStyleSheet|CSSStyleSheet'],
    ['Text', v6/*class(_TextImpl)*/],
    ['AbstractWorker', v23/*class(_AbstractWorkerImpl)*/],
    ['Uint8Array', v1/*class(_Uint8ArrayImpl)*/],
    ['ArrayBufferView', [v1/*class(_Uint8ArrayImpl)*/,v1/*class(_Uint8ArrayImpl)*/,'ArrayBufferView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView'].join('|')],
    ['MouseEvent', v2/*class(_MouseEventImpl)*/],
    ['UIEvent', v13/*class(_UIEventImpl)*/],
    ['AudioSourceNode', v3/*class(_AudioSourceNodeImpl)*/],
    ['AudioNode', [v3/*class(_AudioSourceNodeImpl)*/,v3/*class(_AudioSourceNodeImpl)*/,'AudioNode|WaveShaperNode|ScriptProcessorNode|PannerNode|GainNode|DynamicsCompressorNode|DelayNode|ConvolverNode|ChannelSplitterNode|ChannelMergerNode|BiquadFilterNode|AudioDestinationNode|AnalyserNode|WaveShaperNode|ScriptProcessorNode|PannerNode|GainNode|DynamicsCompressorNode|DelayNode|ConvolverNode|ChannelSplitterNode|ChannelMergerNode|BiquadFilterNode|AudioDestinationNode|AnalyserNode'].join('|')],
    ['AudioParam', 'AudioParam|AudioGain|AudioGain'],
    ['Blob', 'Blob|File|File'],
    ['CSSRule', 'CSSRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule'],
    ['SVGColor', v4/*class(_SVGColorImpl)*/],
    ['CSSValueList', v5/*class(_CSSValueListImpl)*/],
    ['CSSValue', [v4/*class(_SVGColorImpl)*/,v5/*class(_CSSValueListImpl)*/,v4/*class(_SVGColorImpl)*/,v5/*class(_CSSValueListImpl)*/,'CSSValue|CSSPrimitiveValue|CSSPrimitiveValue'].join('|')],
    ['WorkerContext', v19/*class(_WorkerContextImpl)*/],
    ['CanvasRenderingContext', 'CanvasRenderingContext|WebGLRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext|CanvasRenderingContext2D'],
    ['CharacterData', v18/*class(_CharacterDataImpl)*/],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList|DOMSettableTokenList'],
    ['DocumentFragment', v17/*class(_DocumentFragmentImpl)*/],
    ['HTMLDocument', v16/*class(_DocumentImpl)*/],
    ['SVGGradientElement', v8/*class(_SVGGradientElementImpl)*/],
    ['SVGComponentTransferFunctionElement', v9/*class(_SVGComponentTransferFunctionElementImpl)*/],
    ['SVGAnimationElement', v10/*class(_SVGAnimationElementImpl)*/],
    ['SVGElement', v11/*class(_SVGElementImpl)*/],
    ['HTMLMediaElement', v12/*class(_MediaElementImpl)*/],
    ['Element', v15/*class(_ElementImpl)*/],
    ['Entry', 'Entry|FileEntry|DirectoryEntry|FileEntry|DirectoryEntry'],
    ['EntrySync', 'EntrySync|FileEntrySync|DirectoryEntrySync|FileEntrySync|DirectoryEntrySync'],
    ['ProgressEvent', v14/*class(_ProgressEventImpl)*/],
    ['Event', [v13/*class(_UIEventImpl)*/,v14/*class(_ProgressEventImpl)*/,v13/*class(_UIEventImpl)*/,v14/*class(_ProgressEventImpl)*/,'Event|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|RTCDataChannelEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|RTCDataChannelEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent'].join('|')],
    ['Node', v20/*class(_NodeImpl)*/],
    ['MediaStream', v21/*class(_MediaStreamImpl)*/],
    ['IDBRequest', v22/*class(_IDBRequestImpl)*/],
    ['EventTarget', [v19/*class(_WorkerContextImpl)*/,v20/*class(_NodeImpl)*/,v21/*class(_MediaStreamImpl)*/,v22/*class(_IDBRequestImpl)*/,v23/*class(_AbstractWorkerImpl)*/,v19/*class(_WorkerContextImpl)*/,v20/*class(_NodeImpl)*/,v21/*class(_MediaStreamImpl)*/,v22/*class(_IDBRequestImpl)*/,v23/*class(_AbstractWorkerImpl)*/,'EventTarget|WebSocket|WebKitNamedFlow|TextTrackList|TextTrack|TextTrackCue|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|RTCDataChannel|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|DOMWindow|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext|WebSocket|WebKitNamedFlow|TextTrackList|TextTrack|TextTrackCue|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|RTCDataChannel|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|DOMWindow|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext'].join('|')],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection|HTMLOptionsCollection'],
    ['IDBCursor', 'IDBCursor|IDBCursorWithValue|IDBCursorWithValue'],
    ['NodeList', 'NodeList|RadioNodeList|RadioNodeList'],
    ['SVGPathSeg', 'SVGPathSeg|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document != 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner == 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner == 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== "undefined") supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  var getter = new Function("{ return $." + fieldName + ";}");
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=escape.dart.js.map